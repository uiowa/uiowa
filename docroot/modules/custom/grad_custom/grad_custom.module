<?php

/**
 * @file
 * Contains grad_srop.module.
 */

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_presave().
 */
function grad_custom_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'thesis_defense':
      // Setting the title with the first/last name values.
      $output = $entity->get('field_person_first_name')->value . " " . $entity->get('field_person_last_name')->value;
      $entity->setTitle($output);
      break;

  }
}

/**
 * Implements hook_form_alter().
 */
function grad_custom_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_thesis_defense_edit_form':
    case 'node_thesis_defense_form':
      // Our submit handler must execute before the layout_builder_styles one
      // so it can take advantage of the logic there.
      array_unshift($form['actions']['submit']['#submit'], '_grad_custom_thesis_defense_submit');
      if (isset($form['field_thesis_defense_date'])) {
        $form['field_thesis_defense_date']['widget'][0]['end_value']['#access'] = FALSE;
        $form['field_thesis_defense_date']['widget'][0]['duration']['#access'] = FALSE;
      }
      break;
  }
}

/**
 * Custom form submit function for thesis_defense.
 *
 * If the start and end date don't match, set them to the same value.
 *
 * @param array $form
 *   The form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _grad_custom_thesis_defense_submit(array &$form, FormStateInterface $form_state) {
  if ($date_field = $form_state->getValue(['field_thesis_defense_date', 0])) {
    $start = $date_field['value'];
    $end = $date_field['end_value'];

    // If these values don't match, make them match.
    if ($end->getPhpDateTime() != $start->getPhpDateTime()) {
      $form_state->setValue(['field_thesis_defense_date', 0, 'end_value'], $start);
    }
  }
}

/**
 * Implements hook_allowed_values_function().
 */
function srop_year_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  // Available srop year values.
  $thisyear = date('Y');
  $i = 2000;
  $options = [];
  while ($i <= $thisyear) :
    $options[$i] = $i;
    $i++;
  endwhile;
  return array_reverse($options);
}
