<?php

/**
 * @file
 * Contains lb_enhancements.module.
 */

use Drupal\layout_builder\Form\ConfigureBlockFormBase;
use Drupal\Component\Utility\Html;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\layout_builder_custom\LayoutBuilderPreRender;
use Drupal\layout_builder_custom\Plugin\Display\ListBlock;
use Drupal\layout_builder_styles\Entity\LayoutBuilderStyleGroup;
use Drupal\layout_builder_styles\LayoutBuilderStyleInterface;
use Drupal\uiowa_core\HeadlineHelper;
use Drupal\ctools_views\Plugin\Display\Block;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_element_info_alter().
 */
function layout_builder_custom_element_info_alter(array &$types) {
  $types['layout_builder']['#pre_render'][] = LayoutBuilderPreRender::class . '::preRender';
}

/**
 * Implements hook_form_alter().
 */
function layout_builder_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'layout_builder_add_block':
    case 'layout_builder_update_block':
      // Add custom validation for certain blocks/regions to validate.
      $form['#validate'][] = '_layout_builder_custom_block_validate';

      // Our submit handler must execute before the layout_builder_styles one
      // so it can take advantage of the logic there.
      array_unshift($form['#submit'], '_layout_builder_custom_block_submit');

      if (isset($form['settings'])) {
        // Add custom process callback for certain blocks to alter elements.
        $form['settings']['block_form']['#process'][] = '_layout_builder_custom_process_element';
      }

      // Add our LBS heading before style options.
      _layout_builder_custom_add_lbs_heading($form);

      // @todo Write a patch for layout_builder_styles that adds these options. See
      //   https://github.com/uiowa/uiowa/issues/5010
      // An array of options for altering Layout Builder Styles behavior.
      $lbs_extra_options = [
        'banner_gradient' => [
          'default' => 'banner_gradient_dark',
        ],
        'banner_height' => [
          'default' => 'banner_medium',
        ],
        'banner_type' => [
          'default' => 'banner_centered_left',
        ],
        'button_style' => [
          'default' => 'button_primary',
        ],
        'button_size' => [
          'default' => 'button_medium',
        ],
        'card_image_size' => [
          'default' => 'card_image_large',
        ],
        'card_media_position' => [
          'default' => 'card_media_position_stacked',
        ],
        'content_alignment' => [
          'default' => 'content_alignment_left',
        ],
        'grid_columns' => [
          'default' => 'block_grid_threecol_33_34_33',
        ],
        'headline_type' => [
          'default' => 'headline_bold_serif',
        ],
        'headline_size' => [
          'default' => 'headline_large',
        ],
        'list_format' => [
          'default' => 'list_format_list',
        ],
        'media_format' => [
          'default' => 'media_format_widescreen',
        ],
        'menu_orientation' => [
          'default' => 'block_menu_vertical',
        ],
      ];

      $groups = LayoutBuilderStyleGroup::loadMultiple();

      // Loop through layout builder style groups.
      foreach (array_keys($groups) as $group) {

        // Check if we have extra options defined.
        if (isset($lbs_extra_options[$group])) {
          // The key that is used in the form array.
          $group_key = 'layout_builder_style_' . $group;

          // Check if the style group is set in the form.
          if (isset($form[$group_key])) {

            if ($form_id === 'layout_builder_add_block') {
              // Set default for this group if it exists.
              if (isset($lbs_extra_options[$group]['default'])) {
                $form[$group_key]['#default_value'] = [$lbs_extra_options[$group]['default']];
              }
            }
          }
        }
      }

      // Always set title field to not be required.
      $form['settings']['label']['#required'] = FALSE;

      // Hide all block labels.
      unset($form['settings']['label']);
      unset($form['settings']['label_display']);
      unset($form['settings']['admin_label']['#title']);
      // Hide ones implemented by Views because ListBlock has headline.
      // @todo Investigate whether this can be added to ListBlock. See
      //   https://github.com/uiowa/uiowa/issues/5035
      unset($form['settings']['views_label_fieldset']);
      unset($form['settings']['views_label_checkbox']);
      unset($form['settings']['views_label']);

      if (isset($form['layout_builder_style_grid_columns'])) {
        // Set '#states' for block grid columns.
        $form['layout_builder_style_grid_columns']['#states'] = [
          'visible' => [
            // Always show when list format is grid.
            [
              ':input[name="layout_builder_style_list_format"]' => [
                'value' => 'list_format_grid',
              ],
            ],
          ],
        ];
      }

      $form_object = $form_state->getFormObject();
      if ($form_object instanceof ConfigureBlockFormBase) {
        /** @var \Drupal\layout_builder\SectionComponent $component */
        $component = $form_object->getCurrentComponent();
        $block = $component->getPlugin();
        // Section component unique ID is stored in third-party settings.
        $form['unique_id_wrapper'] = [
          '#type' => 'container',
          '#weight' => 0,
          '#attributes' => [
            'id' => 'unique-id-wrapper',
          ],
          'unique_id' => [
            '#type' => 'textfield',
            '#title' => t('Unique ID'),
            '#description' => t('Provide a unique identifier for this block. Primarily used for anchor links. Input will be cleaned to convert spaces and remove special characters.'),
            '#default_value' => $component->getThirdPartySetting('layout_builder_custom', 'unique_id'),
            '#ajax' => [
              'callback' => '_layout_builder_custom_unique_id',
              'wrapper' => 'unique-id-wrapper',
              'disable-refocus' => TRUE,
            ],
          ],
        ];

        // Form modifications per block plugin and bundle.
        switch ($block->getPluginId()) {
          case 'inline_block:uiowa_banner':
            // We provide a field that provides background options, so
            // this is hidden.
            if (isset($form['layout_builder_style_background'])) {
              $form['layout_builder_style_background']['#access'] = FALSE;
            }
            // Move headline size option to top of display options.
            if (isset($form['layout_builder_style_headline_size'])) {
              $form['layout_builder_style_headline_size']['#weight'] = 89;
            }

            $form['#attached']['library'][] = 'layout_builder_custom/banner-block-form';
            break;

          case 'inline_block:uiowa_button':
            $form['layout_builder_style_button_width']['#description'] = t('If selected in single column layouts, multiple buttons will appear inline and equally sized. If selected in layouts with multiple columns, the buttons will stretch to fill the column and stack.');
            break;

          case 'inline_block:uiowa_quote':
            $form['#attached']['library'][] = 'layout_builder_custom/quote-block-form';
            break;

          case 'inline_block:uiowa_card':
            $form['#attached']['library'][] = 'layout_builder_custom/card-block-form';

          case 'inline_block:uiowa_aggregator':
          case 'inline_block:uiowa_events':
          case 'views_block:article_list_block-list_article':
          case 'views_block:events_list_block-card_list':
          case 'views_block:people_list_block-list_card':
            // Set '#states' for card image size.
            $form['layout_builder_style_card_image_size']['#states'] = [
              'visible' => [
                // Always show when media format is set to 'circle'.
                [
                  ':input[name="layout_builder_style_media_format"]' => [
                    'value' => 'media_format_circle',
                  ],
                ],
                // Always show when card media position is not 'stacked'.
                [
                  ':input[name="layout_builder_style_card_media_position"]' => [
                    '!value' => 'card_media_position_stacked',
                  ],
                ],
              ],
            ];

            $defaults = [
              'layout_builder_style_background' => 'block_background_style_light',
              'layout_builder_style_card_image_size' => 'card_image_small',
              'layout_builder_style_card_media_position' => 'card_media_position_right',
              'layout_builder_style_content_alignment' => 'content_alignment_left',
              'layout_builder_style_media_format' => 'media_format_widescreen',
            ];

            $form['layout_builder_style_card_media_position']['#options']['card_media_position_stacked'] = 'Stacked';

            switch ($block->getPluginId()) {
              case 'inline_block:uiowa_aggregator':
                break;

              case 'inline_block:uiowa_card':
                $defaults['layout_builder_style_card_media_position'] = 'card_media_position_stacked';
                break;

              case 'inline_block:uiowa_events':
              case 'views_block:events_list_block-card_list':
                $defaults['layout_builder_style_card_media_position'] = 'card_media_position_left';
                $defaults['layout_builder_style_media_format'] = 'media_format_circle';
                break;

              case 'views_block:article_list_block-list_article':
                $defaults['layout_builder_style_card_image_size'] = 'card_image_medium';
                break;

              case 'views_block:people_list_block-list_card':
                $defaults['layout_builder_style_media_format'] = 'media_format_circle';
            }

            foreach ($defaults as $key => $default) {
              if (isset($form[$key]) && isset($form[$key]['#options'][$default])) {
                $form[$key]['#options'][$default] .= ' (default)';
              }
            }

            // Set layout builder style default settings.
            if ($form_id === 'layout_builder_add_block') {

              if (isset($form['layout_builder_style_list_format'])) {
                $form['layout_builder_style_list_format']['#default_value'] = 'list_format_list';
              }
              if (isset($form['layout_builder_style_grid_columns'])) {
                $form['layout_builder_style_grid_columns']['#default_value'] = 'block_grid_threecol_33_34_33';
              }

              switch ($block->getPluginId()) {
                case 'views_block:article_list_block-list_article':
                  $form['settings']['override']['items_per_page']['#default_value'] = 10;
                  $form['settings']['override']['hide_fields']['order_fields']['field_article_source_link']['hide']['#default_value'] = 1;
                  break;

                case 'views_block:people_list_block-list_card':
                  $form['settings']['override']['items_per_page']['#default_value'] = 10;
                  break;
              }

              foreach ($defaults as $key => $default) {
                if (isset($form[$key])) {
                  $form[$key]['#default_value'] = $default;
                }
              }
            }
            break;

          case 'inline_block:uiowa_collection':
            $form['settings']['view_mode']['#type'] = 'radios';

            // We need to have a specified view mode,
            // so we remove the undefined 'default' option.
            array_shift($form['settings']['view_mode']['#options']);

            // @todo Re-enable 'tab' after theming/functionality is in place. See
            //   https://github.com/uiowa/uiowa/issues/5011
            unset($form['settings']['view_mode']['#options']['tab']);

            $view_options = [
              'accordion',
              'descriptive_list',
              'tab',
            ];

            // If view mode not in our options (eg 'full'), set it to <dl>.
            if (!in_array($form['settings']['view_mode']['#default_value'], $view_options)) {
              $form['settings']['view_mode']['#default_value'] = 'descriptive_list';
            }

            // Move view mode to the block form.
            $form['settings']['block_form']['view_mode'] = $form['settings']['view_mode'];
            $form['settings']['view_mode']['#access'] = FALSE;
            break;

          case 'menu_block:main':
            // If the menu_orientation style group is present...
            if (isset($form['layout_builder_style_menu_orientation'])) {

              // Move the layout_builder_style_menu_orientation into settings so
              // it can be placed below the admin label.
              $form['settings']['layout_builder_style_menu_orientation'] = [
                '#weight' => -10,
                  // We set the #tree to FALSE because this value
                  // will override the original in the form state.
                '#tree' => FALSE,
                '#description' => t('The "Horizontal" option will look the same as the "Vertical" option if this block is being placed in something other than a one column layout.'),
              ] + $form['layout_builder_style_menu_orientation'];

              // To get the style to process correctly, we need to leave it here
              // but make it inaccessible.
              $form['layout_builder_style_menu_orientation']['#access'] = FALSE;

              // Add #states to only show fixed parent
              // if follow active menu item is unchecked.
              $form['settings']['advanced']['parent']['#states'] = [
                'visible' => [
                  ':input[name="settings[follow]"]' => [
                    'checked' => FALSE,
                  ],
                ],
              ];

              // Add #states to level field to hide menu levels
              // if follow active menu item is unchecked.
              $form['settings']['menu_levels']['level']['#states'] = [
                'visible' => [
                  ':input[name="settings[follow]"]' => [
                    'checked' => FALSE,
                  ],
                ],
              ];

              // Unset the layout builder style heading.
              unset($form['lbs_heading']);
            }

            // Move the admin label up.
            $form['settings']['admin_label']['#weight'] = -20;

            // Adjustments to advanced settings.
            // Adjust name advanced options section.
            $form['settings']['advanced']['#title'] = t('Visibility options');
            // Move the advanced settings to be the first section.
            $form['settings']['advanced']['#weight'] = -5;
            // Hide the options to set the block title and link.
            $form['settings']['advanced']['label_type']['#access'] = FALSE;
            $form['settings']['advanced']['label_link']['#access'] = FALSE;
            // Append to the fixed parent description to indicate that initial
            // visibility level should be set to 1 if used.
            /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $parent_description */
            $parent_description = $form['settings']['advanced']['parent']['#description'];
            $form['settings']['advanced']['parent']['#description'] = t('@parent_description_text Make sure that "Initial visibility level" is set to "1" below.', array_merge(
              [
                '@parent_description_text' => $parent_description->getUntranslatedString(),
              ],
              $parent_description->getArguments()));
            // Unset the advanced description since it refers to
            // functionality that we are not offering.
            unset($form['settings']['advanced']['follow']['#description']);
            // Move the advanced follow setting to the front of its section.
            $form['settings']['advanced']['follow']['#weight'] = -20;

            // Adjustments to menu level settings.
            // Limit the depth options to 1-3.
            foreach ($form['settings']['menu_levels']['depth']['#options'] as $key => $depth) {
              if ($key < 1 || $key > 3) {
                unset($form['settings']['menu_levels']['depth']['#options'][$key]);
              }
            }
            // Hide the make the ability to force expand all items.
            $form['settings']['menu_levels']['expand_all_items']['#access'] = FALSE;

            // Hide the HTML and style options.
            $form['settings']['style']['#access'] = FALSE;

            // If the block is being added, default the advanced follow value to
            // TRUE.
            if ($form_id === 'layout_builder_add_block') {
              $form['settings']['advanced']['follow']['#default_value'] = TRUE;
            }

            break;

          case 'sitenow_dispatch_sign_up_form':
            // Checks to see if there is an API key set, and if not we
            // shouldn't be able to add the block, so remove the button.
            if (empty(\Drupal::config('sitenow_dispatch.settings')
              ->get('api_key'))) {
              $form['actions']['submit']['#access'] = FALSE;
            }
            break;

          case 'sitenow_dispatch_thankyou_form':
            // This block has to be explicitly enabled by an administrator.
            if (!\Drupal::config('sitenow_dispatch.settings')
              ->get('thanks.enabled')) {
              $form['actions']['submit']['#access'] = FALSE;
            }
            break;
        }
      }

      $form['settings'] += [
        '#weight' => 0,
      ];

      break;

    case 'layout_builder_configure_section':
      // Remove container settings - None - empty option.
      unset($form['layout_builder_style_container']['#empty_option']);
      // Add (Default) after Normal option.
      $form['layout_builder_style_container']['#options']['section_margin_fixed_width_container'] = 'Normal (Default)';

      if (isset($form['#attributes']['data-layout-builder-target-highlight-id'])) {

        $match = 'section-update';
        $is_update = substr($form['#attributes']['data-layout-builder-target-highlight-id'], 0, strlen($match)) === $match;

        // Set normal as the default only if a new section is added.
        if (!$is_update) {
          $form['layout_builder_style_container']['#default_value'] = ['section_margin_fixed_width_container'];
        }

      }
      // Add our LBS heading before style options.
      _layout_builder_custom_add_lbs_heading($form);

      $single_select_groups = [
        'layout_builder_style_background',
        'layout_builder_style_container',
        'layout_builder_style_components',
      ];

      foreach ($single_select_groups as $group) {
        if (isset($form[$group])) {
          // Disable multiple selection and weight before LBS elements so focus
          // on a Chosen-enabled select does not obscure other form elements.
          $form[$group]['#multiple'] = FALSE;
          $form[$group]['#weight'] = 89;
        }
      }

      break;

    case 'fragment_region_item_layout_builder_form':
    case 'fragment_region_item_after_content_layout_builder_form':
    case 'node_page_layout_builder_form':
      $form['#attached']['library'][] = 'layout_builder_custom/layout_builder_custom.overrides';
      break;
  }
}

/**
 * Custom validation for layout_builder_add/update_block form.
 *
 * @param array $form
 *   The form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _layout_builder_custom_block_validate(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ConfigureBlockFormBase) {
    /** @var \Drupal\layout_builder\SectionComponent $component */
    $component = $form_object->getCurrentComponent();

    // Run unique_id clean for when the AJAX callback is not triggered.
    if ($unique_id = $form_state->getValue([
      'unique_id_wrapper',
      'unique_id',
    ])) {
      $form_state->setValue([
        'unique_id_wrapper',
        'unique_id',
      ], Html::cleanCssIdentifier($unique_id));
    }

    switch ($component->getPluginId()) {
      case 'inline_block:uiowa_banner':
        $link_set = FALSE;
        $link_text = FALSE;

        // First check if there is a link set.
        foreach ($form_state->getValue([
          'settings',
          'block_form',
          'field_uiowa_banner_link',
        ]) as $key => $link) {
          if ($key === 'add_more' || empty($link['uri'])) {
            // If there is no uri, then we don't care about anything else.
            continue;
          }
          else {
            $link_set = TRUE;
          }

          if (!empty($link['title'])) {
            $link_text = TRUE;
          }
        }
        // If there is a link and no text, check if there is a title.
        if ($link_set && !empty($form_state->getValue([
          'settings',
          'block_form',
          'field_uiowa_banner_title',
          0,
          'container',
          'text',
        ]))) {
          $link_text = TRUE;
        }

        // If there is a link and no text we can use, we have a problem.
        if ($link_set && !$link_text) {
          $form_state->setErrorByName('settings][block_form][field_uiowa_banner_link][0][title', t('Link text must be set if no title is present.'));
        }
        break;

      case 'inline_block:uiowa_events':
        // Require time range if date_range timeframe is selected.
        if ($form_state->getValue('settings')['block_form']['field_uiowa_events_timeframe'][0]['value'] === 'date_range') {
          if (empty($form_state->getValue([
            'settings',
            'block_form',
            'field_uiowa_events_date_range',
            0,
            'time_wrapper',
            'value',
          ]))) {
            $form_state->setErrorByName('settings][block_form][field_uiowa_events_date_range][0][time_wrapper][value',
              t('Provide a date range.'));
          }
          else {
            // Restrict time range values.
            $min = strtotime('01-01-1970');
            $max = strtotime('31-12-2037');
            $start = $form_state->getValue([
              'settings',
              'block_form',
              'field_uiowa_events_date_range',
            ])[0]['time_wrapper']['value']->format('U');
            $end = $form_state->getValue([
              'settings',
              'block_form',
              'field_uiowa_events_date_range',
            ])[0]['time_wrapper']['end_value']->format('U');
            if ($start < $min || $start > $max) {
              $form_state->setErrorByName('settings][block_form][field_uiowa_events_date_range][0][time_wrapper][end_value',
                t('Invalid start date.'));
            }
            if ($end < $min || $end > $max) {
              $form_state->setErrorByName('settings][block_form][field_uiowa_events_date_range][0][time_wrapper][end_value',
                t('Invalid end date.'));
            }
          }
        }
        break;

      case 'inline_block:uiowa_statistic':
        $block_form = $form_state->getValue('settings')['block_form'];
        $prefix = $block_form['field_uiowa_statistic_title_pre'][0]['value'];
        $suffix = $block_form['field_uiowa_statistic_title_suf'][0]['value'];
        if (strlen($prefix) > 3) {
          $form_state->setErrorByName('settings][block_form][field_uiowa_statistic_title_pre', t('Prefix cannot exceed 3 characters.'));
        }
        if (strlen($suffix) > 3) {
          $form_state->setErrorByName('settings][block_form][field_uiowa_statistic_title_suf', t('Suffix cannot exceed 3 characters.'));
        }
        break;

      // Limit slider to 4 slides. Display an error if more than 4 on save.
      case 'inline_block:uiowa_slider':
        $block_form = $form_state->getValue('settings')['block_form'];
        if (isset($block_form['field_uiowa_slider_slides']['add_more'])) {
          unset($block_form['field_uiowa_slider_slides']['add_more']);
        }
        $number_of_slides = count($block_form['field_uiowa_slider_slides']);
        if ($number_of_slides > 4) {
          $form_state->setError($form, t('Reached maximum number of allowed slides.'));
        }
        break;

      case 'menu_block:main':
        // If follow is checked...
        if ((int) $form_state->getValue(['settings', 'follow']) === 1) {
          // Set parent to default.
          $form_state->setValue(['settings', 'parent'], 'main:');
          // Set level = 2.
          $form_state->setValue(['settings', 'level'], 1);
        }
        break;
    }
  }
}

/**
 * Custom submit handler for layout_builder_add/update_block form.
 *
 * @param array $form
 *   The form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _layout_builder_custom_block_submit(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ConfigureBlockFormBase) {
    /** @var \Drupal\layout_builder\SectionComponent $component */
    $component = $form_object->getCurrentComponent();
    $block = $component->getPlugin();

    // Save the third-party value if set, otherwise unset it.
    if ($unique_id = $form_state->getValue([
      'unique_id_wrapper',
      'unique_id',
    ])) {
      $component->setThirdPartySetting('layout_builder_custom', 'unique_id', $unique_id);
    }
    else {
      $component->unsetThirdPartySetting('layout_builder_custom', 'unique_id');
    }

    switch ($block->getPluginId()) {
      case 'inline_block:uiowa_banner':
        $background_option = $form_state->getValue([
          'settings',
          'block_form',
          'background_options',
        ]);
        if ($background_option) {
          $form_media_selection = [
            'settings',
            'block_form',
            'field_uiowa_banner_image',
            'selection',
          ];
          if ($background_option === 'image') {
            if (!$form_state->getValue($form_media_selection)) {
              // If an image wasn't uploaded, revert to default of 'black'.
              // @todo Add feedback for user that they didn't upload an image.
              // @todo Add validation to check whether image uploaded or not. See
              //   https://github.com/uiowa/uiowa/issues/5012
              $background_option = 'block_background_style_black';
            }

          }
          else {
            // If a non-image background was selected, remove the reference.
            // @todo Trigger file deletion if the media item is unused elsewhere. See
            //   https://github.com/uiowa/uiowa/issues/5013
            $form_state->unsetValue($form_media_selection);
          }
          // Set layout_builder_style_background to
          // value of our duplicate select.
          $form_state->setValue('layout_builder_style_background', $background_option);
        }
        break;

      case 'inline_block:uiowa_aggregator':
      case 'inline_block:uiowa_card':
      case 'inline_block:uiowa_events':
      case 'views_block:article_list_block-list_article':
      case 'views_block:events_list_block-card_list':
      case 'views_block:people_list_block-list_card':
        $media_position = $form_state->getValue('layout_builder_style_card_media_position');
        $media_format = $form_state->getValue('layout_builder_style_media_format');

        if ($media_position === 'card_media_position_stacked') {
          if (in_array($media_format, [
            'media_format_widescreen',
            'media_format_square',
          ])) {
            $form_state->setValue('layout_builder_style_card_image_size', 'card_image_large');
            // @todo Should we set a message here to let the user
            //   know the image size was changed? See
            //   https://github.com/uiowa/uiowa/issues/5036
          }
        }

        if ($block->getPluginId() === 'inline_block:uiowa_card') {
          // Make sure button display field is checked
          // if the link title field is filled in.
          $link_title = $form_state->getValue(
            [
              'settings',
              'block_form',
              'field_uiowa_card_link',
            ]
          )[0]['title'];
          if ($link_title) {
            $form_state->setValue(
              [
                'settings',
                'block_form',
                'field_uiowa_card_button_display',
              ], ['value' => 1]
            );
          };
        }
        break;

      case 'inline_block:uiowa_collection':
        // Move the view mode value back out of the block form.
        $view_mode = $form_state->getValue(
          [
            'settings',
            'block_form',
            'view_mode',
          ]
        );
        $form_state->setValue(
          [
            'settings',
            'view_mode',
          ],
          $view_mode
        );
        break;

    }
  }
}

/**
 * Custom process block form elements.
 *
 * @param array $element
 *   The current block element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 *
 * @return array
 *   The processed block element.
 */
function _layout_builder_custom_process_element(array $element, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ConfigureBlockFormBase) {
    /** @var \Drupal\layout_builder\SectionComponent $component */
    $component = $form_object->getCurrentComponent();
    $block = $component
      ->getPlugin();

    switch ($block->getPluginId()) {
      case 'inline_block:uiowa_text_area':
        if (isset($element['field_uiowa_headline'])) {
          // Unset the unnecessary 'child_heading_size' field option.
          unset($element['field_uiowa_headline']['widget'][0]['container']['child_heading_size']);
          // Update the help text.
          $element['field_uiowa_headline']['widget'][0]['container']['heading_size']['#description'] =
            t('The heading size for the block title.');
          // Add in the 'h6' option.
          $element['field_uiowa_headline']['widget'][0]['container']['heading_size']['#options']['h6'] = 'Heading 6';
        }
        break;

      case 'inline_block:uiowa_banner':
        if (isset($element['field_uiowa_banner_title'])) {
          // Update the label for the Heading sizes to remove Size label.
          $element['field_uiowa_banner_title']['widget'][0]['container']['size']['#title'] =
            t('Heading');
        }
        // @todo Should this be scoped to a condition checking if layout_builder_styles is enabled? See
        //   https://github.com/uiowa/uiowa/issues/5038
        $all_styles = _layout_builder_styles_retrieve_by_type(LayoutBuilderStyleInterface::TYPE_COMPONENT);

        // @phpstan-ignore-next-line
        $selectedStyles = $component->get('layout_builder_styles_style');

        $style_options = ['image' => 'Image or Video'];
        foreach ($all_styles as $style) {
          if ($style->getGroup() === 'background') {
            $restrictions = $style->getBlockRestrictions();
            /** @var \Drupal\layout_builder_styles\LayoutBuilderStyleInterface $style */
            if (empty($restrictions) || in_array('inline_block:uiowa_banner', $restrictions)) {
              $style_options[$style->id()] = $style->label();
            }
          }
        }

        $default_bg = 'image';

        if (is_array($selectedStyles)) {
          foreach ($selectedStyles as $selectedStyle) {
            if (array_key_exists($selectedStyle, $style_options)) {
              $default_bg = $selectedStyle;
            }
          }
        }

        $element['background_options'] = [
          '#type' => 'select',
          '#title' => t('Background'),
          '#options' => $style_options,
          '#default_value' => $default_bg,
          '#weight' => 4,
        ];

        $element['field_uiowa_banner_image'] = [
          '#states' => [
            'visible' => [
              ':input[name="settings[block_form][background_options]"]' => [
                'value' => 'image',
              ],
            ],
              // @todo Conditionally require media field when 'background_options'
              //   is set to 'image'. See
              //   https://github.com/uiowa/uiowa/issues/5039
          ],
          '#weight' => 5,
        ] + $element['field_uiowa_banner_image'];

        $element['field_uiowa_banner_autoplay'] = [
          '#attributes' => [
            'class' => [
              'js-hide',
            ],
            'tabindex' => [
              '-1',
            ],
            'aria-hidden' => [
              'true',
            ],
          ],
          '#weight' => 6,
        ] + $element['field_uiowa_banner_autoplay'];

        unset($element['field_uiowa_banner_image']['widget']['#title']);
        unset($element['field_uiowa_banner_autoplay']['widget']['#title']);

        // Check the max_delta to see how many banner links have been added
        // and unset the add more button if we've reached the third link.
        if (isset($element['field_uiowa_banner_link']) &&
          $element['field_uiowa_banner_link']['widget']['#max_delta'] >= 2) {
          unset($element['field_uiowa_banner_link']['widget']['add_more']);
          // If we're editing a banner with 3 existing links
          // we also need to unset the fourth pre-added link field.
          if (isset($element['field_uiowa_banner_link']['widget'][3])) {
            unset($element['field_uiowa_banner_link']['widget'][3]);
          }
        }

        break;

      case 'inline_block:uiowa_button':
        if (isset($element['field_uiowa_button_link'])) {
          $element['field_uiowa_button_link']['widget'][0]['title']['#maxlength'] = 25;
          if (isset($element['field_uiowa_button_link']['widget'][1])) {
            $element['field_uiowa_button_link']['widget'][1]['title']['#maxlength'] = 25;
          }
          if (isset($element['field_uiowa_button_link']['widget'][2])) {
            $element['field_uiowa_button_link']['widget'][2]['title']['#maxlength'] = 25;
          }
        }

        // Check the max_delta to see how many button links have been added
        // and unset the add more button if we've reached the third link.
        if (isset($element['field_uiowa_button_link']) &&
        $element['field_uiowa_button_link']['widget']['#max_delta'] >= 2) {
          unset($element['field_uiowa_button_link']['widget']['add_more']);
          // If we're editing a button with 3 existing links
          // we also need to unset the fourth pre-added link field.
          if (isset($element['field_uiowa_button_link']['widget'][3])) {
            unset($element['field_uiowa_button_link']['widget'][3]);
          }
        }
        break;

      case 'inline_block:uiowa_card':
        if (isset($element['field_uiowa_card_button_display'])) {
          $element['field_uiowa_card_button_display']['widget']['#options']['_none'] = 'Use site default';
          $element['field_uiowa_card_button_display']['widget']['#description'] .= t('&nbsp;If "Use site default" is selected, this setting can be changed on the <a href="@settings_url">SiteNow Pages settings</a>.', [
            '@settings_url' => Url::fromRoute("sitenow_pages.settings_form")
              ->toString(),
          ]);
          $element['field_uiowa_card_button_display']['#states'] = [
            'visible' => [
              ':input[name="settings[block_form][field_uiowa_card_link][0][uri]"]' => [
                'filled' => TRUE,
              ],
              ':input[name="settings[block_form][field_uiowa_card_link][0][title]"]' => [
                'filled' => FALSE,
              ],
            ],
          ];
        }
        break;

      case 'inline_block:uiowa_events':
        if (isset($element['field_uiowa_events_date_range'])) {
          // Set a date picker limit to our UNIX min/max.
          $element['field_uiowa_events_date_range']['widget'][0]['time_wrapper']['value']['#date_year_range'] = '1970:2037';
          $element['field_uiowa_events_date_range']['widget'][0]['time_wrapper']['end_value']['#date_year_range'] = '1970:2037';

          // Show date range field when timeframe is set to date_range.
          $element['field_uiowa_events_date_range']['#states'] = [
            'visible' => [
              ':input[name="settings[block_form][field_uiowa_events_timeframe]"]' => [
                'value' => 'date_range',
              ],
            ],
          ];
        }
        if (isset($element['field_collection_more_path'])) {
          $element['field_collection_more_path']['#states'] = [
            'visible' => [
              ':input[name="settings[block_form][field_collection_more][value]"]' => [
                'checked' => TRUE,
              ],
            ],
          ];
        }
        break;

      case 'inline_block:uiowa_image_gallery':
        if (isset($element['field_uiowa_headline'])) {
          // Unset the unnecessary 'child_heading_size' field option.
          unset($element['field_uiowa_headline']['widget'][0]['container']['child_heading_size']);
          // Update the help text.
          $element['field_uiowa_headline']['widget'][0]['container']['heading_size']['#description'] =
            t('The heading size for the block title.');
          // Add in the 'h6' option.
          $element['field_uiowa_headline']['widget'][0]['container']['heading_size']['#options']['h6'] = 'Heading 6';
        }
        break;

      case 'inline_block:uiowa_collection':
        if (isset($element['field_uiowa_headline'])) {
          // Update the help text.
          $element['field_uiowa_headline']['widget'][0]['container']['heading_size']['#description'] =
            t('The heading size for the block title. Accordion item headings will be set one heading level lower. Does not apply to descriptive list.');
          $element['field_uiowa_headline']['widget'][0]['container']['child_heading_size']['#description'] =
            t('The heading size for all accordion headings. Does not apply to descriptive list.');
        }

        // Default to multiselect and remove the empty option.
        $element["field_accordion_type"]["widget"]["#default_value"] = $element["field_accordion_type"]["widget"]["#default_value"] ?? 'multi_select';
        unset($element["field_accordion_type"]["widget"]["#options"]["_none"]);
        // Only show the "accordion type" field if accordion view mode
        // has been selected.
        $element['field_accordion_type']['widget']['#states'] = [
          'visible' => [
            ':input[name="settings[block_form][view_mode]"]' => [
              'value' => 'accordion',
            ],
          ],
        ];

        // Now that we have view mode on the block form, place the fields
        // in the right order.
        $element['view_mode']['#weight'] = 2;
        $element['field_accordion_type']['#weight'] = 3;
        $element['field_uiowa_collection_items']['#weight'] = 4;

        break;

      case 'inline_block:uiowa_cta':
        // Set the default text format to plain if the block is new.
        // We look at the #default_value in the widget, as it is empty
        // unless we're editing a block with existing content.
        if (isset($element['field_uiowa_cta_summary']) && empty($element['field_uiowa_cta_summary']['widget'][0]['#default_value'])) {
          $element['field_uiowa_cta_summary']['widget'][0]['#format'] = 'plain_text';
        }
        break;

      case 'inline_block:uiowa_event':
        /** @var Drupal\uiowa_core\Access\UiowaCoreAccess $check */
        $check = \Drupal::service('uiowa_core.access_checker');

        /** @var Drupal\Core\Access\AccessResultInterface $access */
        $access = $check->access(\Drupal::currentUser()->getAccount());

        if ($access->isForbidden()) {
          $element['field_uiowa_event_icon']['widget'][0]['settings']['style']['#disabled'] = TRUE;
          $element['field_uiowa_event_icon']['widget'][0]['settings']['size']['#disabled'] = TRUE;
          $element['field_uiowa_event_icon']['widget'][0]['settings']['fixed-width']['#disabled'] = TRUE;
          $element['field_uiowa_event_icon']['widget'][0]['settings']['border']['#disabled'] = TRUE;
          $element['field_uiowa_event_icon']['widget'][0]['settings']['invert']['#disabled'] = TRUE;
          $element['field_uiowa_event_icon']['widget'][0]['settings']['animation']['#disabled'] = TRUE;
          $element['field_uiowa_event_icon']['widget'][0]['settings']['additional_classes']['#disabled'] = TRUE;
          $element['field_uiowa_event_icon']['widget'][0]['settings']['duotone']['#disabled'] = TRUE;
          $element['field_uiowa_event_icon']['widget'][0]['settings']['masking']['#disabled'] = TRUE;
          $element['field_uiowa_event_icon']['widget'][0]['settings']['power_transforms']['#disabled'] = TRUE;
          $element['field_uiowa_event_icon']['widget'][0]['settings']['pull']['#disabled'] = TRUE;
        }
        break;

    }
  }
  return $element;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function layout_builder_custom_field_widget_paragraphs_form_alter(array &$element, FormStateInterface &$form_state, array $context) {
  if (isset($element['#paragraph_type'])) {
    switch ($element['#paragraph_type']) {

      case 'uiowa_collection_item':
      case 'uiowa_slide':
        // If it exists, pop the headline and place it in the label.
        if (!empty($element['top']['summary']['fields_info']['#summary']['content'])) {
          $headline = array_shift($element['top']['summary']['fields_info']['#summary']['content']);
          $element['top']['type']['label']['#markup'] = $headline;
        }
        break;

      case 'uiowa_timeline_item':
        /** @var Drupal\uiowa_core\Access\UiowaCoreAccess $check */
        $check = \Drupal::service('uiowa_core.access_checker');

        /** @var Drupal\Core\Access\AccessResultInterface $access */
        $access = $check->access(\Drupal::currentUser()->getAccount());

        if ($access->isForbidden()) {
          $element["subform"]["field_timeline_icon"]["widget"][0]["settings"]["style"]['#disabled'] = TRUE;
          $element["subform"]["field_timeline_icon"]["widget"][0]["settings"]["size"]['#disabled'] = TRUE;
          $element["subform"]["field_timeline_icon"]["widget"][0]["settings"]["fixed-width"]['#disabled'] = TRUE;
          $element["subform"]["field_timeline_icon"]["widget"][0]["settings"]["border"]['#disabled'] = TRUE;
          $element["subform"]["field_timeline_icon"]["widget"][0]["settings"]["invert"]['#disabled'] = TRUE;
          $element["subform"]["field_timeline_icon"]["widget"][0]["settings"]["animation"]['#disabled'] = TRUE;
          $element["subform"]["field_timeline_icon"]["widget"][0]["settings"]["additional_classes"]['#disabled'] = TRUE;
          $element["subform"]["field_timeline_icon"]["widget"][0]["settings"]["duotone"]['#disabled'] = TRUE;
          $element["subform"]["field_timeline_icon"]["widget"][0]["settings"]["masking"]['#disabled'] = TRUE;
          $element["subform"]["field_timeline_icon"]["widget"][0]["settings"]["power_transforms"]['#disabled'] = TRUE;
          $element["subform"]["field_timeline_icon"]["widget"][0]["settings"]["pull"]['#disabled'] = TRUE;
        }

        break;
    }
  }
}

/**
 * Implements hook_theme().
 *
 * @todo Test to see if this is needed anymore. See
 * https://github.com/uiowa/uiowa/issues/5040
 */
function layout_builder_custom_theme($existing, $type, $theme, $path) {
  $theme = [
    'uiowa_headline_widget' => [
      'variables' => [
        'headline' => NULL,
        'heading_size' => NULL,
        'hide_headline' => NULL,
        'headline_alignment' => NULL,
        'child_heading_size' => NULL,
      ],
    ],
  ];
  return $theme;
}

/**
 * Add an element to delineate the layout builder styles form section.
 *
 * The weights are important here. The layout_builder_custom module weighs all
 * fields at 90. We weigh single-select fields at 89 when configuring a section.
 *
 * @see: layout_builder_custom_form_alter().
 */
function _layout_builder_custom_add_lbs_heading(&$form) {
  $children = Element::children($form);

  $styles = array_filter($children, function ($v) {
    return (strpos($v, 'layout_builder_style_') === 0);
  });

  if (!empty($styles)) {
    $form['lbs_heading'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'layout-builder-style-heading',
        ],
      ],
      'markup' => [
        '#prefix' => '<span>',
        '#markup' => t('Display options'),
        '#suffix' => '</span>',
      ],
      '#weight' => 80,
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function layout_builder_custom_preprocess_block(&$variables) {
  // Unset grid_columns classes if display as list.
  if (isset($variables['elements']['#attributes']['class'])) {
    if (is_string($variables['elements']['#attributes']['class'])) {
      $variables['elements']['#attributes']['class'] = explode(' ', $variables['elements']['#attributes']['class']);
    }
    $is_list = array_search('inner--list', $variables['elements']['#attributes']['class']);
    if ($is_list) {
      foreach ($variables['elements']['#attributes']['class'] as $key => $style) {
        if (str_starts_with($style, 'grid--')) {
          unset($variables['elements']['#attributes']['class'][$key]);
        }
      }
    }
  }

  switch ($variables['elements']['#plugin_id']) {
    case 'inline_block:featured_content':
      // Take control of the referenced entity renders to pass in heading size.
      unset($variables['content']['field_featured_content_item']);
      $variables['content']['referenced_items'] = [];

      /** @var \Drupal\block_content\Entity\BlockContent $block */
      $block = $variables['content']['#block_content'];

      // This is a single value field.
      $headline_field = $block->get('field_uiowa_headline')->getValue()[0];

      if (empty($headline_field['headline'])) {
        $heading_size = $headline_field['child_heading_size'];
      }
      else {
        $heading_size = HeadlineHelper::getHeadingSizeUp($headline_field['heading_size']);
      }

      foreach ($block->get('field_featured_content_item') as $item) {
        $target = $item->getProperties(TRUE)['entity']->getTarget();
        if ($target) {
          $entity = $target->getEntity();

          // Associate the block's cache tags with each entity so that the
          // appropriate render cache ID is cleared when the block changes.
          $cache_tags = $block->getCacheTags();
          $entity->addCacheTags($cache_tags);
          // Grab a fresh copy of the node.
          $id = $entity->id();
          Cache::invalidateTags(['node:' . $id]);

          // Construct the entity teaser markup manually to pass in the heading
          // size variable for the template and append it to the block content.
          $build = \Drupal::entityTypeManager()->getViewBuilder($entity->getEntityTypeId())->view($entity, 'teaser');
          $build['#heading_size'] = $heading_size;
          $render = \Drupal::service('renderer')->render($build);

          $variables['content']['referenced_items'][] = [
            '#markup' => $render,
          ];
        }
      }

      break;

    case 'inline_block:uiowa_banner':
      $block = $variables['elements']['content']['#block_content'];
      // Media entity template needs to change based on this block,
      // so invalidate cache.
      if ($block->hasField('field_uiowa_banner_image') && !$block->get('field_uiowa_banner_image')->isEmpty()) {
        $id = $block->get('field_uiowa_banner_image')->target_id;
        Cache::invalidateTags(['media:' . $id]);
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function layout_builder_custom_preprocess_media(&$variables) {
  $media = $variables['elements']['#media'];
  switch ($media->bundle()) {
    case 'image':
      $referring_item = $media->_referringItem;
      // So far, only way to get media viewmode switching lb
      // block > view > node > media deep.
      if ($referring_item) {
        /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $referring_field */
        $referring_field = $referring_item->getParent();
        if ($referring_field) {
          $parent_entity = $referring_field->getParent();
          $parent_entity = $parent_entity->getEntity();
          // If view is attached to parent entity.
          if (isset($parent_entity->view)) {
            $view = $parent_entity->view;
            // If row_styles were attached to the view.
            if ($view->display_handler->getOption('row_styles')) {
              $row_styles = $view->display_handler->getOption('row_styles');
              $media_formats = [
                'media_format_widescreen' => 'large__widescreen',
                'media_format_square' => 'large__square',
                'media_format_circle' => 'large__square',
              ];
              // Change view_mode based on lb_styles.
              foreach ($media_formats as $style => $view_mode) {
                if (in_array($style, $row_styles)) {
                  $variables['content']['field_media_image'][0]['#responsive_image_style_id'] = $view_mode;
                  // Prevents sticky cached images.
                  $variables['content']['field_media_image'][0]['#cache']['max-age'] = 0;
                }
              }
            }
          }
        }
      }
      break;

    case 'remote_video':
    case 'video':
      $variables['attributes']['class'][] = 'media--video';
      break;
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function layout_builder_custom_preprocess_views_view_unformatted(&$variables) {
  // @todo Figure out how to appropriately scope this. See
  //   https://github.com/uiowa/uiowa/issues/5041
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  $variables['row_item_classes'] = [];

  $row_styles = $view->display_handler->getOption('row_styles');
  if (isset($row_styles) && !empty($variables['rows'])) {

    // Convert single selection to an array for consistent processing.
    if (!is_array($row_styles)) {
      $row_styles = [$row_styles];
    }
    // @todo remove card--person-teaser when v2 is no longer in use.
    //   See https://github.com/uiowa/uiowa/issues/4948
    $default_classes = [
      'card--list',
      'card--person-teaser',
      'card--centered-right',
      'card--alignment-right',
    ];

    // Retrieve all styles from selection(s).
    $item_classes = [
      'card_media_position' => 'card--media-right',
    ];

    foreach ($row_styles as $style_id) {
      // Account for incorrectly configured component configuration which may
      // have a NULL style ID. We cannot pass NULL to the storage handler or
      // it will throw an exception.
      if (empty($style_id)) {
        continue;
      }
      /** @var \Drupal\layout_builder_styles\LayoutBuilderStyleInterface $style */
      $style = \Drupal::entityTypeManager()->getStorage('layout_builder_style')->load($style_id);
      if ($style) {
        // @todo Check if the style group matches a class that is used for
        //   the media element and put it in a separate array. See
        //   https://github.com/uiowa/uiowa/issues/5042
        $classes = \preg_split('(\r\n|\r|\n)', $style->getClasses());
        $item_classes[$style->getGroup()] = implode(' ', $classes);
        $variables['#cache']['tags'][] = 'config:layout_builder_styles.style.' . $style->id();
      }
    }
    // @todo Add media element classes to a separate variable. See
    //   https://github.com/uiowa/uiowa/issues/5043
    $variables['row_item_classes'] = array_merge($default_classes, array_values($item_classes));
  }

  $machine_name = $view->getDisplay()->display['id'];

  // @todo Change this to just match 'card_list' once there is an update hook
  //   to transition existing block instances to new machine name. See
  //   https://github.com/uiowa/uiowa/issues/5044
  if (in_array($machine_name, [
    'card_list',
    'list_article',
    // 'list_card',
  ])) {
    $rows = $variables['rows'];
    $style = $view->style_plugin;
    $style_classes = [];
    $size_classes = [];

    if (isset($variables['row_item_classes'])) {

      foreach ($variables['row_item_classes'] as $key => &$class) {

        if (str_starts_with($class, 'media--')) {
          $style_classes[] = $class;
          unset($variables['row_item_classes'][$key]);
        }
        elseif (str_starts_with($class, 'card__media')) {
          $size_classes[] = $class;
          unset($variables['row_item_classes'][$key]);
        }
        elseif (str_starts_with($class, 'inner')) {
          unset($variables['row_item_classes'][$key]);
        }
        elseif (str_starts_with($class, 'grid')) {
          unset($variables['row_item_classes'][$key]);
        }
      }
    }
    foreach ($rows as $id => $row) {
      // Set remaining row_item_classes as attributes on each row.
      if (isset($variables['row_item_classes'])) {
        $variables['rows'][$id]['attributes']->addClass($variables['row_item_classes']);
      }

      // Initialize card_options variable.
      $variables['rows'][$id]['card_options'] = [
        'attributes' => $variables['rows'][$id]['attributes'],
        'media_styles' => $style_classes,
        'media_sizes' => $size_classes,
        'card_title' => $style->getField($id, 'title'),
        'card_link_url' => '',
        'card_image' => $style->getField($id, 'field_image'),
        'card_text' => $style->getField($id, 'field_teaser'),
        'card_subtitle' => '',
        'card_tag' => '',
        'card_date' => '',
        'headline_level' => $view->display_handler->getOption('heading_size'),
      ];
    }
  }
}

/**
 * Implements hook_views_plugins_display_alter().
 */
function layout_builder_custom_views_plugins_display_alter(&$displays) {
  $moduleHandler = \Drupal::service('module_handler');

  $is_v2 = \Drupal::config('config_split.config_split.sitenow_v2')->get('status');

  // Only proceed if this is a V3 site or sitenow_p2lb is enabled.
  // @todo Remove check and always set after v2 is removed.
  //   See https://github.com/uiowa/uiowa/issues/4948
  if ($is_v2 === FALSE || $moduleHandler->moduleExists('sitenow_p2lb')) {
    // Swap the block class if it can be swapped.
    if (!empty($displays['block']['class']) && $displays['block']['class'] === Block::class) {
      $displays['block']['class'] = ListBlock::class;
    }
  }
}

/**
 * Implements hook_views_pre_build().
 */
function layout_builder_custom_views_pre_build(ViewExecutable $view) {
  // Dynamically set pager id using cache.
  // Temp workaround until https://www.drupal.org/project/drupal/issues/3225987.
  // @todo Allow view config to override this (non-zero pager id?).
  //   https://github.com/uiowa/uiowa/issues/5045
  $pager = $view->display_handler->getOption('pager');
  if (isset($pager) && $pager['type'] === 'full') {
    if ($cached = \Drupal::cache('layout_builder_custom_views_pager_elements')->get($view->dom_id)) {
      $pager['options']['id'] = $cached->data;
    }
    else {
      $pager_manager = \Drupal::service('pager.manager');
      \Drupal::cache('layout_builder_custom_views_pager_elements')->set($view->dom_id, $pager_manager->getMaxPagerElementId() + 1, Cache::PERMANENT);
      $cached = \Drupal::cache('layout_builder_custom_views_pager_elements')->get($view->dom_id);
      $pager['options']['id'] = $cached->data;
    }
    $view->display_handler->setOption('pager', $pager);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function layout_builder_custom_views_pre_render(ViewExecutable $view) {
  // Hotfix shim to not display exposed blocks, necessary because
  // of the hotfix above.
  // @todo Remove this exception when these view displays are removed. See
  //   https://github.com/uiowa/uiowa/issues/5047
  $display = $view->getDisplay();
  $exceptions = [
    'block_people_slf',
    'block_people_sfl',
    'block_articles',
  ];
  if (!in_array($display->display['id'], $exceptions) && $view->display_handler instanceof ListBlock) {
    $view->exposed_raw_input = [];
  }
}

/**
 * Ajax callback for unique_id field.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return mixed
 *   The form element.
 */
function _layout_builder_custom_unique_id(array &$form, FormStateInterface $form_state) {
  $unique_id = Html::cleanCssIdentifier($form_state->getValue([
    'unique_id_wrapper',
    'unique_id',
  ]));

  $form['unique_id_wrapper']['unique_id']['#value'] = $unique_id;
  return $form['unique_id_wrapper'];
}
