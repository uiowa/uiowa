<?php

/**
 * @file
 * Contains lb_enhancements.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\layout_builder_custom\LayoutBuilderPreRender;
use Drupal\layout_builder_custom\Plugin\Display\ListBlock;
use Drupal\layout_builder_styles\LayoutBuilderStyleGroups;
use Drupal\layout_builder_styles\LayoutBuilderStyleInterface;
use Drupal\views\Plugin\views\display\Block;

/**
 * Implements hook_element_info_alter().
 */
function layout_builder_custom_element_info_alter(array &$types) {
  $types['layout_builder']['#pre_render'][] = LayoutBuilderPreRender::class . '::preRender';
}

/**
 * Implements hook_form_alter().
 */
function layout_builder_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'layout_builder_add_block':
    case 'layout_builder_update_block':
      // Add custom validation for certain blocks/regions to validate.
      $form['#validate'][] = '_layout_builder_custom_block_validate';

      // Our submit handler must execute before the layout_builder_styles one
      // so it can take advantage of the logic there.
      array_unshift($form['#submit'], '_layout_builder_custom_block_submit');

      // Add custom process callback for certain blocks to alter form elements.
      $form['settings']['block_form']['#process'][] = '_layout_builder_custom_process_element';

      // Add our LBS heading before style options.
      _layout_builder_custom_add_lbs_heading($form);

      // @todo Write a patch for layout_builder_styles that adds these options.
      // An array of options for altering Layout Builder Styles behavior.
      $lbs_extra_options = [
        'background' => [
          'single' => TRUE,
        ],
        'banner_gradient' => [
          'single' => TRUE,
          'remove_none' => TRUE,
          'default' => 'banner_gradient_dark',
        ],
        'banner_height' => [
          'single' => TRUE,
          'remove_none' => TRUE,
          'default' => 'banner_medium',
        ],
        'banner_type' => [
          'single' => TRUE,
          'remove_none' => TRUE,
          'default' => 'banner_centered_left',
        ],
        'card_image_size' => [
          'single' => TRUE,
          'remove_none' => TRUE,
          'default' => 'card_image_large',
        ],
        'card_media_position' => [
          'single' => TRUE,
          'remove_none' => TRUE,
          'default' => 'card_media_position_stacked',
        ],
        'content_alignment' => [
          'single' => TRUE,
          'remove_none' => TRUE,
          'default' => 'content_alignment_left',
        ],
        'grid_columns' => [
          'single' => TRUE,
          'remove_none' => TRUE,
          'default' => 'block_grid_threecol_33_34_33',
        ],
        'headline_type' => [
          'single' => TRUE,
          'remove_none' => TRUE,
          'default' => 'headline_bold_serif',
        ],
        'list_format' => [
          'single' => TRUE,
          'remove_none' => TRUE,
          'default' => 'list_format_list',
        ],
        'media_format' => [
          'single' => TRUE,
          'remove_none' => TRUE,
          'default' => 'media_format_widescreen',
        ],
      ];

      $groups = LayoutBuilderStyleGroups::getGroups();

      // Loop through layout builder style groups.
      foreach (array_keys($groups) as $group) {

        // Check if we have extra options defined.
        if (isset($lbs_extra_options[$group])) {
          // The key that is used in the form array.
          $group_key = 'layout_builder_style_' . $group;

          // Check if the style group is set in the form.
          if (isset($form[$group_key])) {

            // Check if the style group should be limited to a
            // single selection.
            if (isset($lbs_extra_options[$group]['single']) && $lbs_extra_options[$group]['single']) {
              // Make the background option single select only.
              $form[$group_key]['#multiple'] = FALSE;
            }

            // Check if the style group should have the '-None-'
            // option removed.
            if (isset($lbs_extra_options[$group]['remove_none']) && $lbs_extra_options[$group]['remove_none']) {
              // Make the option required.
              unset($form[$group_key]['#empty_option']);
            }

            if ($form_id === 'layout_builder_add_block') {
              // Set default for this group if it exists.
              if (isset($lbs_extra_options[$group]['default'])) {
                $form[$group_key]['#default_value'] = [$lbs_extra_options[$group]['default']];
              }
            }
          }
        }
      }

      // Always set title field to not be required.
      $form['settings']['label']['#required'] = FALSE;

      // Hide all block labels.
      unset($form['settings']['label']);
      unset($form['settings']['label_display']);
      unset($form['settings']['admin_label']['#title']);
      // Hide ones implemented by Views because ListBlock has headline.
      // @todo Investigate whether this can be added to ListBlock.
      unset($form['settings']['views_label_fieldset']);
      unset($form['settings']['views_label_checkbox']);
      unset($form['settings']['views_label']);

      // Set '#states' for block grid columns.
      $form['layout_builder_style_grid_columns']['#states'] = [
        'visible' => [
          // Always show when list format is grid.
          [
            ':input[name="layout_builder_style_list_format"]' => [
              'value' => 'list_format_grid',
            ],
          ],
        ],
      ];

      /** @var \Drupal\layout_builder\SectionComponent $component */
      $component = $form_state->getFormObject()->getCurrentComponent();
      $block = $component->getPlugin();

      // Form modifications per block plugin and bundle.
      switch ($block->getPluginId()) {
        case 'inline_block:uiowa_banner':
          // We provide a field that provides background options, so
          // this is hidden.
          if (isset($form['layout_builder_style_background'])) {
            $form['layout_builder_style_background']['#access'] = FALSE;
          }

          $form['#attached']['library'][] = 'layout_builder_custom/banner-block-form';
          break;

        case 'inline_block:uiowa_aggregator':
        case 'inline_block:uiowa_card':
        case 'inline_block:uiowa_events':
          // Set '#states' for card image size.
          $form['layout_builder_style_card_image_size']['#states'] = [
            'visible' => [
              // Always show when media format is set to 'circle'.
              [
                ':input[name="layout_builder_style_media_format"]' => [
                  'value' => 'media_format_circle',
                ],
              ],
              // Always show when card media position is not 'stacked'.
              [
                ':input[name="layout_builder_style_card_media_position"]' => [
                  '!value' => 'card_media_position_stacked',
                ],
              ],
            ],
          ];

          // Label the white background option as the default.
          $form['layout_builder_style_background']['#options']['block_background_style_light'] = 'White (default)';

          if ($block->getPluginId() == 'inline_block:uiowa_events') {
            $form['layout_builder_style_card_media_position']['#options']['card_media_position_left'] = 'Left (default)';
            $form['layout_builder_style_card_media_position']['#options']['card_media_position_stacked'] = 'Stacked';
            $form['layout_builder_style_media_format']['#options']['media_format_circle'] = 'Circle (default)';
            $form['layout_builder_style_card_image_size']['#options']['card_image_small'] = 'Small (default)';
          }
          if ($block->getPluginId() == 'inline_block:uiowa_aggregator') {
            $form['layout_builder_style_card_media_position']['#options']['card_media_position_right'] = 'Right (default)';
            $form['layout_builder_style_card_media_position']['#options']['card_media_position_stacked'] = 'Stacked';
            $form['layout_builder_style_card_image_size']['#options']['card_image_small'] = 'Small (default)';
            $form['layout_builder_style_media_format']['#options']['media_format_widescreen'] = 'Widescreen (16:9) (default)';
          }

          // If the block is new, set its default background
          // to white instead of none.
          if ($form_id === 'layout_builder_add_block') {
            $form['layout_builder_style_background']['#default_value'] = 'block_background_style_light';

            if ($block->getPluginId() == 'inline_block:uiowa_events') {
              $form['layout_builder_style_card_media_position']['#default_value'] = 'card_media_position_left';
              $form['layout_builder_style_media_format']['#default_value'] = 'media_format_circle';
              $form['layout_builder_style_card_image_size']['#default_value'] = 'card_image_small';
              $form['layout_builder_style_content_alignment']['#default_value'] = 'content_alignment_left';
            }
            if ($block->getPluginId() == 'inline_block:uiowa_aggregator') {
              $form['layout_builder_style_card_media_position']['#default_value'] = 'card_media_position_right';
              $form['layout_builder_style_media_format']['#default_value'] = 'media_format_widescreen';
              $form['layout_builder_style_card_image_size']['#default_value'] = 'card_image_small';
              $form['layout_builder_style_content_alignment']['#default_value'] = 'content_alignment_left';
            }

            if (isset($form['layout_builder_style_list_format'])) {
              $form['layout_builder_style_list_format']['#default_value'] = 'list_format_list';
            }
            if (isset($form['layout_builder_style_grid_columns'])) {
              $form['layout_builder_style_grid_columns']['#default_value'] = 'block_grid_threecol_33_34_33';
            }
          }
          break;

        case 'inline_block:uiowa_collection':
          $form['settings']['view_mode']['#type'] = 'radios';

          // We need to have a specified view mode,
          // so we remove the undefined 'default' option.
          array_shift($form['settings']['view_mode']['#options']);

          // @todo Re-enable 'tab' after theming/functionality is in place.
          unset($form['settings']['view_mode']['#options']['tab']);

          $view_options = [
            'accordion',
            'descriptive_list',
            'tab',
          ];

          // If view mode not in our options (eg 'full'), set it to <dl>.
          if (!in_array($form['settings']['view_mode']['#default_value'], $view_options)) {
            $form['settings']['view_mode']['#default_value'] = 'descriptive_list';
          }

          // Move view mode to the block form.
          $form["settings"]["block_form"]["view_mode"] = $form['settings']['view_mode'];
          $form['settings']['view_mode']['#access'] = FALSE;
          break;

        case 'menu_block:main':
          /** @var Drupal\uiowa_core\Access\UiowaCoreAccess $check */
          $check = \Drupal::service('uiowa_core.access_checker');

          /** @var Drupal\Core\Access\AccessResultInterface $is_admin */
          $access = $check->access(\Drupal::currentUser()->getAccount());

          if ($access->isForbidden()) {
            // Restrict block settings on main navigation block.
            $form['settings']['menu_levels']['#access'] = FALSE;
            $form['settings']['advanced']['#access'] = FALSE;
            $form['settings']['style']['#access'] = FALSE;
          }

          // Set defaults.
          $form['settings']['menu_levels']['level']['#default_value'] = 2;
          $form['settings']['advanced']['follow']['#default_value'] = 1;
          break;
      }

      $form['settings'] += [
        '#weight' => 0,
      ];

      break;

    case 'layout_builder_configure_section':
      // Add our LBS heading before style options.
      _layout_builder_custom_add_lbs_heading($form);

      $single_select_groups = [
        'layout_builder_style_background',
        'layout_builder_style_container',
      ];

      foreach ($single_select_groups as $group) {
        if (isset($form[$group])) {
          // Disable multiple selection and weight before LBS elements so focus
          // on a Chosen-enabled select does not obscure other form elements.
          $form[$group]['#multiple'] = FALSE;
          $form[$group]['#weight'] = 89;
        }
      }

      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the configuration form for layout builder sections (layouts).
 */
function layout_builder_custom_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state, $form_id) {
  $formObject = $form_state->getFormObject();
  $layout = $formObject->getLayout();
  $config = $layout->getConfiguration();

  $form['regions'] = [
    '#prefix' => '<label>',
    '#markup' => t('Region settings'),
    '#suffix' => '</label>',
  ];

  $regions = $layout->getPluginDefinition()->get('regions');

  // Loop through regions.
  // @todo Only add detail wrapper when this is a multiple column layout
  foreach ($regions as $region_name => $region) {
    $form[$region_name] = [
      '#type' => 'details',
      '#title' => $region['label'],
      '#open' => TRUE,
    ];

    $form[$region_name]['format'] = [
      '#type' => 'radios',
      '#title' => t('Block display'),
      '#description' => t('Choose how blocks placed in this region will be displayed. When using a grid option, blocks will display side-by-side up to the maximum number defined below and wrap into a new row after that.'),
      '#options' => [
        'stacked' => t('Stacked (default)'),
        'grid' => t('Grid'),
      ],
      '#default_value' => $config['region_formats'][$region_name]['format'] ?: 'stacked',
      '#attributes' => [
        'name' => "layout_settings[$region_name][format]",
      ],
    ];

    $form[$region_name]['grid_row_max'] = [
      '#type' => 'select',
      '#title' => t('Maximum blocks per row'),
      '#description' => t('When using a grid option, blocks will display side-by-side on larger screen formats up to the maximum number per row and then wrap.'),
      '#options' => [
        2 => t('2 (default)'),
        3 => 3,
      ],
      '#default_value' => $config['region_formats'][$region_name]['grid_row_max'] ?: 2,
      '#states' => [
        'visible' => [
          ":input[name=\"layout_settings[$region_name][format]\"]" => ['value' => 'grid'],
        ],
      ],
    ];
  }

  // Our submit handler must execute before the default one, because the
  // default handler stores the section & component data in the tempstore
  // and we need to update those objects before that happens.
  array_unshift($form['#submit'], '_layout_builder_custom_submit_section_form');

}

/**
 * Custom submit handler for layout builder section configure form.
 *
 * @param array $form
 *   The form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _layout_builder_custom_submit_section_form(array &$form, FormStateInterface $form_state) {

  $formObject = $form_state->getFormObject();
  $layout = $formObject->getLayout();
  $config = $layout->getConfiguration();

  $form['regions'] = [
    '#prefix' => '<label>',
    '#markup' => t('Region settings'),
    '#suffix' => '</label>',
  ];

  // Loop through regions.
  // @todo Only add detail wrapper when this is a multiple column layout
  foreach ($layout->getPluginDefinition()->get('regions') as $region_name => $region) {
    $config['region_formats'][$region_name]['format'] = $form_state->getValue([
      $region_name,
      'format',
    ]);
    $config['region_formats'][$region_name]['grid_row_max'] = $form_state->getValue([
      $region_name,
      'grid_row_max',
    ]);
  }

  $layout
    ->setConfiguration($config);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function layout_builder_custom_form_node_page_layout_builder_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'layout_builder_custom/layout_builder_custom.overrides';
}

/**
 * Custom validation for layout_builder_add/update_block form.
 *
 * @param array $form
 *   The form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _layout_builder_custom_block_validate(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionComponent $component */
  $component = $form_state->getFormObject()->getCurrentComponent();
  $block = $component->getPlugin();

  // Add a character limit to the stat block prefix/suffix fields.
  if ($block->getPluginId() == 'inline_block:uiowa_statistic') {
    $block_form = $form_state->getValue('settings')['block_form'];
    $prefix = $block_form['field_uiowa_statistic_title_pre'][0]['value'];
    $suffix = $block_form['field_uiowa_statistic_title_suf'][0]['value'];
    if (strlen($prefix) > 3) {
      $form_state->setErrorByName('settings][block_form][field_uiowa_statistic_title_pre', t('Prefix cannot exceed 3 characters.'));
    }
    if (strlen($suffix) > 3) {
      $form_state->setErrorByName('settings][block_form][field_uiowa_statistic_title_suf', t('Suffix cannot exceed 3 characters.'));
    }
  }
}

/**
 * Custom submit handler for layout_builder_add/update_block form.
 *
 * @param array $form
 *   The form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _layout_builder_custom_block_submit(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionComponent $component */
  $component = $form_state->getFormObject()->getCurrentComponent();
  $block = $component->getPlugin();

  switch ($block->getPluginId()) {
    case 'inline_block:uiowa_banner':
      $background_option = $form_state->getValue([
        'settings',
        'block_form',
        'background_options',
      ]);
      if ($background_option) {
        $form_media_selection = [
          'settings',
          'block_form',
          'field_uiowa_banner_image',
          'selection',
        ];
        if ($background_option === 'image') {
          if (!$form_state->getValue($form_media_selection)) {
            // If an image wasn't uploaded, revert to default of 'black'.
            // @todo Add feedback for user that they didn't upload an image.
            // @todo Add validation to check whether image uploaded or not.
            $background_option = 'block_background_style_black';
          }

        }
        else {
          // If a non-image background was selected, remove the reference.
          // @todo Trigger file deletion if the media item is unused elsewhere.
          $form_state->unsetValue($form_media_selection);
        }
        // Set layout_builder_style_background to value of our duplicate select.
        $form_state->setValue('layout_builder_style_background', $background_option);
      }
      break;

    case 'inline_block:uiowa_aggregator':
    case 'inline_block:uiowa_card':
    case 'inline_block:uiowa_events':
      $media_position = $form_state->getValue('layout_builder_style_card_media_position');
      $media_format = $form_state->getValue('layout_builder_style_media_format');

      if ($media_position === 'card_media_position_stacked') {
        if (in_array($media_format, [
          'media_format_widescreen',
          'media_format_square',
        ])) {
          $form_state->setValue('layout_builder_style_card_image_size', 'card_image_large');
          // @todo Should we set a message here to let the user
          //   know the image size was changed?
        }
      }
      break;

    case 'inline_block:uiowa_collection':
      // Move the view mode value back out of the block form.
      $view_mode = $form_state->getValue(
        ['settings',
          'block_form',
          'view_mode',
        ]
      );
      $form_state->setValue(
        ['settings',
          'view_mode',
        ],
        $view_mode
      );
      break;
  }

}

/**
 * Custom process block form elements.
 *
 * @param array $element
 *   The current block element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 *
 * @return array
 *   The processed block element.
 */
function _layout_builder_custom_process_element(array $element, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionComponent $component */
  $component = $form_state
    ->getFormObject()
    ->getCurrentComponent();
  $block = $component
    ->getPlugin();

  switch ($block->getPluginId()) {
    case 'inline_block:uiowa_text_area':
      if (isset($element['field_uiowa_headline'])) {
        // Unset the unnecessary 'child_heading_size' field option.
        unset($element['field_uiowa_headline']['widget'][0]['container']['child_heading_size']);
        // Update the help text.
        $element['field_uiowa_headline']['widget'][0]['container']['heading_size']['#description'] =
          t('The heading size for the block title.');
        // Add in the 'h6' option.
        $element['field_uiowa_headline']['widget'][0]['container']['heading_size']['#options']['h6'] = 'Heading 6';
      }
      break;

    case 'inline_block:uiowa_banner':
      // @todo Should this be scoped to a condition checking if layout_builder_styles is enabled?
      $all_styles = _layout_builder_styles_retrieve_by_type(LayoutBuilderStyleInterface::TYPE_COMPONENT);

      $selectedStyles = $component->get('layout_builder_styles_style');

      $style_options = ['image' => 'Image or Video'];
      foreach ($all_styles as $style) {
        if ($style->getGroup() === 'background') {
          $restrictions = $style->getBlockRestrictions();
          /** @var \Drupal\layout_builder_styles\LayoutBuilderStyleInterface $style */
          if (empty($restrictions) || in_array('inline_block:uiowa_banner', $restrictions)) {
            $style_options[$style->id()] = $style->label();
          }
        }
      }

      $default_bg = 'image';

      if (is_array($selectedStyles)) {
        foreach ($selectedStyles as $selectedStyle) {
          if (array_key_exists($selectedStyle, $style_options)) {
            $default_bg = $selectedStyle;
          }
        }
      }

      $element['background_options'] = [
        '#type' => 'select',
        '#title' => t('Background'),
        '#options' => $style_options,
        '#default_value' => $default_bg,
        '#weight' => 4,
      ];

      $element['field_uiowa_banner_image'] = [
        '#states' => [
          'visible' => [
            ':input[name="settings[block_form][background_options]"]' => [
              'value' => 'image',
            ],
          ],
            // @todo Conditionally require media field when 'background_options'
            //   is set to 'image'.
        ],
        '#weight' => 5,
      ] + $element['field_uiowa_banner_image'];

      $element['field_uiowa_banner_autoplay'] = [
        '#attributes' => [
          'class' => [
            'js-hide',
          ],
          'tabindex' => [
            '-1',
          ],
          'aria-hidden' => [
            'true',
          ],
        ],
        '#weight' => 6,
      ] + $element['field_uiowa_banner_autoplay'];

      unset($element['field_uiowa_banner_image']['widget']['#title']);
      unset($element['field_uiowa_banner_autoplay']['widget']['#title']);

      // Check the max_delta to see how many banner links have been added
      // and unset the add more button if we've reached the third link.
      if (isset($element['field_uiowa_banner_link']) &&
        $element['field_uiowa_banner_link']['widget']['#max_delta'] >= 2) {
        unset($element['field_uiowa_banner_link']['widget']['add_more']);
        // If we're editing a banner with 3 existing links
        // we also need to unset the fourth pre-added link field.
        if (isset($element['field_uiowa_banner_link']['widget'][3])) {
          unset($element['field_uiowa_banner_link']['widget'][3]);
        }
      }

      break;

    case 'inline_block:uiowa_articles':
    case 'inline_block:uiowa_people':
    case 'inline_block:uiowa_events':
      if (isset($element['field_collection_more_path'])) {
        $element['field_collection_more_path']['#states'] = [
          'visible' => [
            ':input[name="settings[block_form][field_collection_more][value]"]' => [
              'checked' => TRUE,
            ],
          ],
        ];
      }
      break;

    case 'inline_block:uiowa_image_gallery':
      if (isset($element['field_uiowa_headline'])) {
        // Unset the unnecessary 'child_heading_size' field option.
        unset($element['field_uiowa_headline']['widget'][0]['container']['child_heading_size']);
        // Update the help text.
        $element['field_uiowa_headline']['widget'][0]['container']['heading_size']['#description'] =
          t('The heading size for the block title.');
        // Add in the 'h6' option.
        $element['field_uiowa_headline']['widget'][0]['container']['heading_size']['#options']['h6'] = 'Heading 6';
      }
      break;

    case 'inline_block:uiowa_collection':
      if (isset($element['field_uiowa_headline'])) {
        // Update the help text.
        $element['field_uiowa_headline']['widget'][0]['container']['heading_size']['#description'] =
          t('The heading size for the block title. Accordion item headings will be set one heading level lower. Does not apply to descriptive list.');
        $element['field_uiowa_headline']['widget'][0]['container']['child_heading_size']['#description'] =
          t('The heading size for all accordion headings. Does not apply to descriptive list.');
      }

      // Default to multiselect and remove the empty option.
      $element["field_accordion_type"]["widget"]["#default_value"] = isset($element["field_accordion_type"]["widget"]["#default_value"]) ? $element["field_accordion_type"]["widget"]["#default_value"] : 'multi_select';
      unset($element["field_accordion_type"]["widget"]["#options"]["_none"]);
      // Only show the "accordion type" field if accordion view mode
      // has been selected.
      $element['field_accordion_type']['widget']['#states'] = [
        'visible' => [
          ':input[name="settings[block_form][view_mode]"]' => [
            'value' => 'accordion',
          ],
        ],
      ];

      // Now that we have view mode on the block form, place the fields in the right order.
      $element["view_mode"]["#weight"] = 2;
      $element["field_accordion_type"]["#weight"] = 3;
      $element["field_uiowa_collection_items"]["#weight"] = 4;

      break;

    case 'inline_block:uiowa_cta':
      // Set the default text format to plain if the block is new.
      // We look at the #default_value in the widget, as it is empty
      // unless we're editing a block with existing content.
      if (isset($element['field_uiowa_cta_summary']) && empty($element['field_uiowa_cta_summary']['widget'][0]['#default_value'])) {
        $element['field_uiowa_cta_summary']['widget'][0]['#format'] = 'plain_text';
      }
      break;

  }
  return $element;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function layout_builder_custom_field_widget_paragraphs_form_alter(array &$element, FormStateInterface &$form_state, array $context) {
  if (isset($element['#paragraph_type'])) {
    switch ($element['#paragraph_type']) {

      case 'uiowa_collection_item':
      case 'uiowa_slide':
        // Pop the headline and place it in the label.
        $headline = array_shift($element['top']['summary']['fields_info']['#summary']['content']);
        $element['top']['type']['label']['#markup'] = $headline;
        break;

    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function layout_builder_custom_preprocess_layout(&$variables) {
  if (isset($variables['settings']['region_formats'])) {
    foreach (Element::children($variables['content']) as $region_name) {
      if (isset($variables['settings']['region_formats'][$region_name])
        && isset($variables['settings']['region_formats'][$region_name]['format'])
        && $variables['settings']['region_formats'][$region_name]['format'] === 'grid'
      ) {
        $max = $variables['settings']['region_formats'][$region_name]['grid_row_max'] ?: 2;
        $class = NULL;
        switch ($max) {
          case 2:
            $class = 'grid--threecol--33-34-33';
            break;

          case 3:
            $class = 'grid--twocol--50-50';
            break;

        }
        $variables['region_attributes'][$region_name]->addClass($class);
      }
    }
  }

  // $config = $layout
}

/**
 * Implements hook_theme().
 */
function layout_builder_custom_theme($existing, $type, $theme, $path) {
  $theme = [
    'uiowa_headline_widget' => [
      'variables' => [
        'headline' => NULL,
        'heading_size' => NULL,
        'hide_headline' => NULL,
        'child_heading_size' => NULL,
      ],
    ],
  ];
  return $theme;
}

/**
 * Add an element to delineate the layout builder styles form section.
 *
 * The weights are important here. The layout_builder_custom module weighs all
 * fields at 90. We weigh single-select fields at 89 when configuring a section.
 *
 * @see: layout_builder_custom_form_alter().
 */
function _layout_builder_custom_add_lbs_heading(&$form) {
  $children = Element::children($form);

  $styles = array_filter($children, function ($v) {
    return (strpos($v, 'layout_builder_style_') === 0);
  });

  if (!empty($styles)) {
    $form['lbs_heading'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'layout-builder-style-heading',
        ],
      ],
      'markup' => [
        '#prefix' => '<span>',
        '#markup' => t('Display options'),
        '#suffix' => '</span>',
      ],
      '#weight' => 80,
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function layout_builder_custom_preprocess_block(&$variables) {

  switch ($variables['elements']['#plugin_id']) {
    case 'inline_block:uiowa_banner':
      $block = $variables['elements']['content']['#block_content'];
      // Media entity template needs to change based on this block,
      // so invalidate cache.
      if ($block->hasField('field_uiowa_banner_image') && !$block->get('field_uiowa_banner_image')->isEmpty()) {
        $id = $block->get('field_uiowa_banner_image')->target_id;
        Cache::invalidateTags(['media:' . $id]);
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function layout_builder_custom_preprocess_media(&$variables) {
  $media = $variables['elements']['#media'];
  if ($media->bundle() === 'video') {
    $variables['attributes'] = [
      'class' => ['media--video'],
    ] + $variables['attributes'];
  }
}

/**
 * Implements hook_views_plugins_display_alter().
 */
function layout_builder_custom_views_plugins_display_alter(&$displays) {
  if (!empty($displays['block']['class']) && $displays['block']['class'] == Block::class) {
    $displays['block']['class'] = ListBlock::class;
  }
}
