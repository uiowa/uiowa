<?php

/**
 * @file
 * Contains lb_enhancements.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\layout_builder_styles\LayoutBuilderStyleGroups;

/**
 * Implements hook_form_alter().
 */
function layout_builder_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'layout_builder_add_block':
    case 'layout_builder_update_block':

      /** @var \Drupal\layout_builder\SectionComponent $component */
      $component = $form_state->getFormObject()->getCurrentComponent();
      $block = $component->getPlugin();

      // Add custom validation for certain blocks/regions to validate.
      $form['#validate'][] = '_layout_builder_custom_block_validate';

      // Add custom process callback for certain blocks to alter form elements.
      $form['settings']['block_form']['#process'][] = '_layout_builder_custom_process_element';

      // Override display of layout builder styles.
      $styles_exist = FALSE;
      $styles_enabled = FALSE;

      // Loop through layout builder style groups.
      $groups = LayoutBuilderStyleGroups::getGroups();

      foreach (array_keys($groups) as $group) {
        $lbs = 'layout_builder_style_' . $group;

        if (isset($form[$lbs])) {
          $styles_exist = TRUE;

          if ($form_id == 'layout_builder_update_block') {
            // Set enabled flag based on whether a default value exists
            // for this layout builder style.
            $styles_enabled = !empty($form[$lbs]['#default_value']);
          }

          // Set a state for the layout builder style to toggle
          // based on the value of the override value specified below.
          $form[$lbs]['#states'] = [
            'visible' => [
              ':input[name="layout_builder_block_override"]' => [
                'checked' => TRUE,
              ],
            ],
          ];

          // Make the background option single select only.
          if ($group === 'background') {
            $form[$lbs]['#multiple'] = FALSE;
          }
        }
      }

      // Add a checkbox to toggle whether the styles should show.
      if ($styles_exist) {
        $form['layout_builder_block_override'] = [
          '#type' => 'checkbox',
          '#title' => t('Override style options'),
          '#required' => FALSE,
          '#default_value' => $styles_enabled,
          '#weight' => 80,
        ];
      }

      // Always set title field to not be required.
      $form['settings']['label']['#required'] = FALSE;

      unset($form['settings']['label']);
      unset($form['settings']['label_display']);
      unset($form['settings']['admin_label']['#title']);

      if ($block->getPluginId() == 'menu_block:main') {
        /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
        $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
        $collegiate_split = 'config_split:collegiate';
        // 'collegiate' split either doesn't exist or isn't enabled.
        if (!isset($filters[$collegiate_split]) || !$filters[$collegiate_split]['status']) {
          // Restrict block settings on main navigation block.
          $form["settings"]["menu_levels"]['#access'] = FALSE;
          $form["settings"]["advanced"]['#access'] = FALSE;
          $form["settings"]["style"]['#access'] = FALSE;
        }

        // Set defaults.
        $form["settings"]["menu_levels"]["level"]["#default_value"] = 2;
        $form["settings"]["advanced"]["follow"]["#default_value"] = 1;
      }

      $form['settings'] += [
        '#weight' => 0,
      ];

      // Change collection view_mode field to radios and remove the 'default' option.
      if (isset($form['settings']['block_form']['#block'])
      && $form['settings']['block_form']['#block']->bundle() === 'uiowa_collection') {
        $form['settings']['view_mode']['#type'] = 'radios';
        array_shift($form['settings']['view_mode']['#options']);

        // @todo Re-enable 'tab' after theming/functionality is in place.
        unset($form['settings']['view_mode']['#options']['tab']);

        $view_options = [
          'accordion',
          'descriptive_list',
          'tab',
        ];

        // If view mode not in our options (eg 'full'), set it to <dl>.
        if (!in_array($form['settings']['view_mode']['#default_value'], $view_options)) {
          $form['settings']['view_mode']['#default_value'] = 'descriptive_list';
        }
      }

      break;

    case 'layout_builder_configure_section':
      if (isset($form['layout_builder_style_background'])) {
        // Disable multiple selection and weight to the top so focus on a
        // Chosen-enabled select does not obscure other form elements.
        $form['layout_builder_style_background']['#multiple'] = FALSE;
        $form['layout_builder_style_background']['#weight'] = 0;
      }

      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function layout_builder_custom_form_node_page_layout_builder_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'layout_builder_custom/layout_builder_custom.overrides';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function layout_builder_custom_form_node_page_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Set default node.body text format to filtered over minimal.
  $form['body']['widget'][0]['#format'] = 'filtered_html';
}

/**
 * Custom validation for layout_builder_add/update_block form.
 *
 * @param array $form
 *   The form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _layout_builder_custom_block_validate(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\Section $section */
  $section = $form_state->getFormObject()->getCurrentSection();

  /** @var \Drupal\layout_builder\SectionComponent $component */
  $component = $form_state->getFormObject()->getCurrentComponent();
  $block = $component->getPlugin();

  // Require horizontal style if this card is in a one column layout.
  if ($section->getLayoutId() == 'layout_onecol' && $block->getPluginId() == 'inline_block:uiowa_card') {
    $styles = $form_state->getValue('layout_builder_style_default');

    if (!isset($styles['block_card_style_horizontal'])) {
      $form_state->setErrorByName('layout_builder_block_override', t('Cards rendered within a one column layout must have the horizontal style.'));
    }
  }
}

/**
 * Custom process block form elements.
 *
 * @param array $element
 *   The current block element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 *
 * @return array
 *   The processed block element.
 */
function _layout_builder_custom_process_element(array $element, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionComponent $component */
  $component = $form_state->getFormObject()->getCurrentComponent();
  $block = $component->getPlugin();

  switch ($block->getPluginId()) {
    case 'inline_block:uiowa_text_area':
      if (isset($element['field_uiowa_text_area'])) {
        $element['field_uiowa_text_area']['widget'][0]['#format'] = 'filtered_html';
      }
      break;

    case 'inline_block:uiowa_articles':
    case 'inline_block:uiowa_people':
    case 'inline_block:uiowa_events':
      if (isset($element["field_collection_more_path"])) {
        $element["field_collection_more_path"]['#states'] = [
          'visible' => [
            ':input[name="settings[block_form][field_collection_more][value]"]' => [
              'checked' => TRUE,
            ],
          ],
        ];
      }
      break;

  }

  return $element;
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function layout_builder_custom_inline_entity_form_table_fields_alter(array &$fields, array $context) {
  if ($context['entity_type'] === 'paragraph') {
    if (in_array('uiowa_collection_item', $context['allowed_bundles'])) {
      unset($fields['label']);
      $fields['field_collection_headline'] = [
        'type' => 'field',
        'label' => t('Headline'),
        'weight' => 0,
      ];
    }
  }
}
