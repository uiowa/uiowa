<?php

/**
 * @file
 * Article configuration for the University of Iowa.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Url;
use Drupal\views\Entity\View;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
 * Implements hook_entity_extra_field_info().
 */
function sitenow_articles_entity_extra_field_info() {
  $extra = [];

  $extra['node']['article'] = [
    'display' => [
      'article_created_date' => [
        'label' => t('Created Date'),
        'description' => t('Date the node was created.'),
        'weight' => 100,
        'visible' => TRUE,
      ],
    ],
  ];

  return $extra;
}

/**
 * Implements hook_form_alter().
 */
function sitenow_articles_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_article_edit_form':
    case 'node_article_form':
      $form['field_article_source_link_direct']['#states'] = [
        'visible' => [
          ':input[name="field_article_source_link[0][uri]"]' => ['filled' => TRUE],
        ],
      ];
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_articles_form_views_ui_edit_display_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['options']['link_url']['#description'][2]['#items'][] = '{{ sitenow_articles.path }} == SiteNow Articles path setting';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_breadcrumb(&$variables) {
  // Not ideal. Unset view contextual filter breadcrumb duplicates.
  // Waiting for https://www.drupal.org/project/drupal/issues/2966004,
  // https://www.drupal.org/project/drupal/issues/2787051...
  $routes = [];
  foreach ($variables["links"] as $key => $link) {
    $url = $link->getURL();
    // Test for external paths.
    if ($url->isRouted()) {
      $routes[$key] = $link->getUrl()->getRouteName();
    }
  }
  // For breadcrumb links built from view articles path, reduce duplicates.
  if (in_array('view.articles.page_articles', $routes)) {
    $unique_routes = array_keys(array_unique($routes, SORT_REGULAR));
    foreach ($variables["breadcrumb"] as $key => $value) {
      if (!in_array($key, $unique_routes)) {
        unset($variables["breadcrumb"][$key]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_field(&$variables) {
  if ($variables["element"]["#field_name"] == 'field_article_author') {
    if ($variables["element"]["#formatter"] == 'entity_reference_label') {
      $variables["element"]["#title"] = 'Written by';
      $variables["label"] = 'Written by';
    }
  }
  if ($variables["element"]["#field_name"] == 'field_article_source_org') {
    if ($variables["element"]["#formatter"] == 'string') {
      $variables["element"]["#title"] = 'Organization';
      $variables["label"] = 'Organization';
    }
  }
  if ($variables["element"]["#field_name"] == 'field_article_source_link') {
    if ($variables["element"]["#formatter"] == 'link') {
      $variables["element"]["#title"] = 'Source';
      $variables["label"] = 'Source';
    }
  }
  if ($variables["element"]["#field_name"] == 'field_image_caption') {
    $variables["attributes"]['class'][] = 'figure-caption';
    $variables["attributes"]['id'] = 'node-caption';
  }
  if ($variables['element']['#field_name'] == 'field_image') {
    $node = $variables['element']['#object'];
    if ($node->hasField('field_image_caption') && !$node->get('field_image_caption')->isEmpty()) {
      $variables["attributes"]['aria-describedby'] = 'node-caption';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function sitenow_articles_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  if ($variables["element"]["#field_name"] == 'field_article_author') {
    if ($variables["element"]["#formatter"] == 'entity_reference_label') {
      $suggestions[] = 'field__node__field_article_author__sep';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_page(&$variables) {
  $current_route = \Drupal::routeMatch();
  $route_name = $current_route->getRouteName();
  if ($route_name == 'view.articles.page_articles') {
    // Get the current user.
    $user = \Drupal::currentUser();
    // Check for permission.
    if ($user->hasPermission('administer sitenow articles') == TRUE) {
      // Print warning message informing user to use basic site settings.
      $url = Url::fromRoute('sitenow_articles.settings_form');
      $settings_link = Link::fromTextAndUrl(t('SiteNow Articles'), $url)
        ->toString();
      $message_text = t('This page can be configured here: @settings_link', [
        '@settings_link' => $settings_link,
      ]);
      \Drupal::messenger()->addStatus($message_text);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_node(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {

    $node = $variables["node"];
    switch ($node->getType()) {
      case 'article':
        $variables['content']['article_author'] = $node->field_article_author->view([
          'type' => 'entity_reference_label',
          'label' => 'inline',
          'settings' => [],
        ]);
        if (!$node->get('field_article_source_org')->isEmpty() && !$node->get('field_article_source_link')->isEmpty()) {
          $variables["content"]["field_article_source_link"][0]["#title"] = $node->field_article_source_org->value;
          switch ($variables['view_mode']) {
            case 'teaser':
              // Unset source link if directly linking out to prevent
              // redundant links.
              if ($node->hasField('field_article_source_link_direct')) {
                if ($node->field_article_source_link_direct->value == 1 && !$node->get('field_article_source_link')->isEmpty()) {
                  unset($variables["content"]["field_article_source_link"]);
                }
                else {
                  unset($variables["content"]["field_article_source_org"]);
                }
              }
              break;

            case 'full':
            case 'default':
              unset($variables["content"]["field_article_source_org"]);
              break;

          }
        }
        if ($variables['view_mode'] == 'teaser') {
          // Heading needs to change based on placement. Defaults to h3 in twig.
          $current_route = \Drupal::routeMatch();
          $route_name = $current_route->getRouteName();
          $variables['#cache']['contexts'][] = 'route.name';
          if (strpos($route_name, 'view.articles.') === 0) {
            $variables['heading_size'] = 'h2';
          }

          if ($node->hasField('field_article_source_link_direct')) {
            if ($node->field_article_source_link_direct->value == 1 && !$node->get('field_article_source_link')->isEmpty()) {
              unset($variables["content"]["field_article_source_link"]);
            }
          }
        }
        break;

    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function sitenow_articles_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  switch ($entity->getType()) {
    case 'article':
      if ($display->getComponent('article_created_date')) {
        $created = $entity->get('created')->value;
        $date = \Drupal::service('date.formatter')->format($created, 'medium');
        $build['article_created_date'] = [
          '#type' => 'markup',
          '#markup' => '<span class="article-created-date">' . $date . '</span>',
        ];
      }
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_views_view(&$variables) {
  switch ($variables['id']) {
    case 'articles':
      /** @var  \Drupal\views\ViewExecutable $view */
      $view = $variables['view'];

      if (empty($variables['header']['area']['#text'])) {
        unset($variables['header']['area']);
      }

      // If this is the page display and arguments were provided, hide the
      // feed icons since we don't want to promote those filtered RSS feeds.
      if ($view->current_display == 'page_articles' && !empty($view->args)) {
        $variables['feed_icons'] = [];
      }

      break;

  }
}

/**
 * Implements hook_preprocess_views_view_summary().
 */
function sitenow_articles_preprocess_views_view_summary(&$variables) {
  if ($variables["view"]->current_display == 'block_articles_archive') {
    foreach ($variables["rows"] as $row) {
      $explode = explode('/', $row->url);
      unset($explode[3]);
      $explode[2] = substr_replace($explode[2], '/', 4, 0);
      $row->url = implode("/", $explode);
    }
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function sitenow_articles_preprocess_views_view_unformatted(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  if ($view->id() === 'article_list_block') {
    $rows = $variables['rows'];
    $style = $view->style_plugin;

    foreach ($rows as $id => $row) {
      // Need to get these values regardless of whether they are hidden or not.
      $link_direct = $row['content']['#node']->get('field_article_source_link_direct')->value;
      $source_link = $row['content']['#node']->get('field_article_source_link')->uri;
      $org = $row['content']['#node']->get('field_article_source_org')->value;
      $nid = $row['content']['#node']->get('nid')->value;

      // If source link is set and link direct is checked, set $card_link_url to
      // source link. Otherwise, $card_link_url should be set to node link.
      if ($link_direct == 1
        && isset($source_link) && !empty($source_link)) {
        $card_link_url = $source_link;
      }
      else {
        $card_link_url = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid);
      }

      $card_tag = [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#attributes' => [
          'class' => [
            'field--name-field-article-source-link',
          ],
        ],
      ];
      if ($org && $style->getField($id, 'field_article_source_org')) {
        $org = $style->getField($id, 'field_article_source_org');
        // If source link is hidden...
        if ($style->getField($id, 'field_article_source_link') === NULL) {
          // But source_link has value...
          if ($source_link) {
            // Wrap org in the source link.
            $org = Link::fromTextAndUrl($style->getField($id, 'field_article_source_org'), Url::fromUri($source_link))
              ->toString();
          }
        }

        $card_tag['org'] = [
          '#prefix' => '<span class="views-field-article-source-link">',
          '#markup' => $org,
          '#suffix' => '</span>',
        ];
      }
      if ($source_link && $style->getField($id, 'field_article_source_link')) {
        $card_tag['source_link'] = [
          '#prefix' => '<span class="views-field-article-source-link">',
          '#markup' => $style->getField($id, 'field_article_source_link'),
          '#suffix' => '</span>',
        ];
      }

      $variables['rows'][$id]['card_options']['card_link_url'] = $card_link_url;
      $variables['rows'][$id]['card_options']['card_subtitle'] = $style->getField($id, 'created');
      $variables['rows'][$id]['card_options']['card_tag'] = \Drupal::service('renderer')->render($card_tag);
      $variables['rows'][$id]['card_options']['card_meta'] = $style->getField($id, 'field_article_author');
    }
  }
}

/**
 * Implements hook_uip_classes_alter().
 */
function sitenow_articles_uip_classes_alter(&$options, $entity, $bundle) {
  switch ($bundle) {
    case 'articles':
      $options['hide-descriptions'] = 'Hide Summaries';
      $options['hide-images'] = 'Hide Images';
      $options['grid'] = 'Grid';
      $options['masonry'] = 'Masonry';
      break;

  }
}

/**
 * Implements hook_theme().
 */
function sitenow_articles_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__articles__default' => [
      'template' => 'paragraph--articles--default',
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  switch ($paragraph->bundle()) {
    case 'articles':
      $admin_context = \Drupal::service('router.admin_context');
      if (!$admin_context->isAdminRoute()) {

        // Display title if it exists.
        if ($paragraph->hasField('field_uip_display_title')) {
          if ($paragraph->field_uip_display_title->value == 1) {
            $variables['display_title'] = TRUE;
          }
        }

        if ($paragraph->hasField('field_uip_classes') && !$paragraph->get('field_uip_classes')->isEmpty()) {
          $classes = $paragraph->get('field_uip_classes')->getValue();
          // Clean array of classes selected.
          $classes = array_column($classes, 'value');
          // Check for grid classes otherwise add list class.
          $display_options = [
            'grid',
            'masonry',
          ];
          $result = array_intersect($display_options, $classes);
          if (!$result) {
            $variables['attributes']['class'][] = 'list';
          }
        }
        else {
          $variables['attributes']['class'][] = 'list';
        }
        // Get field_uip_colwidth value.
        if ($paragraph->hasField('field_uip_colwidth')) {
          $variables['attributes']['class'][] = $paragraph->field_uip_colwidth->value;
        }
        // Get field_uip_id value.
        if ($paragraph->hasField('field_uip_id')) {
          $variables['attributes']['id'][] = Html::getClass($paragraph->field_uip_id->value);
        }

        $view = Views::getView('articles_block');
        $view->setDisplay('block_articles');
        $view->display_handler->setOption('parent_entity', $paragraph);

        if ($paragraph->hasField('field_reference') && !$paragraph->get('field_reference')->isEmpty()) {
          $tids = $paragraph->get('field_reference')->getValue();
          // Clean array of tids selected.
          $tids = array_column($tids, 'target_id');
        }
        else {
          $tids = ['all'];
        }
        // Contextual relationship filter.
        $args = implode('+', $tids);
        $view->setArguments([$args]);

        if ($paragraph->hasField('field_uip_items') && !$paragraph->get('field_uip_items')->isEmpty()) {
          $items = $paragraph->field_uip_items->value;
          $view->setItemsPerPage($items);
          $view->setExposedInput([
            'items_per_page' => $items,
          ]);
        }
        $pager_type = 'some';
        // Show pager if it exists and is set.
        if ($paragraph->hasField('field_uip_pager')) {
          if ($paragraph->field_uip_pager->value == 1) {
            $pager_type = 'full';
          }
        }

        $pager = $view->display_handler->getOption('pager');
        // IF show pager, change pager_type to 'full'.
        $pager['type'] = $pager_type;
        $view->display_handler->setOption('pager', $pager);

        $view->preExecute();
        $view->execute();
        $variables['content']['view'] = $view->render();

        // If we have more link checked and link provided, pass it.
        if ($paragraph->hasField('field_articles_more')) {
          $more = ($paragraph->field_articles_more->value == 1) ? TRUE : FALSE;
          if ($more == TRUE) {
            $variables['more'] = [
              '#type' => 'container',
              '#attributes' => [
                'class' => 'more-link',
              ],
            ];

            $view = View::load('articles');
            $default =& $view->getDisplay('default');

            if (!empty($more_path = $paragraph->get('field_articles_more_path')->getValue())) {
              $url = Url::fromUri($more_path[0]['uri']);
            }
            elseif ($view->getDisplay('page_articles')['display_options']['enabled'] == TRUE) {
              $url = Url::fromRoute('view.articles.page_articles');
            }
            if (isset($url)) {
              $variables['more']['btn'] = [
                '#type' => 'link',
                '#title' => 'View more ' . strtolower($default['display_options']['title']),
                '#url' => $url,
                '#attributes' => [
                  'class' => ['btn', 'btn-primary'],
                ],
              ];
            }
          }
        }
      }

      break;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function sitenow_articles_views_pre_render(ViewExecutable $view) {
  // Add replacement token for articles page path.
  $view->build_info['substitutions']['{{ sitenow_articles.path }}'] = _sitenow_articles_path_token_value();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_articles_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->get('view');
  if ($view->id() == 'articles_block') {
    if ($view->current_display == 'block_articles') {
      $exposed_input = $view->getExposedInput();
      if (isset($exposed_input["items_per_page"])) {
        $form["items_per_page"]["#options"] = [$exposed_input["items_per_page"] => $exposed_input["items_per_page"]];
        $form["#attributes"]["class"][] = 'hidden';
      }
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function sitenow_articles_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element["#paragraph_type"] == 'articles') {
    if (!empty($element['subform']['field_articles_more'])) {
      $parents_array = $element['subform']['#parents'];
      $parents = array_shift($parents_array) . '[' . implode('][', $parents_array) . ']';
      if (!empty($element['subform']['field_articles_more_path'])) {
        $element['subform']['field_articles_more_path']['#states'] = [
          'visible' => [
            ':input[name="' . $parents . '[field_articles_more][value]"]' => [
              'checked' => TRUE,
            ],
          ],
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_block(&$variables) {
  switch ($variables['elements']['#plugin_id']) {
    case 'views_block:article_list_block-list_article':
      if (isset($variables['attributes']['class'])) {
        // Unset classes meant for children.
        foreach ($variables['attributes']['class'] as $key => $style) {
          foreach ([
            'bg',
            'card',
            'media',
            'hide',
          ] as $check) {
            if (substr($style, 0, strlen($check)) === $check) {
              unset($variables['attributes']['class'][$key]);
            }
          }
        }
      }

      break;

  }
}

/**
 * Implements hook_token_info().
 */
function sitenow_articles_token_info(): array {
  $info = [];
  $info['types']['sitenow_articles'] = [
    'name' => t('SiteNow Articles'),
    'description' => t('Tokens for SiteNow Articles.'),
  ];
  $info['tokens']['sitenow_articles']['path'] = [
    'name' => 'SiteNow Articles path',
    'description' => 'A token to display the SiteNow Articles page path.',
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function sitenow_articles_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'sitenow_articles') {

    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'sitenow_articles_path':
          $replacements[$original] = _sitenow_articles_path_token_value();
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Callback to get the SiteNow Articles view path.
 */
function _sitenow_articles_path_token_value() {

  // Load articles listing view.
  $view = Drupal::entityTypeManager()->getStorage('view')->load('articles');

  // Loop through displays except Master.
  $displays = $view->get('display');
  unset($displays['default']);
  foreach ($displays as $display_id => $display) {
    // If page display is not enabled, skip.
    if ($display_id !== 'page_articles') {
      continue;
    }

    // @todo Do we need to do anything besides this?
    return '/' . $display['display_options']['path'];
  }

  // @todo Is this appropriate when there is no value?
  return '';
}
