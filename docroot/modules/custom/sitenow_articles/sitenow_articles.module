<?php

/**
 * @file
 * Article functionality for the SiteNow platform.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Url;
use Drupal\sitenow_articles\Entity\Article;
use Drupal\user\Entity\User;
use Drupal\views\Entity\View;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function sitenow_articles_entity_bundle_info_alter(array &$bundles) {
  if (isset($bundles['node']['article'])) {
    $bundles['node']['article']['class'] = Article::class;
  }
}

/**
 * Helper function to check if the "articles_narrow" split is enabled.
 *
 * @return bool
 *   Returns TRUE if the split is enabled, FALSE otherwise.
 */
function sitenow_articles_narrow_is_enabled(): bool {
  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
  $config_factory = \Drupal::service('config.factory');
  $articles_narrow_split_config = $config_factory->get('config_split.config_split.articles_narrow');
  return ($articles_narrow_split_config->get('status') === TRUE);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function sitenow_articles_entity_extra_field_info() {
  $extra = [];

  $extra['node']['article'] = [
    'display' => [
      'article_created_date' => [
        'label' => t('Created Date'),
        'description' => t('Date the node was created.'),
        'weight' => 100,
        'visible' => TRUE,
      ],
    ],
  ];

  return $extra;
}

/**
 * Implements hook_form_alter().
 */
function sitenow_articles_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_article_edit_form':
      if (isset($form['field_article_preserve_links'])) {
        // Set description message to only display when the user doesn't have
        // the 'administer sitenow articles' permission.
        $user = User::load(\Drupal::currentUser()->id());
        if ($user->hasPermission('administer sitenow articles')) {
          $form['field_article_preserve_links']['widget']['value']['#description'] = FieldFilteredMarkup::create($form['field_article_preserve_links']['widget']['value']['#description'] . ' <a href="/admin/config/sitenow/uiowa-articles" target="_blank" rel="noopener">Customize this message and other site-wide article settings.</a>');
        }
      }
    case 'node_article_form':
      if (isset($form['field_related_content'])) {
        // Set field_related_content to node_reference group.
        $form['field_related_content']['#group'] = 'node_relations';
      }
      $form['field_article_source_link_direct']['#states'] = [
        'visible' => [
          ':input[name="field_article_source_link[0][uri]"]' => ['filled' => TRUE],
        ],
      ];
      // If article is being created, hide the preserve links checkbox.
      if ($form_id === 'node_article_form') {
        $form['field_article_preserve_links']['#access'] = FALSE;
      }

      // If a new person is being created for the contact field,
      // they don't have a "title" yet, and so we need to fetch
      // their first and last names and combine in order to display.
      // Check that there are entities.
      if (isset($form['field_contact_reference']['widget']['entities'])) {
        $contacts = $form['field_contact_reference']['widget']['entities'];

        // For each one that exists, make sre it is one of the integer entries,
        // which is actually an entity.
        foreach ($contacts as $key => $contact) {
          if (is_int($key) && $contact['#entity']->getType() === 'person') {

            // Then, get the string of the first and last names.
            $first = $contact['#entity']?->get('field_person_first_name')?->getString();
            $last = $contact['#entity']?->get('field_person_last_name')?->getString();

            // And set the title, which would have been empty,
            // to the concatenation of the two.
            if (is_string($first) && is_string($last)) {
              $form['field_contact_reference']['widget']['entities'][$key]['#label'] = $first . ' ' . $last;
            }
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_articles_form_views_ui_edit_display_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['options']['link_url']['#description'][2]['#markup'] = ' {{ sitenow_articles.path }} is the SiteNow Articles path setting.';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_breadcrumb(&$variables) {
  // Not ideal. Unset view contextual filter breadcrumb duplicates.
  // Waiting for https://www.drupal.org/project/drupal/issues/2966004,
  // https://www.drupal.org/project/drupal/issues/2787051...
  $routes = [];
  foreach ($variables['links'] as $key => $link) {
    $url = $link->getURL();
    // Test for external paths.
    if ($url->isRouted()) {
      $routes[$key] = $link->getUrl()->getRouteName();
    }
  }
  // For breadcrumb links built from view articles path, reduce duplicates.
  if (in_array('view.articles.page_articles', $routes)) {
    $unique_routes = array_keys(array_unique($routes, SORT_REGULAR));
    foreach ($variables['breadcrumb'] as $key => $value) {
      if (!in_array($key, $unique_routes)) {
        unset($variables['breadcrumb'][$key]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] === 'field_article_author') {
    if ($variables['element']['#view_mode'] == 'teaser') {
      uiowa_core_set_field_icon($variables, 'fa-li fas fa-user-circle');
    }
    if ($variables['element']['#formatter'] === 'entity_reference_label') {
      $variables['element']['#title'] = 'Written by';
      $variables['label'] = 'Written by';
      // Remove the label for article teasers.
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_title_attributes($variables, 'visually-hidden');
        uiowa_core_set_attributes($variables, 'field--label-visually_hidden');
      }
    }
    // Loop through all author fields in the byline and add credentials
    // (if available) to their names.
    foreach ($variables['items'] as $key => $item) {
      $author_entity = $item['content']['#options']['entity'];
      $credentials = $author_entity
        ?->field_person_credential
        ?->value;

      if (!is_null($credentials)) {
        $variables['items'][$key]['content']['#title'] .= ', ' . $credentials;
      }
    }
  }
  if ($variables['element']['#field_name'] === 'field_article_source_org') {
    if ($variables['element']['#formatter'] === 'string') {
      $variables['element']['#title'] = 'Organization';
      $variables['label'] = 'Organization';
    }
  }
  if ($variables['element']['#field_name'] === 'field_article_source_link') {
    if ($variables['element']['#formatter'] === 'link') {
      $variables['element']['#title'] = 'Source';
      $variables['label'] = 'Source';
    }
  }
  if ($variables['element']['#field_name'] === 'field_image_caption') {
    $variables['attributes']['class'][] = 'figure-caption';
    $variables['attributes']['id'] = 'node-caption';
  }
  if ($variables['element']['#field_name'] === 'field_image') {
    $node = $variables['element']['#object'];
    if ($node->hasField('field_image_caption') && !$node->get('field_image_caption')->isEmpty()) {
      $variables['attributes']['aria-describedby'] = 'node-caption';
    }
  }
  if ($variables['element']['#field_name'] === 'field_related_content') {
    $variables['attributes']['class'][] = 'list-container--grid';
    $variables['attributes']['class'][] = 'grid--threecol--33-34-33';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function sitenow_articles_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#field_name'] === 'field_article_author') {
    if ($variables['element']['#formatter'] === 'entity_reference_label') {
      $suggestions[] = 'field__node__field_article_author__sep';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_page(&$variables) {
  $current_route = \Drupal::routeMatch();
  $route_name = $current_route->getRouteName();
  if ($route_name === 'view.articles.page_articles') {
    // Get the current user.
    $user = \Drupal::currentUser();
    // Check for permission.
    if ($user->hasPermission('administer sitenow articles') === TRUE) {
      // Print warning message informing user to use basic site settings.
      $url = Url::fromRoute('sitenow_articles.settings_form');
      $settings_link = Link::fromTextAndUrl(t('SiteNow Articles'), $url)
        ->toString();
      $message_text = t('This page can be configured here: @settings_link', [
        '@settings_link' => $settings_link,
      ]);
      \Drupal::messenger()->addStatus($message_text);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_node(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {

    $node = $variables['node'];

    switch ($node->getType()) {
      case 'article':
        $variables['content']['article_author'] = $node->field_article_author->view([
          'type' => 'entity_reference_label',
          'label' => 'inline',
          'settings' => [],
        ]);

        switch ($variables['view_mode']) {
          case 'full':
          case 'default':
            // For now, different byline behavior on full node than on teaser.
            if (!$node->get('field_article_source_org')->isEmpty() && !$node->get('field_article_source_link')->isEmpty()) {
              $variables['content']['field_article_source_link'][0]['#title'] = $node->field_article_source_org->value;
              unset($variables['content']['field_article_source_org']);
            }

            // Check if we don't have any gallery images.
            if ($node->hasField('field_gallery_images') &&
              empty($node->get('field_gallery_images')->getValue())) {
              $layout_parts = ['content', 'second'];
              // If no gallery images, then hide the gallery jumplink.
              uiowa_core_unset_layout_builder_block($variables, 'galleryjumplink_block');
            }

            // Check if preserve links checkbox is checked.
            if ($node->hasField('field_article_preserve_links')) {
              $layout_parts = ['content', 'first'];
              if ((int) filter_var($node->field_article_preserve_links->value, FILTER_VALIDATE_BOOLEAN) !== 1) {
                // If it isn't checked, hide the broken links message.
                uiowa_core_unset_layout_builder_block($variables, 'preservedlinksmessage_block');
              }
            }
            break;

        }
        break;

      case 'person':

        switch ($variables['view_mode']) {
          case 'full':
          case 'default':
            $person_display_config = \Drupal::config('sitenow_articles.settings')->get('display_articles_by_author');

            if (!$person_display_config) {
              uiowa_core_unset_layout_builder_block($variables, 'views_block:articles_author-articles_author');
            }

            break;

        }
        break;

    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function sitenow_articles_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  switch ($entity->getType()) {
    case 'article':
      if ($display->getComponent('article_created_date')) {
        $created = $entity->get('created')->value;
        $date = \Drupal::service('date.formatter')->format($created, 'medium');
        $build['article_created_date'] = [
          '#type' => 'container',
          '#attributes' => [
            'class' => ['article-created-date'],
          ],
          'date' => [
            '#type' => 'markup',
            '#markup' => $date,
            '#weight' => 0,
          ],
        ];

        if ($view_mode !== 'teaser' && sitenow_articles_narrow_is_enabled()) {
          $build['article_created_date']['title'] = [
            '#type' => 'html_tag',
            '#tag' => 'div',
            '#value' => t('Published:'),
            '#attributes' => [
              'class' => ['field__label'],
            ],
            '#weight' => -10,
          ];
        }
      }

      break;

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_views_view(&$variables) {
  switch ($variables['id']) {
    case 'articles':
      $variables['#attached']['library'][] = 'uids_base/view-articles-list';

      /** @var  \Drupal\views\ViewExecutable $view */
      $view = $variables['view'];

      if (empty($variables['header']['area']['#text'])) {
        unset($variables['header']['area']);
      }

      // If this is the page display and arguments were provided, hide the
      // feed icons since we don't want to promote those filtered RSS feeds.
      if ($view->current_display === 'page_articles' && !empty($view->args)) {
        $variables['feed_icons'] = [];
      }

      break;

    case 'article_list_block':
      $variables['#attached']['library'][] = 'uids_base/view-articles-list';
      break;

  }
}

/**
 * Implements hook_preprocess_views_view_summary().
 */
function sitenow_articles_preprocess_views_view_summary(&$variables) {
  if ($variables['view']->current_display === 'block_articles_archive') {
    foreach ($variables['rows'] as $row) {
      $explode = explode('/', $row->url);
      unset($explode[3]);
      $explode[2] = substr_replace($explode[2], '/', 4, 0);
      $row->url = implode("/", $explode);
    }
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function sitenow_articles_preprocess_views_view_unformatted(&$variables) {
  $view = $variables['view'];

  // Style stacked if from related_manually_referenced_content block grid,
  // otherwise media right. Unset completely for SiteNow v2.
  if ($view->id() === 'related_manually_referenced_content' && $view->current_display === 'block_grid') {

    // Add appropriate card styles for v2/3 teaser view modes.
    // @todo Remove after v2 dies.
    //   See https://github.com/uiowa/uiowa/issues/4948
    $is_v2 = \Drupal::config('config_split.config_split.sitenow_v2')->get('status');

    if (!$is_v2) {
      foreach ($variables['rows'] as &$row_build) {
        $row_build['content']['#override_styles'] = [
          'card_media_position' => 'card--stacked',
          'bg' => 'bg--white',
          'media_format' => 'media--widescreen',
          'media_size' => 'media--large',
          'hide_descriptions' => 'hide-descriptions',
        ];
      }
    }
  }

  $variables['row_item_classes'] = [];

  switch ($view->current_display) {
    case 'articles_author':
      uiowa_core_views_row_hide_fields($variables, 'field_article_author', 'field_teaser', 'field_image', 'field_article_source_org', 'field_article_source_link');
      break;
  }
}

/**
 * Implements hook_uip_classes_alter().
 */
function sitenow_articles_uip_classes_alter(&$options, $entity, $bundle) {
  switch ($bundle) {
    case 'articles':
      $options['hide-descriptions'] = 'Hide Summaries';
      $options['hide-images'] = 'Hide Images';
      $options['grid'] = 'Grid';
      $options['masonry'] = 'Masonry';
      break;

  }
}

/**
 * Implements hook_theme().
 */
function sitenow_articles_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__articles__default' => [
      'template' => 'paragraph--articles--default',
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  switch ($paragraph->bundle()) {
    case 'articles':
      $admin_context = \Drupal::service('router.admin_context');
      if (!$admin_context->isAdminRoute()) {

        // Display title if it exists.
        if ($paragraph->hasField('field_uip_display_title')) {
          if ((int) $paragraph->field_uip_display_title->value === 1) {
            $variables['display_title'] = TRUE;
          }
        }

        if ($paragraph->hasField('field_uip_classes') && !$paragraph->get('field_uip_classes')->isEmpty()) {
          $classes = $paragraph->get('field_uip_classes')->getValue();
          // Clean array of classes selected.
          $classes = array_column($classes, 'value');
          // Check for grid classes otherwise add list class.
          $display_options = [
            'grid',
            'masonry',
          ];
          $result = array_intersect($display_options, $classes);
          if (!$result) {
            $variables['attributes']['class'][] = 'list';
          }
        }
        else {
          $variables['attributes']['class'][] = 'list';
        }
        // Get field_uip_colwidth value.
        if ($paragraph->hasField('field_uip_colwidth')) {
          $variables['attributes']['class'][] = $paragraph->field_uip_colwidth->value;
        }
        // Get field_uip_id value.
        if ($paragraph->hasField('field_uip_id')) {
          $variables['attributes']['id'][] = Html::getClass($paragraph->field_uip_id->value);
        }

        $view = Views::getView('articles_block');
        $view->setDisplay('block_articles');
        $view->display_handler->setOption('parent_entity', $paragraph);

        if ($paragraph->hasField('field_reference') && !$paragraph->get('field_reference')->isEmpty()) {
          $tids = $paragraph->get('field_reference')->getValue();
          // Clean array of tids selected.
          $tids = array_column($tids, 'target_id');
        }
        else {
          $tids = ['all'];
        }
        // Contextual relationship filter.
        $args = implode('+', $tids);
        $view->setArguments([$args]);

        if ($paragraph->hasField('field_uip_items') && !$paragraph->get('field_uip_items')->isEmpty()) {
          $items = $paragraph->field_uip_items->value;
          $view->setItemsPerPage($items);
          $view->setExposedInput([
            'items_per_page' => $items,
          ]);
        }
        $pager_type = 'some';
        // Show pager if it exists and is set.
        if ($paragraph->hasField('field_uip_pager')) {
          if ((int) $paragraph->field_uip_pager->value === 1) {
            $pager_type = 'full';
          }
        }

        $pager = $view->display_handler->getOption('pager');
        // IF show pager, change pager_type to 'full'.
        $pager['type'] = $pager_type;
        $view->display_handler->setOption('pager', $pager);

        $view->preExecute();
        $view->execute();
        $variables['content']['view'] = $view->render();

        // If we have more link checked and link provided, pass it.
        if ($paragraph->hasField('field_articles_more')) {
          $more = (int) $paragraph->field_articles_more->value === 1;
          if ($more === TRUE) {
            $variables['more'] = [
              '#type' => 'container',
              '#attributes' => [
                'class' => 'more-link',
              ],
            ];

            $view = View::load('articles');
            $default =& $view->getDisplay('default');

            if (!empty($more_path = $paragraph->get('field_articles_more_path')->getValue())) {
              $url = Url::fromUri($more_path[0]['uri']);
            }
            elseif ($view->getDisplay('page_articles')['display_options']['enabled'] === TRUE) {
              $url = Url::fromRoute('view.articles.page_articles');
            }
            if (isset($url)) {
              $variables['more']['btn'] = [
                '#type' => 'link',
                '#title' => 'View more ' . strtolower($default['display_options']['title']),
                '#url' => $url,
                '#attributes' => [
                  'class' => ['btn', 'btn-primary'],
                ],
              ];
            }
          }
        }
      }

      break;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function sitenow_articles_views_pre_render(ViewExecutable $view) {
  // Add replacement token for articles page path.
  $view->build_info['substitutions']['{{ sitenow_articles.path }}'] = _sitenow_articles_path_token_value();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_articles_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->get('view');
  if ($view->id() === 'articles_block') {
    if ($view->current_display === 'block_articles') {
      $exposed_input = $view->getExposedInput();
      if (isset($exposed_input["items_per_page"])) {
        $form["items_per_page"]["#options"] = [$exposed_input["items_per_page"] => $exposed_input["items_per_page"]];
        $form["#attributes"]["class"][] = 'hidden';
      }
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function sitenow_articles_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element["#paragraph_type"] === 'articles') {
    if (!empty($element['subform']['field_articles_more'])) {
      $parents_array = $element['subform']['#parents'];
      $parents = array_shift($parents_array) . '[' . implode('][', $parents_array) . ']';
      if (!empty($element['subform']['field_articles_more_path'])) {
        $element['subform']['field_articles_more_path']['#states'] = [
          'visible' => [
            ':input[name="' . $parents . '[field_articles_more][value]"]' => [
              'checked' => TRUE,
            ],
          ],
        ];
      }
    }
  }
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function sitenow_articles_inline_entity_form_table_fields_alter(array &$fields, array $context) {
  if ($context['field_name'] === 'field_contact_reference') {
    // Clean up, minimize the person IEF form.
    if (in_array('person', $context['allowed_bundles'])) {
      $fields['label']['label'] = t('Contact name');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_articles_preprocess_block(&$variables) {
  switch ($variables['elements']['#plugin_id']) {

    // @todo Move this to a more appropriate spot, if we may
    //   want to use the gallery image field for other content.
    //   https://github.com/uiowa/uiowa/issues/6287
    case 'field_block:node:article:field_gallery_images':
      $variables['attributes']['class'][] = 'media--square';
      $variables['attributes']['class'][] = 'photoswipe-gallery';

      break;

    case 'field_block:node:article:field_article_author':
    case 'field_block:node:article:field_article_source_link':
    case 'field_block:node:article:field_article_source_org':
    case 'galleryjumplink_block':
    case 'field_block:node:article:field_image_caption':
      $variables['attributes']['class'][] = 'article--meta';

      break;

    case 'field_block:node:article:field_article_subhead':
      $variables['attributes']['class'][] = 'element--light-intro';

      break;

    case 'field_block:node:article:field_contact_reference':
      $variables['attributes']['class'][] = 'article--meta article--meta__block';

      break;

    case 'field_block:node:article:body':
      if (sitenow_articles_narrow_is_enabled()) {
        $variables['attributes']['class'][] = 'block-margin__default--removed';
      }

      break;
  }
}

/**
 * Implements hook_token_info().
 */
function sitenow_articles_token_info(): array {
  $info = [];
  $info['types']['sitenow_articles'] = [
    'name' => t('SiteNow Articles'),
    'description' => t('Tokens for SiteNow Articles.'),
  ];
  $info['tokens']['sitenow_articles']['path'] = [
    'name' => 'SiteNow Articles path',
    'description' => 'A token to display the SiteNow Articles page path.',
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function sitenow_articles_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type === 'sitenow_articles') {

    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'sitenow_articles_path':
          $replacements[$original] = _sitenow_articles_path_token_value();
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Callback to get the SiteNow Articles view path.
 *
 * @todo Revisit how this is constructed.
 * https://github.com/uiowa/uiowa/issues/6286
 */
function _sitenow_articles_path_token_value() {

  // Load articles listing view.
  $view = Drupal::entityTypeManager()->getStorage('view')->load('articles');

  // Loop through displays except Master.
  $displays = $view->get('display');
  unset($displays['default']);
  foreach ($displays as $display_id => $display) {
    // If page display is not enabled, skip.
    if ($display_id !== 'page_articles') {
      continue;
    }

    // @todo Do we need to do anything besides this?
    return '/' . $display['display_options']['path'];
  }

  // @todo Is this appropriate when there is no value?
  return '';
}
