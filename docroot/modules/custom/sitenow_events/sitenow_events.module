<?php

/**
 * @file
 * Provides an event feed entity type.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;
use GuzzleHttp\Exception\RequestException;

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_events_preprocess_block(&$variables) {
  if ($variables['elements']['#plugin_id'] == 'inline_block:uiowa_events') {
    $variables['#attached']['library'][] = 'uids_base/events';

    /** @var \Drupal\Block\Entity\Block $block */
    $block = $variables['elements']['content']['#block_content'];

    $data = sitenow_events_load([
      'display_id' => 'events',
      'filters[department]' => $block->get('field_uiowa_events_department')->getString(),
      'filters[audiences]' => $block->get('field_uiowa_events_audiences')->getString(),
      'filters[interests]' => $block->get('field_uiowa_events_interests')->getString(),
      'filters[types]' => $block->get('field_uiowa_events_types')->getString(),
      'filters[keywords]' => $block->get('field_uiowa_events_keywords')->getString(),
      'filters[place]' => $block->get('field_uiowa_events_place')->getString(),
      'filters[startdate][value][date]' => date('m-d-Y', strtotime(date('d-m-Y'))),
      'filters[enddate][value][date]' => date('m-d-Y', strtotime(date('d-m-Y') . '+365 days')),
      'page' => 0,
      'items_per_page' => $block->get('field_collection_results')->value ?? 50,
    ]);

    if (isset($data['events'])) {
      $heading_size = $block->get('field_collection_heading_size')->getString() ?? 'h3';

      foreach ($data['events'] as $value) {
        // The API nests each event as an array.
        $event = $value['event'];
        $event['heading_size'] = $heading_size;

        $variables['content'][] = [
          '#theme' => 'sitenow_events_teaser',
          '#event' => $event,
        ];
      }
    }
    else {
      $variables['content'] = [
        '#markup' => '<div class="events-empty"><p>There are currently no events to display.</p></div>',
      ];
    }

    // If we have more link checked and link provided, pass it.
    if ($block->get('field_collection_more')->value == TRUE) {
      if ($uri = $block->get('field_collection_more_path')->uri) {
        $url = Url::fromUri($uri);
      }
      else {
        $url = Url::fromUri('//events.uiowa.edu');
      }

      $variables['content']['more'] = [
        '#type' => 'link',
        '#title' => 'View more events',
        '#url' => $url,
        '#attributes' => [
          'class' => ['more-link', 'bttn', 'bttn--primary', 'bttn--caps'],
        ],
      ];
    }
  }
}

/**
 * Load and return data from the content hub API.
 *
 * @param array $params
 *   Optional list of parameters for our API call.
 * @param array $args
 *   Required array of arguments for our API call. The args will be assembled
 *   in array order.
 * @param bool $cache
 *   Boolean to determine if we cache the request.
 *
 * @return array
 *   An array of data.
 */
function sitenow_events_load(array $params = ['display_id' => 'events'], array $args = ['views', 'event_instances_api.json'], $cache = TRUE) {
  $config = \Drupal::config('sitenow_events.settings');
  $endpoint = $config->get('base_endpoint');

  // Append args to the $endpoint.
  $endpoint = $endpoint . implode('/', $args);

  // The content hub API does not work with encoded parameters so we decode it.
  if (!empty($params)) {
    $query = UrlHelper::buildQuery($params);
    $query = urldecode($query);
    $endpoint = "{$endpoint}?{$query}";
  }

  if ($cached = \Drupal::cache('uievents')->get($endpoint)) {
    $data = $cached->data;
  }
  else {
    try {
      $request = \Drupal::httpClient()->get($endpoint);
    }
    catch (RequestException $e) {
      watchdog_exception('sitenow_events', $e);
    }

    if (isset($request)) {
      $data = json_decode($request->getBody()->getContents(), TRUE);

      // Create a cache item set to 300 seconds (5 minutes).
      if ($cache !== FALSE) {
        $request_time = \Drupal::time()->getRequestTime();
        \Drupal::cache('uievents')->set($endpoint, $data, $request_time + 300);
      }
    }
    else {
      $data = [];
    }

  }

  return $data;
}

/**
 * Implements hook_theme().
 */
function sitenow_events_theme($existing, $type, $theme, $path) {
  return [
    'sitenow_events_teaser' => [
      'path' => $path,
      'template' => 'templates/sitenow-events-teaser',
      'file' => 'includes/sitenow_events.teaser.inc',
      'variables' => ['event' => NULL],
    ],
    'sitenow_events_single_event' => [
      'path' => $path,
      'template' => 'templates/sitenow-events-single-event',
      'file' => 'includes/sitenow_events.single_event.inc',
      'variables' => ['data' => NULL],
    ],
  ];
}

/**
 * Return a human-readable date string from an event instance.
 *
 * @param array $event_instance
 *   The event instance array.
 *
 * @return string
 *   The human-readable date string.
 */
function sitenow_events_format_instance(array $event_instance) {
  if ($event_instance['all_day']) {
    $start = date('l, F j, Y', strtotime($event_instance['start']));
  }
  else {
    $start = date('l, F j, Y, g:ia', strtotime($event_instance['start']));
  }

  if (!empty($event_instance['end'])) {
    if ($event_instance['start'] == $event_instance['end']) {
      $end = NULL;
    }
    else {
      $start_day = date('M d Y', strtotime($event_instance['start']));
      $end_day = date('M d Y', strtotime($event_instance['end']));

      if ($start_day == $end_day && $event_instance['all_day'] == FALSE) {
        $end = date('g:ia', strtotime($event_instance['end']));
      }
      elseif ($start_day == $end_day && $event_instance['all_day'] == TRUE) {
        $end = date('g:ia', strtotime($event_instance['end'])) . ' (all day)';
      }
      else {
        $end = date('l, F j, Y, g:ia', strtotime($event_instance['end']));
      }
    }
  }

  return isset($end) ? "{$start} to {$end}" : $start;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * @todo: Remove this after sitenow_events_paragraph is uninstalled.
 */
function sitenow_events_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'events') {
    if (!empty($element['subform']['field_events_more'])) {
      $parents_array = $element['subform']['#parents'];
      $parents = array_shift($parents_array) . '[' . implode('][', $parents_array) . ']';
      if (!empty($element['subform']['field_events_more_path'])) {
        $element['subform']['field_events_more_path']['#states'] = [
          'visible' => [
            ':input[name="' . $parents . '[field_events_more][value]"]' => [
              'checked' => TRUE,
            ],
          ],
        ];
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function sitenow_events_form_layout_builder_add_block_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['settings']['block_form']['#process'][] = '_sitenow_events_process_element';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function sitenow_events_form_layout_builder_update_block_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['settings']['block_form']['#process'][] = '_sitenow_events_process_element';
}

/**
 * Custom process block form elements.
 *
 * @param array $element
 *   The current block element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 *
 * @return array
 *   The processed block element.
 */
function _sitenow_events_process_element(array $element, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionComponent $component */
  $component = $form_state->getFormObject()->getCurrentComponent();
  $block = $component->getPlugin();

  if ($block->getPluginId() == 'inline_block:uiowa_events') {
    if (isset($element['field_collection_more_path'])) {
      $element['field_collection_more_path']['#states'] = [
        'visible' => [
          ':input[name="settings[block_form][field_collection_more][value]"]' => [
            'checked' => TRUE,
          ],
        ],
      ];
    }
  }

  return $element;
}

/**
 * Set dynamic allowed values for multiple fields.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _sitenow_events_get_filter_field_options(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable = TRUE) {
  $options = [];

  switch ($definition->getName()) {
    case 'field_events_department':
    case 'field_uiowa_events_department':
      $data = sitenow_events_load(['display_id' => 'filters'], ['views', 'filters_api.json']);
      $tree = _sitenow_events_build_options_tree($data['departments']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_audiences':
    case 'field_uiowa_events_audiences':
      $data = sitenow_events_load(['display_id' => 'filters'], ['views', 'filters_api.json']);
      $tree = _sitenow_events_build_options_tree($data['event_audience']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_gen_interests':
    case 'field_uiowa_events_interests':
      $data = sitenow_events_load(['display_id' => 'filters'], ['views', 'filters_api.json']);
      $tree = _sitenow_events_build_options_tree($data['event_general_interest']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_event_types':
    case 'field_uiowa_events_types':
      $data = sitenow_events_load(['display_id' => 'filters'], ['views', 'filters_api.json']);
      $tree = _sitenow_events_build_options_tree($data['event_types']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_keywords':
    case 'field_uiowa_events_keywords':
      $data = sitenow_events_load(['display_id' => 'keywords'], ['views', 'filters_api.json']);

      $options = [];

      foreach ($data['keywords'] as $keyword) {
        $options[$keyword['id']] = $keyword['name'];
      }

      break;

    case 'field_events_place':
    case 'field_uiowa_events_place':
      $data = sitenow_events_load(['display_id' => 'places'], ['views', 'places_api.json']);
      $options = [];

      foreach ($data['places'] as $place) {
        // API double-nests places for some reason.
        $place = $place['place'];
        $options[$place['id']] = $place['name'];
      }

      break;

  }

  return $options;
}

/**
 * Helper function to build the options tree.
 *
 * @param array $data
 *   Array of data to be sorted into a tree.
 * @param int $parent
 *   Stores the current id.
 *
 * @return array
 *   Returns an associative array options tree.
 *
 * @todo: Replace with an API endpoint that outputs an entire vocabulary tree.
 */
function _sitenow_events_build_options_tree(array $data, $parent = 0) {
  $tree = [];

  foreach ($data as $d) {
    if ($d['parent_id'] == $parent) {
      $children = _sitenow_events_build_options_tree($data, $d['id']);

      if (!empty($children)) {
        $d['_children'] = $children;
      }
      $tree[] = $d;
    }
  }

  return $tree;
}

/**
 * Helper function to output the options array.
 *
 * @param array $tree
 *   Array of tree data to be printed.
 * @param int $r
 *   Basic counter.
 * @param int $p
 *   Parent id.
 * @param array $options
 *   Options array to be passed recursively.
 *
 * @return array
 *   Returns options with children prefixed with dashes.
 *
 * @todo: Replace with an API endpoint that outputs an entire vocabulary tree.
 */
function _sitenow_events_build_options_list(array $tree, $r = 0, $p = NULL, array &$options = []) {
  foreach ($tree as $t) {
    $dash = ($t['parent_id'] == 0) ? '' : str_repeat('-', $r) . ' ';
    $options[$t['id']] = $dash . $t['name'];

    if ($t['parent_id'] == $p) {
      // Reset $r.
      $r = 0;
    }

    if (isset($t['_children'])) {
      _sitenow_events_build_options_list($t['_children'], ++$r, $t['parent_id'], $options);
    }
  }

  return $options;
}
