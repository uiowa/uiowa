<?php

/**
 * @file
 * Provides an event feed entity type.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Component\Utility\Xss;
use GuzzleHttp\Exception\RequestException;

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_events_preprocess_block(&$variables) {
  if ($variables['elements']['#plugin_id'] == 'inline_block:uiowa_events') {
    $variables['#attached']['library'][] = 'uids_base/events';

    /** @var \Drupal\Block\Entity\Block $block */
    $block = $variables['elements']['content']['#block_content'];
    $start = date('d-m-Y');

    $events = sitenow_events_load([
      'display_id' => 'events',
      'filters[department]' => $block->get('field_uiowa_events_department')->value,
      'filters[audiences]' => $block->get('field_uiowa_events_audiences')->value,
      'filters[interests]' => $block->get('field_uiowa_events_interests')->value,
      'filters[types]' => $block->get('field_uiowa_events_types')->value,
      'filters[keywords]' => $block->get('field_uiowa_events_keywords')->value,
      'filters[startdate][value][date]' => date('m-d-Y', strtotime($start)),
      'filters[enddate][value][date]' => date('m-d-Y', strtotime($start . '+365 days')),
      'page' => 0,
      'items_per_page' => $block->get('field_uiowa_events_results')->value ?? 50,
    ]);

    if (!empty($events['events'])) {
      foreach ($events['events'] as $e) {
        $variables['content'][] = [
          '#theme' => 'sitenow_events_teaser',
          '#event' => $e,
        ];
      }
    }
    else {
      $variables['content'] = [
        '#markup' => '<div class="events-empty"><p>There are currently no events to display.</p></div>',
      ];
    }

    // If we have more link checked and link provided, pass it.
    if ($block->get('field_uiowa_events_display_more')->value == TRUE) {
      if ($uri = $block->get('field_uiowa_events_more_link')->uri) {
        $url = Url::fromUri($uri);
      }
      else {
        $url = Url::fromUri('//events.uiowa.edu');
      }

      $variables['content']['more'] = [
        '#type' => 'link',
        '#title' => 'View more events',
        '#url' => $url,
        '#attributes' => [
          'class' => ['more-link', 'bttn', 'bttn--primary', 'bttn--caps'],
        ],
      ];
    }
  }
}

/**
 * Load and return events from events api.
 *
 * @param array $params
 *   Optional list of parameters for our api call.
 * @param array $args
 *   Required array of arguments for our api call. The args will be assembled
 *   in array order. See: https://content.uiowa.edu/events-api for details.
 * @param bool $cache
 *   Boolean to determine if we cache the request.
 *
 * @return mixed
 *   A request object.
 */
function sitenow_events_load(array $params = ['display_id' => 'events'], array $args = ['views', 'event_instances_api.json'], $cache = TRUE) {
  // Endpoint base.
  $config = \Drupal::config('sitenow_events.settings');
  $endpoint = $config->get('sitenow_events.base_endpoint');
  // Append args to the $endpoint.
  $endpoint = $endpoint . implode('/', $args);
  // If we have parameters.
  if (!empty($params)) {
    // Build an encoded query string from the params.
    $query = _build_http_query($params);
    $query = '?' . urldecode($query);
    // Build the endpoint.
    $endpoint = $endpoint . $query;
  }

  if ($events = \Drupal::cache('uievents')->get($endpoint)) {
    $events = $events->data;
    $events['cache'] = 'hit: ' . $endpoint;
  }
  else {
    // Create a request object.
    try {
      $request = \Drupal::httpClient()->get($endpoint, ['headers' => ['Accept' => 'text/plain']]);
      $data = $request->getBody();
    }
    catch (RequestException $e) {
      watchdog_exception('sitenow_events', $e);
    }
    // Decode the json.
    $json = json_decode($data, TRUE);
    // Return an array of events with optional params.
    $events = sitenow_events_prepare_data($json);
    $events['cache'] = 'miss';

    // If cache is not set to TRUE.
    if ($cache !== FALSE) {
      // Create a cache item set to 15 minutes.
      $request_time = \Drupal::time()->getRequestTime();
      \Drupal::cache('uievents')->set($endpoint, $events, $request_time + (60 * 15));
    }
  }
  // Return an array of events with optional params.
  return $events;
}

/**
 * Parse and prepare data.
 *
 * @param array $events
 *   An array of events.
 *
 * @return array
 *   A request object.
 */
function sitenow_events_prepare_data(array $events) {
  if (empty($events)) {
    // We need to set the events array key to prevent undefined indices.
    $events['events'] = [];
  }
  else {
    // Single events return differently so tweak the events array structure.
    if (!isset($events['events'])) {
      $event = $events;
      $events = [];
      $events['events'][] = ['event' => $event];
    }

    $data = [];

    foreach ($events['events'] as $event) {
      $new_event = $event['event'];

      // Set the instance_id for rendering.
      if (isset($event['event']['id'])) {
        $new_event['instance_id'] = $event['event']['id'];
      }

      // Set the accessibility statement for rendering.
      // These fields are required from the source.
      $new_event['accessibility_statement'] = t('Individuals with disabilities are encouraged to attend all University of Iowaâ€“sponsored events. If you are a person with a disability who requires a reasonable accommodation in order to participate in this program, please contact @c_name in advance at @c_ph or @c_email.', [
        '@c_name' => $event['event']['contact_name'],
        '@c_ph' => $event['event']['contact_phone'],
        '@c_email' => $event['event']['contact_email'],
      ]);

      // Set description for rendering.
      if (isset($event['event']['description'])) {
        $new_event['description'] = Xss::filterAdmin($event['event']['description']);
        $new_event['description_text'] = Xss::filter($event['event']['description_text']);
      }

      // Set photo_url for rendering.
      if (isset($event['event']['media'])) {
        $new_event['photo_url'] = $event['event']['media'][0]['medium_image'];
      }

      array_push($data, $new_event);
    }
    $events['events'] = $data;
  }

  return $events;
}

/**
 * Get values from Event Feed.
 *
 * @param object $events_instance
 *   An event feed object.
 *
 * @return array
 *   A request object.
 */
function sitenow_events_instance_values($events_instance) {
  $instance_values = [
    'department' => NULL,
    'audiences' => NULL,
    'event_types' => NULL,
    'interests' => NULL,
    'keywords' => NULL,
    'results' => 50,
    'more' => FALSE,
    'more_path' => NULL,
  ];

  if ($events_instance) {
    if (!empty($results = $events_instance->get('field_events_results')->getValue())) {
      $instance_values['results'] = $results[0]['value'];
    }

    if (!empty($more = $events_instance->get('field_events_more')->getValue())) {
      $instance_values['more'] = $more;
    }

    if (!empty($more_path = $events_instance->get('field_events_more_path')->getValue())) {
      $instance_values['more_path'] = $more_path;
    }

    if (!empty($department_value = $events_instance->get('field_events_department')->getValue())) {
      $instance_values['department'] = $department_value[0]['value'];
    }

    if (!empty($audience_values = $events_instance->get('field_events_audiences'))) {
      foreach ($audience_values->getValue() as $item) {
        $instance_values['audiences'][$item['value']] = $item['value'];
      }
    }

    if (!empty($interests_values = $events_instance->get('field_events_gen_interests'))) {
      foreach ($interests_values->getValue() as $item) {
        $instance_values['interests'][$item['value']] = $item['value'];
      }
    }

    if (!empty($event_types_values = $events_instance->get('field_events_event_types'))) {
      foreach ($event_types_values->getValue() as $item) {
        $instance_values['event_types'][$item['value']] = $item['value'];
      }
    }

    if (!empty($keywords_values = $events_instance->get('field_events_keywords'))) {
      foreach ($keywords_values->getValue() as $item) {
        $instance_values['$keywords'][$item['value']] = $item['value'];
      }
    }
  }

  return $instance_values;
}

/**
 * Implements hook_theme().
 */
function sitenow_events_theme($existing, $type, $theme, $path) {
  return [
    'sitenow_events_teaser' => [
      'path' => $path,
      'template' => 'templates/sitenow-events-teaser',
      'file' => 'includes/sitenow_events.teaser.inc',
      'variables' => ['event' => NULL],
    ],
    'sitenow_events_single_event' => [
      'path' => $path,
      'template' => 'templates/sitenow-events-single-event',
      'file' => 'includes/sitenow_events.single_event.inc',
      'variables' => ['data' => NULL],
    ],
  ];
}

/**
 * Return a human-readable date string from an event instance.
 *
 * @param array $event_instance
 *   The event instance array.
 *
 * @return string
 *   The human-readable date string.
 */
function sitenow_events_format_instance(array $event_instance) {
  if ($event_instance['all_day']) {
    $start = date('l, F j, Y', strtotime($event_instance['start']));
  }
  else {
    $start = date('l, F j, Y, g:ia', strtotime($event_instance['start']));
  }

  if (!empty($event_instance['end'])) {
    if ($event_instance['start'] == $event_instance['end']) {
      $end = NULL;
    }
    else {
      $start_day = date('M d Y', strtotime($event_instance['start']));
      $end_day = date('M d Y', strtotime($event_instance['end']));

      if ($start_day == $end_day) {
        $end = date('g:ia', strtotime($event_instance['end']));
      }
      else {
        $end = date('l, F j, Y, g:ia', strtotime($event_instance['end']));
      }
    }
  }

  return isset($end) ? "{$start} to {$end}" : $start;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function sitenow_events_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'events') {
    if (!empty($element['subform']['field_events_more'])) {
      $parents_array = $element['subform']['#parents'];
      $parents = array_shift($parents_array) . '[' . implode('][', $parents_array) . ']';
      if (!empty($element['subform']['field_events_more_path'])) {
        $element['subform']['field_events_more_path']['#states'] = [
          'visible' => [
            ':input[name="' . $parents . '[field_events_more][value]"]' => [
              'checked' => TRUE,
            ],
          ],
        ];
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function sitenow_events_form_layout_builder_add_block_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['settings']['block_form']['#process'][] = '_sitenow_events_process_element';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function sitenow_events_form_layout_builder_update_block_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['settings']['block_form']['#process'][] = '_sitenow_events_process_element';
}

/**
 * Custom process block form elements.
 *
 * @param array $element
 *   The current block element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 *
 * @return array
 *   The processed block element.
 */
function _sitenow_events_process_element(array $element, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionComponent $component */
  $component = $form_state->getFormObject()->getCurrentComponent();
  $block = $component->getPlugin();

  if ($block->getPluginId() == 'inline_block:uiowa_events') {
    if (isset($element['field_uiowa_events_more_link'])) {
      $element['field_uiowa_events_more_link']['#states'] = [
        'visible' => [
          ':input[name="settings[block_form][field_uiowa_events_display_more][value]"]' => [
            'checked' => TRUE,
          ],
        ],
      ];
    }
  }

  return $element;
}

/**
 * Set dynamic allowed values for multiple fields.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _sitenow_events_get_filter_field_options(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable = TRUE) {
  $filter_options = [];

  $endpoints = [
    \Drupal::config('sitenow_events.settings')
      ->get('sitenow_events.filters_endpoint'),
    \Drupal::config('sitenow_events.settings')
      ->get('sitenow_events.keywords_endpoint'),
  ];

  foreach ($endpoints as $endpoint) {
    try {
      $response = \Drupal::httpClient()
        ->get($endpoint, ['headers' => ['Accept' => 'text/plain']]);
      $data = (string) $response->getBody();
      if (empty($data)) {
        \Drupal::messenger()->addError(t('Empty response.'));
      }
      else {
        $results = json_decode($data, TRUE);
      }
    }
    catch (RequestException $e) {
      watchdog_exception('sitenow_events', $e);
    }

    if (!empty($results)) {
      $forest = [];
      // Build a parent/children tree for each filter.
      foreach ($results as $filter => $values) {
        $forest[$filter] = _build_options_tree($values);
      }
      // Output a formatted options array for each filter.
      foreach ($forest as $filter => $tree) {
        $filter_options[$filter] = _build_options_list($tree);
      }
    }
  }

  // Sort the options.
  ksort($filter_options);

  $options = ['0' => 'None'];

  switch ($definition->getName()) {
    case 'field_events_department':
    case 'field_uiowa_events_department':
      if (isset($filter_options['departments'])) {
        $options = $filter_options['departments'];
      }
      break;

    case 'field_events_audiences':
    case 'field_uiowa_events_audiences':
      if (isset($filter_options['event_audience'])) {
        $options = $filter_options['event_audience'];
      }
      break;

    case 'field_events_gen_interests':
    case 'field_uiowa_events_interests':
      if (isset($filter_options['event_general_interest'])) {
        $options = $filter_options['event_general_interest'];
      }
      break;

    case 'field_events_event_types':
    case 'field_uiowa_events_types':
      if (isset($filter_options['event_types'])) {
        $options = $filter_options['event_types'];
      }
      break;

    case 'field_events_keywords':
    case 'field_uiowa_events_keywords':
      if (isset($filter_options['keywords'])) {
        $options = $filter_options['keywords'];
      }
      break;

    case 'field_events_places':
    case 'field_uiowa_events_places':
      if (isset($filter_options['places'])) {
        $options = $filter_options['places'];
      }
      break;

  }

  return $options;
}

/**
 * Helper function to build the options tree.
 *
 * @param array $data
 *   Array of data to be sorted into a tree.
 * @param int $parent
 *   Stores the current id.
 *
 * @return array
 *   Returns an associative array options tree.
 */
function _build_options_tree(array $data, $parent = 0) {
  $tree = [];
  foreach ($data as $d) {
    if ($d['parent_id'] == $parent) {
      $children = _build_options_tree($data, $d['id']);
      // Set a trivial key.
      if (!empty($children)) {
        $d['_children'] = $children;
      }
      $tree[] = $d;
    }
  }
  return $tree;
}

/**
 * Helper function to output the options array.
 *
 * @param array $tree
 *   Array of tree data to be printed.
 * @param int $r
 *   Basic counter.
 * @param int $p
 *   Parent id.
 * @param array $options
 *   Options array to be passed recursively.
 *
 * @return array
 *   Returns options with children prefixed with dashes.
 */
function _build_options_list(array $tree, $r = 0, $p = NULL, array &$options = []) {
  foreach ($tree as $t) {
    $dash = ($t['parent_id'] == 0) ? '' : str_repeat('-', $r) . ' ';
    $options[$t['id']] = $dash . $t['name'];
    if ($t['parent_id'] == $p) {
      // Reset $r.
      $r = 0;
    }
    if (isset($t['_children'])) {
      _build_options_list($t['_children'], ++$r, $t['parent_id'], $options);
    }
  }
  return $options;
}

/**
 * Helper function to build an http query string.
 *
 * @param array $query
 *   Key value pairs to be used in the query.
 *
 * @return string
 *   http query string.
 *
 * @see sitenow_events_load()
 */
function _build_http_query(array $query) {
  $query_array = [];
  // Sort the keys of the $params array. This ensures the cache_id.
  ksort($query);
  foreach ($query as $param_name => $param_value) {
    // Only include params that are not empty.
    if (!empty($param_value)) {
      // If $param_value is an array assume it's a filter.
      // Multivalued filter items should be comma separated.
      if (is_array($param_value)) {
        // Sort the values to ensure cache_id.
        sort($param_value);
        $v = '';
        $end = end($param_value);
        // Construct multivalued array items to be comma separated stings.
        foreach ($param_value as $filter_value) {
          // If it's the last value then we don't need a comma.
          if ($filter_value == $end) {
            $v .= urlencode($filter_value);
            // When we are done add the param to the query_array.
            $query_array[] = urlencode($param_name) . '=' . urlencode($v);
          }
          // Otherwise add a comma and continue looping.
          else {
            $v .= urlencode($filter_value) . ',';
          }
        }
      }
      else {
        $query_array[] = urlencode($param_name) . '=' . urlencode($param_value);
      }
    }
  }
  return implode('&', $query_array);
}
