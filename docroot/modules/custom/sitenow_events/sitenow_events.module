<?php

/**
 * @file
 * Provides an event feed entity type.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\uiowa_core\HeadlineHelper;
use GuzzleHttp\Exception\RequestException;

/**
 * Implements hook_form_alter().
 */
function sitenow_events_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_event_form':
    case 'node_event_edit_form':
      _sitenow_node_form_defaults($form, $form_state);
      array_unshift($form['actions']['submit']['#submit'], '_sitenow_events_form_submit');
      $form['field_event_category']['#group'] = 'node_relations';
      if (isset($form['field_event_hide'])) {
        // Set field_event_hide to options group (promotion options).
        $form['field_event_hide']['#group'] = 'options';
      }
      $form['field_event_series_link_direct']['#states'] = [
        'visible' => [
          ':input[name="field_event_series_link[0][uri]"]' => ['filled' => TRUE],
        ],
      ];
      break;

  }
}

/**
 * Custom submit handler for node event forms.
 */
function _sitenow_events_form_submit(array &$form, FormStateInterface $form_state) {
  // Don't save event location if only country is set.
  $event_location = $form_state->getValue('field_event_location');
  if (!is_null($event_location)) {
    foreach ($event_location as $delta => $location) {
      if (isset($location['address'])) {
        $has_info = FALSE;
        // Loop through all the details of the address to
        // check if any of them have been set besides the
        // country.
        foreach ($location['address'] as $key => $details) {
          if ($key === 'country_code') {
            continue;
          }
          // If we find a non-empty value, we can stop looping.
          if (!empty($details)) {
            $has_info = TRUE;
            break;
          }
        }
        // If no other fields have been set, then unset the address.
        if (!$has_info) {
          // Set country code to empty string.
          $form_state->setValue([
            'field_event_location',
            $delta,
            'address',
            'country_code',
          ], '');
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_events_preprocess_block(&$variables) {

  switch ($variables['elements']['#plugin_id']) {
    case 'inline_block:uiowa_events':
      // This case intentionally falls through to the next case.
      /** @var \Drupal\Block\Entity\Block $block */
      $block = $variables['elements']['content']['#block_content'];

      // Set custom time-based cache tag to clear on a regular basis.
      $variables['#cache']['tags'][] = 'time:hourly';
      $variables['#cache']['max-age'] = 60;

      // Defaults to upcoming.
      $display_id = 'events';
      $start = date('m-d-Y', strtotime(date('d-m-Y') . 'now'));
      $end = date('m-d-Y', strtotime(date('d-m-Y') . '+365 days'));
      if ($block->get('field_uiowa_events_past')->value == FALSE &&
        // If we have a relative date that translates properly, and is after
        // the start date, then replace the end date.
        $rel_date = $block->get('field_uiowa_events_relative_date')->value) {
        // If we do have an operator at the beginning, remove it,
        // and add a + to properly format.
        preg_replace('|[+-]|', '', $rel_date);
        $rel_date = '+' . $rel_date;
        if ($date = date('m-d-Y', strtotime(date('d-m-Y') . $rel_date))) {
          if ($date > $start) {
            $end = $date;
          }
        }
      }

      // If we're fetching past events, set the defaults appropriately.
      if ($block->get('field_uiowa_events_past')->value == TRUE) {
        $display_id = 'past';
        $start = date('m-d-Y', strtotime(date('d-m-Y') . '-365 days'));
        $end = date('m-d-Y', strtotime(date('d-m-Y') . 'yesterday'));
        // If we have a relative date that translates properly, and is before
        // the end date, then replace the start date.
        if ($rel_date = $block->get('field_uiowa_events_relative_date')->value) {
          // If we do have an operator at the beginning, remove it,
          // and add a - to properly format.
          preg_replace('|[+-]|', '', $rel_date);
          $rel_date = '-' . $rel_date;
          if ($date = date('m-d-Y', strtotime(date('d-m-Y') . $rel_date))) {
            if ($date < $end) {
              $start = $date;
            }
          }
        }
      }

      // Initialize some of our parameters.
      $batch_size = $block->get('field_uiowa_events_items_page')->value ?? 50;
      $page = 0;
      // Set to cache, and if it's past events and not upcoming, cache for
      // a day instead of 5 minutes.
      $cache = TRUE;
      // @todo Determine desirable cache times for both events and update. Thinking
      //   is that past events likely won't get updated very often, and so are
      //   safer to cache for extended periods of time.
      $cache_time = ($block->get('field_uiowa_events_past')->value) ? 86400 : 300;
      $events_args = [
        'display_id' => $display_id,
        'filters[department]' => $block->get('field_uiowa_events_department')->getString(),
        'filters[audiences]' => $block->get('field_uiowa_events_audiences')->getString(),
        'filters[interests]' => $block->get('field_uiowa_events_interests')->getString(),
        'filters[types]' => $block->get('field_uiowa_events_types')->getString(),
        'filters[keywords]' => $block->get('field_uiowa_events_keywords')->getString(),
        'filters[place]' => $block->get('field_uiowa_events_place')->getString(),
        'filters[startdate][value][date]' => $start,
        'filters[enddate][value][date]' => $end,
        'page' => $page,
        'items_per_page' => $batch_size,
      ];
      // Fetch the first batch of data.
      $data = sitenow_events_load($events_args, $cache, $cache_time);
      $num_fetched = $batch_size;
      // @todo Account for a field_collection_results of 0 (unlimited)
      //   or other "many results" situations.
      while ($num_fetched < $block->get('field_collection_results')->value) {
        // If the page + 1 (because it is zero-indexed) is greater than or
        // equal to the total number of pages of results, then we should
        // exit out of our while loop. No more data to collect.
        if ($page + 1 >= $data['page']['total']) {
          break;
        }
        // Increment our page and fetch the next batch of results.
        $events_args['page'] = ++$page;

        // @todo Check that we actually need to fetch more than one page
        //   of results, so we're not always fetching all data. Maybe this
        //   can be tied into the pager, so we're only fetching the page
        //   of data we're interested at the time to get around this.
        $new_data = sitenow_events_load($events_args, $cache, $cache_time);
        // Append the new results onto our existing data frame.
        foreach ($new_data['events'] as $event) {
          // @todo Separate these into pages of events, which could then be
          //   pulled and updated on demand, however it gets determined that
          //   should happen. Eg, only load first two pages but we know there
          //   are 10 pages...When another page is needed, pull it and update.
          $data['events'][] = $event;
        }
        $num_fetched += $block->get('field_uiowa_events_items_page')->value ?? 50;
      }

      if (isset($data['events'])) {
        // Get block layout builder styles if they exist.
        if (isset($variables['elements']['#attributes']['class']) && !empty($variables['elements']['#attributes']['class'])) {
          $parent_lb_styles = $variables['elements']['#attributes']['class'];
          $parent_lb_styles[] = 'list-item';
        }

        if ($block->hasField('field_uiowa_headline')) {
          $headline_fields = $block->get('field_uiowa_headline')->getValue();
          foreach ($headline_fields as $headline_field) {
            // There isn't a headline, so set the children to this heading size.
            if (empty($headline_field['headline'])) {
              $heading_size = $headline_field['child_heading_size'];
            }
            else {
              $heading_size = HeadlineHelper::getHeadingSizeUp($headline_field['heading_size']);
            }
          }
        }

        foreach ($data['events'] as $value) {
          // The API nests each event as an array.
          $event = $value['event'];
          $event['heading_size'] = $heading_size ?? 'h3';
          // Pass the parent block's layout_builder_styles to each item.
          if (!empty($parent_lb_styles)) {
            $event['parent_lb_styles'] = $parent_lb_styles;
          }
          $variables['content'][] = [
            '#theme' => 'sitenow_events_teaser',
            '#event' => $event,
          ];
        }
      }
      else {
        $variables['content']['no_results'] = [
          '#markup' => '<div class="events-empty"><p>There are currently no events to display.</p></div>',
        ];
      }

      // If we have more link checked and link provided, pass it.
      if ($block->get('field_collection_more')->value == TRUE) {
        if ($uri = $block->get('field_collection_more_path')->uri) {
          $url = Url::fromUri($uri);
        }
        else {
          $url = Url::fromUri('//events.uiowa.edu');
        }

        $variables['content']['more'] = [
          '#type' => 'link',
          '#title' => 'View more events',
          '#url' => $url,
          '#attributes' => [
            'class' => ['more-link', 'bttn', 'bttn--primary', 'bttn--caps'],
          ],
        ];
      }

    case 'views_block:events_list_block-card_list':
      if (isset($variables['attributes']['class'])) {
        // Unset classes meant for children.
        foreach ($variables['attributes']['class'] as $key => $style) {
          foreach ([
            'bg',
            'card',
            'media',
            'hide',
          ] as $check) {
            if (substr($style, 0, strlen($check)) === $check) {
              unset($variables['attributes']['class'][$key]);
            }
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function sitenow_events_preprocess_views_view_unformatted(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  if ($view->id() === 'events_list_block') {
    $rows = $variables['rows'];
    $style = $view->style_plugin;

    foreach ($rows as $id => $row) {
      // Need to get these values regardless of whether they are hidden or not.
      /** @var \Drupal\node\NodeInterface $node */
      $node = $row['content']['#node'];
      $nid = $node->get('nid')->value;
      $link_direct = $node->get('field_event_series_link_direct')->value;
      $source_link = $node->get('field_event_series_link')->uri;

      // If source link is set and link direct is checked, set $card_link_url to
      // source link. Otherwise, $card_link_url should be set to node link.
      if ($link_direct == 1
        && isset($source_link) && !empty($source_link)) {
        $card_link_url = $source_link;
      }
      else {
        $card_link_url = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid);
      }

      $card_meta = [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => [
          'class' => [
            'card__meta card__meta--icon',
          ],
        ],
      ];

      // Add virtual event information, if it exists.
      if ($style->getField($id, 'field_event_virtual')) {
        $card_meta['virtual'] = [
          '#prefix' => '<span class="card__icon"><span role="presentation" class="fas fa-laptop"></span></span>',
          '#markup' => $style->getField($id, 'field_event_virtual'),
        ];
      }

      // Add location information, if it exists.
      if ($style->getField($id, 'field_event_location')) {
        $card_meta['location'] = [
          '#markup' => '<div class="field--name-field-event-location"><span class="card__icon"><i role="presentation" class="fas fa-map-marker-alt" aria-hidden="true"></i></span>' . $style->getField($id, 'field_event_location') . '</div>',
        ];
      }

      // @todo Finish this logic to render the virtual details and location.
      $variables['rows'][$id]['card_options']['card_subtitle'] = $style->getField($id, 'field_event_when');
      $variables['rows'][$id]['card_options']['card_link_url'] = $card_link_url;
      $variables['rows'][$id]['card_options']['card_meta'] = \Drupal::service('renderer')->render($card_meta);
    }
  }
}

/**
 * Load and return data from the content hub API.
 *
 * @param array $params
 *   Optional list of parameters for our API call.
 * @param array $args
 *   Required array of arguments for our API call. The args will be assembled
 *   in array order.
 * @param bool $cache
 *   Boolean to determine if we cache the request.
 *
 * @return array
 *   An array of data.
 */
function sitenow_events_load(array $params = [
  'display_id' => 'events',
], array $args = [
  'views',
  'event_instances_api.json',
], $cache = TRUE, $cache_time = 300) {
  $config = \Drupal::config('sitenow_events.settings');
  $endpoint = $config->get('base_endpoint');

  // Append args to the $endpoint.
  $endpoint = $endpoint . implode('/', $args);

  // The content hub API does not work with encoded parameters so we decode it.
  if (!empty($params)) {
    $query = UrlHelper::buildQuery($params);
    $query = urldecode($query);
    $endpoint = "{$endpoint}?{$query}";
  }

  if ($cached = \Drupal::cache('uievents')->get($endpoint)) {
    $data = $cached->data;
  }
  else {
    try {
      $request = \Drupal::httpClient()->get($endpoint);
    }
    catch (RequestException $e) {
      watchdog_exception('sitenow_events', $e);
    }

    if (isset($request)) {
      $data = json_decode($request->getBody()->getContents(), TRUE);
      // Add the current date to track when the cache was last updated.
      $data['last_fetched'] = date('m-d-Y');

      // Create a cache item set to 5 minutes.
      if ($cache !== FALSE) {
        $request_time = \Drupal::time()->getRequestTime();
        \Drupal::cache('uievents')->set($endpoint, $data, $request_time + $cache_time);
      }
    }
    else {
      $data = [];
    }

  }

  return $data;
}

/**
 * Implements hook_theme().
 */
function sitenow_events_theme($existing, $type, $theme, $path) {
  return [
    'sitenow_events_teaser' => [
      'path' => $path,
      'template' => 'templates/sitenow-events-teaser',
      'file' => 'includes/sitenow_events.teaser.inc',
      'variables' => ['event' => NULL],
    ],
    'sitenow_events_single_event' => [
      'path' => $path,
      'template' => 'templates/sitenow-events-single-event',
      'file' => 'includes/sitenow_events.single_event.inc',
      'variables' => ['event' => NULL],
    ],
  ];
}

/**
 * Return a human-readable date string from an event instance.
 *
 * @param array $event_instance
 *   The event instance array.
 *
 * @return string
 *   The human-readable date string.
 */
function sitenow_events_format_instance(array $event_instance) {
  $start_date = strtotime($event_instance['start']);

  if (isset($event_instance['end'])) {
    $end_date = strtotime($event_instance['end']);
  }
  else {
    $end_date = $start_date;
  }

  $is_all_day = ($event_instance['all_day'] == TRUE);
  $is_same_day = date('Y-m-d', $start_date) == date('Y-m-d', $end_date);
  $is_same_time = date('g:ia', $start_date) == date('g:ia', $end_date);
  $is_same_month = $is_same_day || date('Y-m', $start_date) == date('Y-m', $end_date);
  $is_same_year = $is_same_day || $is_same_month || (date('Y', $start_date) == date('Y', $end_date));

  if ($is_same_day && $is_all_day) {
    $start = date('l, F j, Y', $start_date) . ' (all day)';
  }
  elseif ($is_same_day && !$is_all_day) {
    $start = date('l, F j, Y g:ia', $start_date);

    if (!$is_same_time) {
      $end = date('g:ia', $end_date);
    }
  }
  elseif (!$is_same_day && $is_all_day) {
    if ($is_same_month) {
      $start = date('l, F j', $start_date);
      $end = date('l, F j, Y', $end_date) . ' (all day)';
    }
    elseif ($is_same_year) {
      $start = date('l, F j', $start_date);
      $end = date('l, F j, Y', $end_date) . ' (all day)';
    }
    else {
      $start = date('l, F j, Y', $start_date);
      $end = date('l, F j, Y', $end_date) . ' (all day)';
    }
  }
  elseif (!$is_same_day & !$is_all_day) {
    if ($is_same_month) {
      $start = date('l, F j g:ia', $start_date);
      $end = date('l, F j, Y g:ia', $end_date);
    }
    elseif ($is_same_year) {
      $start = date('l, F j, g:ia', $start_date);
      $end = date('l, F j, Y g:ia', $end_date);
    }
    else {
      $start = date('l, F j, Y g:ia', $start_date);
      $end = date('l, F j, Y g:ia', $end_date);
    }
  }

  return isset($end) ? "{$start} to {$end}" : $start;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * @todo Remove this after sitenow_events_paragraph is uninstalled.
 */
function sitenow_events_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'events') {
    if (!empty($element['subform']['field_events_more'])) {
      $parents_array = $element['subform']['#parents'];
      $parents = array_shift($parents_array) . '[' . implode('][', $parents_array) . ']';
      if (!empty($element['subform']['field_events_more_path'])) {
        $element['subform']['field_events_more_path']['#states'] = [
          'visible' => [
            ':input[name="' . $parents . '[field_events_more][value]"]' => [
              'checked' => TRUE,
            ],
          ],
        ];
      }
    }
  }
}

/**
 * Set dynamic allowed values for multiple fields.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _sitenow_events_get_filter_field_options(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable = TRUE) {
  $options = [];

  switch ($definition->getName()) {
    case 'field_events_department':
    case 'field_uiowa_events_department':
      $data = sitenow_events_load([
        'display_id' => 'filters',
      ], [
        'views',
        'filters_api.json',
      ]);
      $tree = _sitenow_events_build_options_tree($data['departments']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_audiences':
    case 'field_uiowa_events_audiences':
      $data = sitenow_events_load([
        'display_id' => 'filters',
      ], [
        'views',
        'filters_api.json',
      ]);
      $tree = _sitenow_events_build_options_tree($data['event_audience']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_gen_interests':
    case 'field_uiowa_events_interests':
      $data = sitenow_events_load([
        'display_id' => 'filters',
      ], [
        'views',
        'filters_api.json',
      ]);
      $tree = _sitenow_events_build_options_tree($data['event_general_interest']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_event_types':
    case 'field_uiowa_events_types':
      $data = sitenow_events_load([
        'display_id' => 'filters',
      ], [
        'views',
        'filters_api.json',
      ]);
      $tree = _sitenow_events_build_options_tree($data['event_types']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_keywords':
    case 'field_uiowa_events_keywords':
      $data = sitenow_events_load([
        'display_id' => 'keywords',
      ], [
        'views',
        'filters_api.json',
      ]);

      $options = [];

      foreach ($data['keywords'] as $keyword) {
        $options[$keyword['id']] = $keyword['name'];
      }

      break;

    case 'field_events_place':
    case 'field_uiowa_events_place':
      $data = sitenow_events_load([
        'display_id' => 'places',
      ], [
        'views',
        'places_api.json',
      ]);
      $options = [];

      foreach ($data['places'] as $place) {
        // API double-nests places for some reason.
        $place = $place['place'];
        $options[$place['id']] = $place['name'];
      }

      break;

  }

  return $options;
}

/**
 * Helper function to build the options tree.
 *
 * @param array $data
 *   Array of data to be sorted into a tree.
 * @param int $parent
 *   Stores the current id.
 *
 * @return array
 *   Returns an associative array options tree.
 *
 * @todo https://github.com/uiowa/uiowa/issues/5028
 */
function _sitenow_events_build_options_tree(array $data, $parent = 0) {
  $tree = [];

  foreach ($data as $d) {
    if ($d['parent_id'] == $parent) {
      $children = _sitenow_events_build_options_tree($data, $d['id']);

      if (!empty($children)) {
        $d['_children'] = $children;
      }
      $tree[] = $d;
    }
  }

  return $tree;
}

/**
 * Helper function to output the options array.
 *
 * @param array $tree
 *   Array of tree data to be printed.
 * @param int $r
 *   Basic counter.
 * @param int $p
 *   Parent id.
 * @param array $options
 *   Options array to be passed recursively.
 *
 * @return array
 *   Return options with children prefixed with dashes.
 *
 * @todo https://github.com/uiowa/uiowa/issues/5028
 */
function _sitenow_events_build_options_list(array $tree, $r = 0, $p = NULL, array &$options = []) {
  foreach ($tree as $t) {
    $dash = ($t['parent_id'] == 0) ? '' : str_repeat('-', $r) . ' ';
    $options[$t['id']] = $dash . $t['name'];

    if ($t['parent_id'] == $p) {
      // Reset $r.
      $r = 0;
    }

    if (isset($t['_children'])) {
      _sitenow_events_build_options_list($t['_children'], ++$r, $t['parent_id'], $options);
    }
  }

  return $options;
}
