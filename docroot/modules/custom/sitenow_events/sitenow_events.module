<?php

/**
 * @file
 * Provides an event feed entity type.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Utility\Error;
use Drupal\sitenow_events\Entity\Event;
use Drupal\smart_trim\TruncateHTML;
use Drupal\uiowa_core\HeadlineHelper;
use Drupal\views\ViewExecutable;
use GuzzleHttp\Exception\RequestException;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function sitenow_events_entity_bundle_info_alter(array &$bundles) {
  if (\Drupal::config('config_split.config_split.event')->get('status') === TRUE && isset($bundles['node']['event'])) {
    $bundles['node']['event']['class'] = Event::class;
  }
}

/**
 * Implements hook_form_alter().
 */
function sitenow_events_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_event_form':
    case 'node_event_edit_form':
      _sitenow_node_form_defaults($form, $form_state);
      array_unshift($form['actions']['submit']['#submit'], '_sitenow_events_form_submit');

      if (isset($form['field_event_hide'])) {
        // Set field_event_hide to options group (promotion options).
        $form['field_event_hide']['#group'] = 'options';
      }

      $form['field_event_series_link_direct']['#states'] = [
        'visible' => [
          ':input[name="field_event_series_link[0][uri]"]' => ['filled' => TRUE],
        ],
      ];

      // Show/hide the location and virtual info fields
      // based on the attendance mode. Hybrid should display both.
      $form['field_event_location']['#states'] = [
        'visible' => [
          ':input[name="field_event_attendance_mode"]' => [
            ['value' => 'OfflineEventAttendanceMode'],
            ['value' => 'MixedEventAttendanceMode'],
          ],
        ],
      ];
      $form['field_event_virtual']['#states'] = [
        'visible' => [
          ':input[name="field_event_attendance_mode"]' => [
            ['value' => 'OnlineEventAttendanceMode'],
            ['value' => 'MixedEventAttendanceMode'],
          ],
        ],
      ];

      // Because person titles are constructed
      // in sitenow_people_entity_presave, there is no title for this
      // IEF widget to display. This changes the label using
      // the first and last name values.
      if (isset($form['field_event_performer']['widget']['entities'])) {
        $contacts = $form['field_event_performer']['widget']['entities'];

        // For each one that exists, make sre it is one of the integer entries,
        // which is actually an entity.
        foreach ($contacts as $key => $contact) {
          if (is_int($key) && $contact['#entity']->getType() === 'person') {

            // Then, get the strings of the first and last names.
            $first = $contact['#entity']
              ?->get('field_person_first_name')
              ?->value;
            $last = $contact['#entity']
              ?->get('field_person_last_name')
              ?->value;

            // Set entity label to the concatenation of the two strings.
            if (is_string($first) && is_string($last)) {
              $form['field_event_performer']['widget']['entities'][$key]['#label'] = $first . ' ' . $last;
            }
          }
        }
      }

      if (isset($form['field_event_category'])) {
        $form['field_event_category']['#group'] = 'node_relations';
      }

      // Customize address field labels.
      if (isset($form['field_event_location'])) {
        $form['field_event_location']['widget'][0]['address']['#after_build'][] = 'sitenow_events_customize_address';
      }

      break;

  }
}

/**
 * Implements template_preprocess_views_view().
 */
function sitenow_events_preprocess_views_view(&$variables) {
  // Check if the current view has a specific ID or display ID.
  if ($variables['view']->id() == 'events') {
    // Attach the library using the #attached property.
    $variables['#attached']['library'][] = 'uids_base/view-bef';
    $variables['#attached']['library'][] = 'uids_base/view-calendar';
  }
}

/**
 * Implements hook_views_pre_build().
 */
function sitenow_events_views_pre_build(ViewExecutable $view) {
  if ($view->id() == 'events' && $view->current_display == 'page_upcoming') {
    // Go through each of our filter display options
    // and change the exposed option to false if
    // it has not been selected to be displayed.
    $config = \Drupal::config('sitenow_events.settings');
    foreach ([
      'date_range' => 'field_event_when',
      'presenters' => 'field_event_performer_target_id_1',
      'attendance_required' => 'field_event_attendance_value',
      'attendance_mode' => 'field_event_attendance_mode_value',
      'category' => 'field_event_category_target_id',
    ] as $filter_option => $field_label) {
      if ($config->get("filter_display.{$filter_option}") == FALSE) {
        if ($filter_option === 'date_range') {
          $timestamp = strtotime('now');
          $filter = $view->display_handler->getHandler('filter', "{$field_label}_value");
          $filter->options['exposed'] = FALSE;
          // Needs a value if not exposed.
          $filter->value["value"] = date('m/d/Y', strtotime('+10 year', $timestamp));
          $filter = $view->display_handler->getHandler('filter', "{$field_label}_end_value");
          $filter->options['exposed'] = FALSE;
          // Needs a value if not exposed.
          $filter->value["value"] = date('m/d/Y', $timestamp);
          continue;
        }
        $filter = $view->display_handler->getHandler('filter', $field_label);
        $filter->options['exposed'] = FALSE;
      }
    }
  }
}

/**
 * Modify event addressfield company (organization) label.
 */
function sitenow_events_customize_address($element, $form_state) {
  $element['organization']['#title'] = t('Location name');
  return $element;
}

/**
 * Implements hook_entity_presave().
 */
function sitenow_events_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'event':
      // Check the selected attendance mode,
      // and if it is either in-person or online (not hybrid),
      // then remove the opposite location/virtual information.
      $attendance_mode = $entity->field_event_attendance_mode?->value;
      switch ($attendance_mode) {
        case 'OnlineEventAttendanceMode':
          foreach ($entity->field_event_location as $delta => $location) {
            // Set the country code to a blank string
            // to unset the full address.
            $entity->field_event_location->get($delta)?->set('country_code', '');
          }
          break;

        case 'OfflineEventAttendanceMode':
          foreach ($entity->field_event_virtual as $delta => $virtual) {
            $entity->field_event_virtual->get($delta)?->setValue([
              'title' => '',
              'uri' => '',
            ]);
          }
          break;

      }
      break;
  }
}

/**
 * Custom submit handler for node event forms.
 */
function _sitenow_events_form_submit(array &$form, FormStateInterface $form_state) {
  // Don't save event location if only country is set.
  $event_location = $form_state->getValue('field_event_location');
  if (!is_null($event_location)) {
    foreach ($event_location as $delta => $location) {
      if (isset($location['address'])) {
        $has_info = FALSE;
        // Loop through all the details of the address to
        // check if any of them have been set besides the
        // country.
        foreach ($location['address'] as $key => $details) {
          if ($key === 'country_code') {
            continue;
          }
          // If we find a non-empty value, we can stop looping.
          if (!empty($details)) {
            $has_info = TRUE;
            break;
          }
        }
        // If no other fields have been set, then unset the address.
        if (!$has_info) {
          // Set country code to empty string.
          $form_state->setValue([
            'field_event_location',
            $delta,
            'address',
            'country_code',
          ], '');
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_events_preprocess_page(&$variables) {
  $current_route = \Drupal::routeMatch();
  $route_name = $current_route->getRouteName();
  if ($route_name === 'view.events.page_upcoming') {
    // Get the current user.
    $user = \Drupal::currentUser();
    // Check for permission.
    if ($user->hasPermission('administer sitenow events') === TRUE) {
      $url = Url::fromRoute('sitenow_events.settings_form');
      $settings_link = Link::fromTextAndUrl(t('SiteNow Events'), $url)
        ->toString();
      $message_text = t('This upcoming events page can be configured here: @settings_link', [
        '@settings_link' => $settings_link,
      ]);
      \Drupal::messenger()->addStatus($message_text);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_events_preprocess_block(&$variables) {

  switch ($variables['elements']['#plugin_id']) {
    case 'field_block:node:event:field_event_location':
    case 'field_block:node:event:field_event_virtual':
    case 'field_block:node:event:field_event_series_link':
    case 'field_block:node:event:field_event_geolocation':
    case 'field_block:node:event:field_event_directions':
      uiowa_core_set_attributes($variables, [
        'block-margin__top',
      ]);
      break;

    case 'field_block:node:event:field_event_status':
      if (isset($variables['elements']['content'][0]['#markup'])) {
        uiowa_core_set_attributes($variables, 'element--inline');
        if ($variables['elements']['content'][0]['#markup'] === 'Scheduled') {
          uiowa_core_set_attributes($variables, 'sr-only');
        }
      }
      break;

    case 'field_block:node:event:field_event_attendance':
      if (isset($variables['elements']['content'][0]['#markup'])) {
        uiowa_core_set_attributes($variables, 'element--inline');
        if ($variables['elements']['content'][0]['#markup'] === 'No') {
          uiowa_core_set_attributes($variables, 'sr-only');
        }
      }
      break;

    case 'inline_block:uiowa_events':
      $variables['attributes']['class'][] = 'list-container';

      /** @var \Drupal\Block\Entity\Block $block */
      $block = $variables['elements']['content']['#block_content'];

      // Set custom time-based cache tag to clear on a regular basis.
      $variables['#cache']['tags'][] = 'time:hourly';
      $variables['#cache']['max-age'] = 60;

      // Get the sort and timeframe.
      $sort = $block
        ->get('field_uiowa_events_sort')
        ?->value;
      $timeframe = $block
        ->get('field_uiowa_events_timeframe')
        ?->value;

      // Set the $display_id based on the sort.
      $display_id = ($sort === 'DESC') ? 'past' : 'events';

      // Set the start to be null by default.
      $start = NULL;

      // Change start and end params based on query type.
      switch ($timeframe) {
        case 'date_range':
          $start = $block
            ->get('field_uiowa_events_date_range')[0]
            ?->value;
          $end = $block
            ->get('field_uiowa_events_date_range')[0]
            ?->end_value;
          break;

        case 'past':
          $start = strtotime('01-01-1970');
          $end = strtotime(date('d-m-Y') . ' yesterday');
          break;

        default:
          $end = strtotime('today');

          // Override the $display_id based on the sort.
          $display_id = ($sort === 'DESC') ? 'past_upcoming' : 'events_in_progress';
          break;
      }

      // Construct parameters to pass to sitenow_events_load().
      $parameters = [
        'display_id' => $display_id,
        'filters[department]' => $block->get('field_uiowa_events_department')->getString(),
        'filters[audiences]' => $block->get('field_uiowa_events_audiences')->getString(),
        'filters[interests]' => $block->get('field_uiowa_events_interests')->getString(),
        'filters[types]' => $block->get('field_uiowa_events_types')->getString(),
        'filters[keywords]' => $block->get('field_uiowa_events_keywords')->getString(),
        'filters[place]' => $block->get('field_uiowa_events_place')->getString(),
        'filters[enddate][value][date]' => date('m-d-Y', $end),
        'page' => 0,
        'items_per_page' => $block->get('field_collection_results')->value ?? 50,
      ];

      // Provide a start date filter parameter if it exists.
      if (!is_null($start)) {
        $parameters['filters[startdate][value][date]'] = date('m-d-Y', $start);
      }

      // Initial pull of data for most situations.
      $data = sitenow_events_load([$parameters]);
      static $element = 0;

      // If pager, create it and re-query data based on current page.
      $show_pager = (bool) $block->get('field_collection_pager')->getString();
      if ($show_pager && isset($data['page']['total_results'])) {
        $count = $data['page']['total_results'];
        $element++;
        /** @var \Drupal\Core\Pager\PagerManager $pager */
        $pager = \Drupal::service('pager.manager');
        $current = $pager->createPager($count, $block->get('field_collection_results')->value, $element)->getCurrentPage();
        if ($current != $parameters['page']) {
          $parameters['page'] = $current;
          $data = sitenow_events_load([$parameters]);
        }
      }

      if (isset($data['events'])) {

        // Construct individual event headings.
        if ($block->hasField('field_uiowa_headline')) {
          $headline_fields = $block->get('field_uiowa_headline')->getValue();
          foreach ($headline_fields as $headline_field) {
            // There isn't a headline, so set the children to this heading size.
            if (empty($headline_field['headline'])) {
              $heading_size = $headline_field['child_heading_size'];
            }
            else {
              $heading_size = HeadlineHelper::getHeadingSizeUp($headline_field['heading_size']);
            }
          }
        }

        // Base styles.
        $styles = [
          'card_headline_style' => 'headline--serif',
        ];

        // If there are override styles from the block, add them in.
        if (isset($variables['elements']['#override_styles']) && !empty($variables['elements']['#override_styles'])) {
          $styles = array_values([
            ...$styles,
            ...$variables['elements']['#override_styles'],
          ]);
        }

        // Get site-wide configuration for use with constructing event link.
        $config = \Drupal::config('sitenow_events.settings');

        foreach ($data['events'] as $key => $value) {
          // The API nests each event as an array.
          $event = $value['event'];
          $event['attributes']['class'] = $styles;
          $event['heading_size'] = $heading_size ?? 'h3';

          $event['sitenow_events_config'] = $config;

          // Pass off to helper function to build card render.
          $variables['content'][$key] = sitenow_events_build_card($event);
        }
      }
      else {
        $variables['content']['no_results'] = [
          '#markup' => '<div class="events-empty"><p>There are currently no events to display.</p></div>',
        ];
      }

      // Add pager to render if checked.
      if ($show_pager && isset($data['page']['total_results'])) {
        $variables['content']['pager'] = [
          '#type' => 'pager',
          '#element' => $element,
          '#quantity' => 3,
        ];
      }

      // If we have more link checked and link provided, pass it.
      if ((bool) $block->get('field_collection_more')->value === TRUE) {
        if ($uri = $block->get('field_collection_more_path')->uri) {
          $url = Url::fromUri($uri);
        }
        else {
          $url = Url::fromUri('//events.uiowa.edu');
        }

        $variables['content']['more'] = [
          '#type' => 'link',
          '#title' => 'View more events',
          '#url' => $url,
          '#attributes' => [
            'class' => ['more-link', 'bttn', 'bttn--primary', 'bttn--caps'],
          ],
        ];
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_events_preprocess_node__event(&$variables) {
  $variables['#attached']['library'][] = 'uids_base/tags';
}

/**
 * Helper function to build out card renders from event data.
 */
function sitenow_events_build_card(array $event): array {

  // Construct event link based on site-wide configuration.
  $external_link = ($event['sitenow_events_config']->get('event_link') === 'event-link-external');
  if ($external_link) {
    $event['url'] = $event['events_site_url'];
  }
  else {
    $single_event_path = $event['sitenow_events_config']->get('single_event_path');

    // Add a parameter on the URL for event instances.
    foreach ($event['event_instances'] as $instance_key => $instance) {
      if ($event['instance_start'] === $instance['event_instance']['start']) {
        $instance_id = $instance_key;
      }
    }

    $event_path = isset($instance_id) ? "{$event['id']}/{$instance_id}" : $event['id'];
    $event['url'] = Url::fromUri("internal:/{$single_event_path}/{$event_path}", ['alias' => TRUE]);
  }

  $card = [
    '#type' => 'card',
    '#attributes' => $event['attributes'],
    '#title' => $event['title'],
    '#url' => $event['url'],
    '#headline_level' => $event['heading_size'],
    '#prefix' => '<div class="column-container">',
    '#suffix' => '</div>',
  ];

  // Construct date string.
  $card['#subtitle'] = sitenow_events_format_instance([
    'start' => $event['instance_start'],
    'end' => $event['instance_end'],
    'last_date' => $event['last_date'],
    'all_day' => $event['instance_all_day'],
  ]);

  if (isset($event['media'][0]['original_image'])) {
    // Establish default view mode if layout_builder_styles don't exist.
    $image_view_mode = 'large__square';

    // Map layout builder styles to the view mode that should be used.
    $media_formats = [
      'media--widescreen' => 'large__widescreen',
      'media--square' => 'large__square',
      'media--circle' => 'large__square',
    ];
    // Loop through the map to check if any of them are being used and
    // adjust the view mode accordingly. Last one wins out.
    $classes = $event['attributes']['class'];
    if (isset($classes)) {
      foreach ($media_formats as $style => $view_mode) {
        if (in_array($style, $classes)) {
          $image_view_mode = $view_mode;
        }
      }
    }
    $card['#media']['external_image'] = [
      '#theme' => 'imagecache_external_responsive',
      '#uri' => $event['media'][0]['original_image'],
      '#responsive_image_style_id' => $image_view_mode,
      '#attributes' => [
        'data-lazy' => TRUE,
        'alt' => t('@title promotional image', ['@title' => $event['title']]),
      ],
    ];
  }

  if ($event['virtual'] === TRUE) {
    $card['#meta']['icon'] = [
      '#type' => 'markup',
      '#markup' => '<span role="presentation" class="fa-li fas fa-laptop"></span>',
    ];
    $card['#meta']['location'] = [
      '#type' => 'markup',
      '#markup' => t('Virtual'),
    ];
  }
  elseif (!is_null($event["location_name"])) {
    $card['#meta']['icon'] = [
      '#type' => 'markup',
      '#markup' => '<span role="presentation" class="fa-li fas fa-map-marker-alt"></span>',
    ];
    $card['#meta']['location'] = [
      '#type' => 'markup',
      '#markup' => $event['location_name'],
    ];
  }

  // Add a wrapper div with class "fa-ul".
  $card['#meta']['#prefix'] = '<div class="fa-ul">';
  $card['#meta']['#suffix'] = '</div>';

  // Limit what html is allowed.
  $allowed_tags = ['a', 'strong', 'em'];

  if (isset($event['summary'])) {
    // @todo remove 'card__description' attribute once v2 is no longer.
    // https://github.com/uiowa/uiowa/issues/6288
    $card['#content']['description'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => Xss::filter($event['summary'], $allowed_tags),
      '#attributes' => [
        'class' => 'card__description',
      ],
    ];
  }
  elseif (isset($event['description'])) {
    $event['description'] = Xss::filter($event['description'], $allowed_tags);

    // Use smart_trim's helper to safely truncate without breaking HTML.
    $truncate = new TruncateHTML();
    $trim_suffix = '...';
    // @todo remove 'card__description' attribute once v2 is no longer.
    // https://github.com/uiowa/uiowa/issues/6288
    $card['#content']['description'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => $truncate->truncateChars($event['description'], 500, $trim_suffix),
      '#attributes' => [
        'class' => 'card__description',
      ],
    ];
  }

  if ($event['canceled'] === TRUE) {
    $card['#content']['canceled'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => '<span class="badge badge--orange">Canceled</span>',
    ];
  }

  return $card;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_events_preprocess_field(&$variables) {
  switch ($variables['element']['#field_name']) {
    case 'field_event_attendance':
      $field_label = $variables['element']['#title'];
      uiowa_core_set_attributes($variables, 'element--inline');
      if (isset($variables['items'][0]['content']['#markup']) && $variables['items'][0]['content']['#markup'] === 'Yes') {
        if ($variables['element']['#view_mode'] == 'teaser') {
          $variables['items'][0]['content']['#markup'] = '<span class="badge badge--light">' . $field_label . '</span>';
        }
        else {
          $variables['items'][0]['content']['#markup'] = '<span class="badge badge--cool-gray">' . $field_label . '</span>';
        }
      }
      else {
        uiowa_core_set_attributes($variables, 'sr-only');
      }
      break;

    case 'field_event_category':
      uiowa_core_set_attributes($variables, 'tags-list');

      foreach ($variables["items"] as &$item) {
        $item['attributes']['class'] = 'tags-list__tag';
      }
      break;

    case 'field_event_directions':
      // Wrap the field output in a <details> tag.
      $details_open = '<details>';
      $details_close = '</details>';

      // Get the field label and wrap it in a <summary> tag.
      $field_label = '<summary>' . $variables['label'] . '</summary>';
      $summary = [
        '#type' => 'markup',
        '#markup' => $field_label,
      ];

      // Wrap the field output in <details> tags and append the summary.
      $variables['items'][0]['content']['#prefix'] = $details_open . \Drupal::service('renderer')->render($summary);
      $variables['items'][0]['content']['#suffix'] = $details_close;
      break;

    case 'field_event_geolocation':
      // Modify the field label.
      $variables['label'] = t('Map');

      break;

    case 'field_event_location':
      uiowa_core_set_field_icon($variables, 'fas fa-map-marker-alt fa-li');
      uiowa_core_set_attributes($variables, 'fa-ul');
      break;

    case 'field_event_performer':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_field_icon($variables, 'fas fa-user-circle fa-li');
        uiowa_core_set_attributes($variables, 'fa-ul');
      }
      break;

    case 'field_event_series_link':
      uiowa_core_set_field_icon($variables, 'fas fa-link fa-li');
      uiowa_core_set_attributes($variables, 'fa-ul');
      break;

    case 'field_event_status':
      if (isset($variables['element'][0]['#markup'])) {
        if ($variables['element'][0]['#markup'] === 'Scheduled') {
          uiowa_core_set_attributes($variables, 'sr-only');
        }
        elseif ($variables['element'][0]['#markup'] === 'Cancelled') {
          uiowa_core_set_attributes($variables, 'badge badge--orange element--inline');
        }
        elseif ($variables['element'][0]['#markup'] === 'Rescheduled') {
          uiowa_core_set_attributes($variables, 'badge badge--green element--inline');
        }
      }
      break;

    case 'field_event_virtual':
      uiowa_core_set_field_icon($variables, 'fas fa-desktop fa-li');
      uiowa_core_set_attributes($variables, 'fa-ul');
      break;

    case 'field_event_when':
      uiowa_core_set_field_icon($variables, 'fa-calendar far fa-li');
      uiowa_core_set_attributes($variables, 'fa-ul');
      break;
  }
}

/**
 * Load and return data from the content hub API.
 *
 * @param array $params
 *   Optional list of parameters for our API call.
 * @param array $args
 *   Required array of arguments for our API call. The args will be assembled
 *   in array order.
 * @param bool $cache
 *   Boolean to determine if we cache the request.
 *
 * @return array
 *   An array of data.
 */
function sitenow_events_load(array $params = [
  'display_id' => 'events',
], array $args = [
  'views',
  'event_instances_api.json',
], $cache = TRUE) {
  $config = \Drupal::config('sitenow_events.settings');
  $endpoint = $config->get('base_endpoint');

  // Append args to the $endpoint.
  $endpoint = $endpoint . implode('/', $args);

  // The content hub API does not work with encoded parameters so we decode it.
  if (!empty($params)) {
    $query = UrlHelper::buildQuery($params);
    $query = urldecode($query);
    $endpoint = "{$endpoint}?{$query}";
  }

  if ($cached = \Drupal::cache('uievents')->get($endpoint)) {
    $data = $cached->data;
  }
  else {
    try {
      $request = \Drupal::httpClient()->get($endpoint);
    }
    catch (RequestException $e) {
      $logger = \Drupal::logger('sitenow_events');
      Error::logException($logger, $e);
    }

    if (isset($request)) {
      $data = json_decode($request->getBody()->getContents(), TRUE);

      // Create a cache item set to 5 minutes.
      if ($cache !== FALSE) {
        $request_time = \Drupal::time()->getRequestTime();
        \Drupal::cache('uievents')->set($endpoint, $data, $request_time + 300);
      }
    }
    else {
      $data = [];
    }

  }

  return $data;
}

/**
 * Implements hook_theme().
 */
function sitenow_events_theme($existing, $type, $theme, $path) {
  return [
    'sitenow_events_single_event' => [
      'path' => $path,
      'template' => 'templates/sitenow-events-single-event',
      'file' => 'includes/sitenow_events.single_event.inc',
      'variables' => ['event' => NULL],
    ],
  ];
}

/**
 * Return a human-readable date string from an event instance.
 *
 * @param array $event_instance
 *   The event instance array.
 *
 * @return string
 *   The human-readable date string.
 */
function sitenow_events_format_instance(array $event_instance) {
  $start_date = strtotime($event_instance['start']);

  if (isset($event_instance['end'])) {
    $end_date = strtotime($event_instance['end']);
  }
  // If it's an all day event, we need to check
  // if it spans multiple days.
  elseif (isset($event_instance['last_date'])) {
    $end_date = strtotime($event_instance['last_date']);
  }
  else {
    $end_date = $start_date;
  }

  $is_all_day = ($event_instance['all_day'] === TRUE);
  $is_same_day = date('Y-m-d', $start_date) === date('Y-m-d', $end_date);
  $is_same_time = date('g:ia', $start_date) === date('g:ia', $end_date);
  $is_same_month = $is_same_day || date('Y-m', $start_date) === date('Y-m', $end_date);
  $is_same_year = $is_same_day || $is_same_month || (date('Y', $start_date) === date('Y', $end_date));

  if ($is_same_day && $is_all_day) {
    $start = date('l, F j, Y', $start_date) . ' (all day)';
  }
  elseif ($is_same_day && !$is_all_day) {
    $start = date('l, F j, Y g:ia', $start_date);

    if (!$is_same_time) {
      $end = date('g:ia', $end_date);
    }
  }
  elseif (!$is_same_day && $is_all_day) {
    if ($is_same_month) {
      $start = date('l, F j', $start_date);
      $end = date('l, F j, Y', $end_date) . ' (all day)';
    }
    elseif ($is_same_year) {
      $start = date('l, F j', $start_date);
      $end = date('l, F j, Y', $end_date) . ' (all day)';
    }
    else {
      $start = date('l, F j, Y', $start_date);
      $end = date('l, F j, Y', $end_date) . ' (all day)';
    }
  }
  elseif (!$is_same_day & !$is_all_day) {
    if ($is_same_month) {
      $start = date('l, F j g:ia', $start_date);
      $end = date('l, F j, Y g:ia', $end_date);
    }
    elseif ($is_same_year) {
      $start = date('l, F j, g:ia', $start_date);
      $end = date('l, F j, Y g:ia', $end_date);
    }
    else {
      $start = date('l, F j, Y g:ia', $start_date);
      $end = date('l, F j, Y g:ia', $end_date);
    }
  }

  return isset($end) ? "{$start} to {$end}" : $start;
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 *
 * @todo Remove this after sitenow_events_paragraph is uninstalled.
 */
function sitenow_events_field_widget_single_element_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] === 'events') {
    if (!empty($element['subform']['field_events_more'])) {
      $parents_array = $element['subform']['#parents'];
      $parents = array_shift($parents_array) . '[' . implode('][', $parents_array) . ']';
      if (!empty($element['subform']['field_events_more_path'])) {
        $element['subform']['field_events_more_path']['#states'] = [
          'visible' => [
            ':input[name="' . $parents . '[field_events_more][value]"]' => [
              'checked' => TRUE,
            ],
          ],
        ];
      }
    }
  }
}

/**
 * Set dynamic allowed values for multiple fields.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _sitenow_events_get_filter_field_options(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, bool &$cacheable = TRUE): array {
  $options = [];

  switch ($definition->getName()) {
    case 'field_events_department':
    case 'field_uiowa_events_department':
      $data = sitenow_events_load([
        'display_id' => 'filters',
      ], [
        'views',
        'filters_api.json',
      ]);
      $tree = _sitenow_events_build_options_tree($data['departments']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_audiences':
    case 'field_uiowa_events_audiences':
      $data = sitenow_events_load([
        'display_id' => 'filters',
      ], [
        'views',
        'filters_api.json',
      ]);
      $tree = _sitenow_events_build_options_tree($data['event_audience']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_gen_interests':
    case 'field_uiowa_events_interests':
      $data = sitenow_events_load([
        'display_id' => 'filters',
      ], [
        'views',
        'filters_api.json',
      ]);
      $tree = _sitenow_events_build_options_tree($data['event_general_interest']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_event_types':
    case 'field_uiowa_events_types':
      $data = sitenow_events_load([
        'display_id' => 'filters',
      ], [
        'views',
        'filters_api.json',
      ]);
      $tree = _sitenow_events_build_options_tree($data['event_types']);
      $options = _sitenow_events_build_options_list($tree);

      break;

    case 'field_events_keywords':
    case 'field_uiowa_events_keywords':
      $data = sitenow_events_load([
        'display_id' => 'keywords',
      ], [
        'views',
        'filters_api.json',
      ]);

      $options = [];

      foreach ($data['keywords'] as $keyword) {
        $options[$keyword['id']] = $keyword['name'];
      }

      break;

    case 'field_events_place':
    case 'field_uiowa_events_place':
      $data = sitenow_events_load([
        'display_id' => 'places',
      ], [
        'views',
        'places_api.json',
      ]);
      $options = [];

      foreach ($data['places'] as $place) {
        // API double-nests places for some reason.
        $place = $place['place'];
        $options[$place['id']] = $place['name'];
      }

      break;

  }

  return $options;
}

/**
 * Helper function to build the options tree.
 *
 * @param array $data
 *   Array of data to be sorted into a tree.
 * @param int $parent
 *   Stores the current id.
 *
 * @return array
 *   Returns an associative array options tree.
 *
 * @todo https://github.com/uiowa/uiowa/issues/5028
 */
function _sitenow_events_build_options_tree(array $data, int $parent = 0) {
  $tree = [];

  foreach ($data as $d) {
    if ((int) $d['parent_id'] === $parent) {
      $children = _sitenow_events_build_options_tree($data, $d['id']);

      if (!empty($children)) {
        $d['_children'] = $children;
      }
      $tree[] = $d;
    }
  }

  return $tree;
}

/**
 * Helper function to output the options array.
 *
 * @param array $tree
 *   Array of tree data to be printed.
 * @param int $r
 *   Basic counter.
 * @param int $p
 *   Parent id.
 * @param array $options
 *   Options array to be passed recursively.
 *
 * @return array
 *   Return options with children prefixed with dashes.
 *
 * @todo https://github.com/uiowa/uiowa/issues/5028
 */
function _sitenow_events_build_options_list(array $tree, $r = 0, $p = NULL, array &$options = []) {
  foreach ($tree as $t) {
    $dash = ((int) $t['parent_id'] === 0) ? '' : str_repeat('-', $r) . ' ';
    $options[$t['id']] = $dash . $t['name'];

    if ((int) $t['parent_id'] === $p) {
      // Reset $r.
      $r = 0;
    }

    if (isset($t['_children'])) {
      _sitenow_events_build_options_list($t['_children'], ++$r, $t['parent_id'], $options);
    }
  }

  return $options;
}

/**
 * Set dynamic allowed values event status.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _sitenow_events_get_status_options(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, bool &$cacheable = TRUE): array {
  return [
    'EventScheduled' => 'Scheduled',
    'EventCancelled' => 'Cancelled',
    'EventRescheduled' => 'Rescheduled',
  ];
}
