<?php

/**
 * @file
 * Contains hook implementations for UIowa Media WYSIWYG.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\file\FileInterface;

/**
 * Implements hook_preprocess_page().
 */
function sitenow_media_wysiwyg_preprocess_page(&$variables) {
  $variables['#attached']['library'][] = 'sitenow_media_wysiwyg/ckeditor_settings_overrides';
}

/**
 * Implements hook_form_FORMID_alter().
 */
function sitenow_media_wysiwyg_form_entity_embed_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide the selected entities link.
  $form['entity']['#access'] = FALSE;
  // Get the user input.
  $input = $form_state->getUserInput();
  // If we are uploading new or selecting from the library.
  if (isset($input, $input['entity_browser'], $input['entity_browser']['entity_ids'])) {
    $parts = explode(':', $input['entity_browser']['entity_ids']);
    $entity_type = $parts[0];
    $id = $parts[1];
    $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($id);
  }
  // If we are modifying an existing media editor object.
  elseif (isset($input, $input['editor_object'], $input['editor_object']['data-entity-type'], $input['editor_object']['data-entity-uuid'])) {
    $entity_type = $input['editor_object']['data-entity-type'];
    $uuid = $input['editor_object']['data-entity-uuid'];
    $entity = \Drupal::service('entity.repository')->loadEntityByUuid($entity_type, $uuid);
  }
  if (isset($entity, $entity_type) && $entity_type == 'media') {
    $bundle = $entity->bundle();
    switch ($bundle) {
      case 'image':
        $form['attributes']['data-entity-embed-display']['#options']['view_mode:media.full'] = 'Original';
        break;
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function sitenow_media_wysiwyg_form_editor_link_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['file_upload'] = [
    '#type' => 'details',
    '#title' => t('Upload a file'),
    '#open' => FALSE,
  ];
  $form['file_upload']['entity_browser'] = [
    '#type' => 'entity_browser',
    '#entity_browser' => 'file_link_browser',
    '#cardinality' => '1',
  ];
  $form['#attached']['library'][] = 'sitenow_media_wysiwyg/button_style';
  $form['attributes']['class']['#description'] = $form['attributes']['class']['#description'] . " Alternatively, add one or more of these predefined <em>button</em> styles: <small>
<a href='#' data-btn-type='btn-primary' class='button-style'>Primary</a>, 
<a href='#' data-btn-type='btn-secondary' class='button-style'>Secondary</a>,
<a href='#' data-btn-type='btn-success' class='button-style'>Success</a>,
<a href='#' data-btn-type='btn-info' class='button-style'>Info</a>,
<a href='#' data-btn-type='btn-warning' class='button-style'>Warning</a>,
<a href='#' data-btn-type='btn-danger' class='button-style'>Danger</a>,
<a href='#' data-btn-type='btn-sm' class='button-style'>Small</a>,
<a href='#' data-btn-type='btn-lg' class='button-style'>Large</a>,
<a href='#' data-btn-type='btn-block' class='button-style'>Full-Width</a></small>";
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function sitenow_media_wysiwyg_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form["#entity_type"] == 'media' && $entity_form["#bundle"] == 'file') {
    if ($entity_form["#op"] == 'add') {
      $entity_form["revision_log_message"]["#access"] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_media_wysiwyg_form_media_library_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'sitenow_media_wysiwyg/media_overrides';
}

/**
 * Implements hook_entity_presave().
 */
function sitenow_media_wysiwyg_file_presave(FileInterface $file) {
  // FMDM only parses jpeg correctly for EXIF, not TIFF. Luckily,
  // should see very few TIFF orientation issues.
  if ($file->isNew() && $file->getMimeType() == 'image/jpeg') {
    $fmdm = \Drupal::service('file_metadata_manager');
    $metadata = $fmdm->uri($file->getFileUri());
    $orientation = $metadata->getMetaData('exif', 'Orientation');
    if ($orientation) {

      // EXIF: 1 is standard.
      // 6 and 8 are rotated 90, cw and ccw respectively
      // 5 and 7 are 6 and 8, but then flipped over the x-axis
      // 3 is rotated 180
      // 2 and 4 are 1 and 3, but then flipped over the x-axis
      // Currently not addressing any flipping.
      switch ($orientation['value']) {
        case 5:
        case 6:
          $degrees = 90;
          break;

        case 7:
        case 8:
          $degrees = 270;
          break;

        case 3:
        case 4:
          $degrees = 180;
          break;

        default:
          $degrees = 0;
      }
      if ($degrees != 0) {
        $image = \Drupal::service('image.factory')->get($file->getFileUri());

        // Replace the old EXIF data, so that downloaded images or other
        // render methods won't overcorrect.
        $metadata->setMetadata('exif', 'Orientation', 1);
        $metadata->saveMetadataToFile('exif');
        // Save only if rotate() completed successfully.
        if ($image->rotate($degrees)) {
          $image->save();
        }
      }
    }
  }
}

/**
 * Implements hook_oembed_providers_alter().
 */
function sitenow_media_wysiwyg_oembed_providers_alter(array &$providers) {
  // Add "University of Iowa" Kalutra/MediaSpace provider.
  $providers[] = [
    'provider_name' => 'University of Iowa',
    'provider_url' => 'http://mediaspace.uiowa.edu',
    'endpoints' => [
      [
        'schemes' => [
          'http://mediaspace.uiowa.edu/*',
          'https://mediaspace.uiowa.edu/*',
        ],
        'url' => 'http://mediaspace.uiowa.edu/oembed',
        'discovery' => 'true',
      ],
    ],
  ];
}

/**
 * Implements hook_media_source_info_alter().
 */
function sitenow_media_wysiwyg_media_source_info_alter(array &$sources) {
  $sources["oembed:video"]["providers"][] = 'University of Iowa';
}
