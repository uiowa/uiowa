<?php

/**
 * @file
 * Contains hook implementations for UIowa Media WYSIWYG.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function sitenow_media_wysiwyg_field_widget_single_element_panopto_url_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  // There is a second help message that adds more confusion to the link field.
  // @see: LinkWidget::formElement().
  // Extra checking due to "Cannot use object of type
  // Drupal\Core\StringTranslation\TranslatableMarkup as array"
  // error when editing field.
  if (isset($element['uri']['#description']) && is_array($element['uri']['#description']) && isset($element['uri']['#description']['#items'][1])) {
    unset($element['uri']['#description']['#items'][1]);
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function sitenow_media_wysiwyg_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form["#entity_type"] === 'media' && $entity_form["#bundle"] === 'file') {
    if ($entity_form["#op"] === 'add') {
      $entity_form["revision_log_message"]["#access"] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function sitenow_media_wysiwyg_form_editor_media_dialog_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['view_mode']) && isset($form['view_mode']['#options']) && isset($form['view_mode']['#options']['default'])) {
    $form['view_mode']['#options']['default'] = t('Original');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_media_wysiwyg_form_media_library_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'sitenow_media_wysiwyg/media_overrides';
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function sitenow_media_wysiwyg_media_update(EntityInterface $entity) {
  // If not local, try to clear the varnish cache for the file.
  if (\Drupal::moduleHandler()->moduleExists('acquia_purge')) {
    $purgeInvalidationFactory = \Drupal::service('purge.invalidation.factory');
    $purgeQueuers = \Drupal::service('purge.queuers');
    $purgeQueue = \Drupal::service('purge.queue');
    $queuer = $purgeQueuers->get('coretags');
    $invalidations = [];

    switch ($entity->bundle()) {
      case 'file':
        $field = 'field_media_file';
        break;

      case 'audio':
        $field = 'field_media_audio_file';
        break;

      case 'image':
        $field = 'field_media_image';
        $styles = ImageStyle::loadMultiple();
        break;
    }

    if (isset($field) && $entity->hasField($field)) {
      $file = File::load($entity->$field->target_id);
      $invalidations[] = $purgeInvalidationFactory->get('url', $file->createFileUrl(FALSE));

      // Note that media_entity_file_replace flushes derivative images.
      if (isset($styles)) {
        foreach ($styles as $style) {
          $invalidations[] = $purgeInvalidationFactory->get('url', $style->buildUrl($file->getFileUri()));
        }
      }

      $purgeQueue->add($queuer, $invalidations);
    }
  }
}

/**
 * Function to import brand icons from the JSON file and create media entities.
 */
function sitenow_media_wysiwyg_media_import_icons() {
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  $json_file_path = $theme_path . '/brand-icons/icons.json';

  $json_data = file_get_contents($json_file_path);
  $data = json_decode($json_data, TRUE);
  $icons = $data['icons'] ?? [];

  $created_count = 0;
  $updated_count = 0;

  foreach ($icons as $icon_data) {
    $file_url = '/themes/custom/uids_base/brand-icons/icons/' . $icon_data['name'] . '-two-color.svg';
    // Actual file path for modification.
    $file_path = $theme_path . '/brand-icons/icons/' . $icon_data['name'] . '-two-color.svg';
    $alt_text = str_replace('-', ' ', $icon_data['name']);
    $media_storage = \Drupal::entityTypeManager()->getStorage('media');

    // Modify the SVG file before processing it.
    sitenow_media_wysiwyg_modify_svg_files($file_path);

    // Load or create media entity.
    $existing_media = $media_storage->loadByProperties([
      'bundle' => 'brand_icon',
      'field_media_brand_icon.icon_id' => $icon_data['id'],
    ]);

    if (empty($existing_media)) {
      $media = $media_storage->create([
        'bundle' => 'brand_icon',
        'name' => $icon_data['name'],
        'status' => 1,
        'uid' => 1,
      ]);
      $created_count++;
    }
    else {
      $media = reset($existing_media);
      $updated_count++;
    }

    $media->setName($icon_data['name']);
    $media->set('field_media_brand_icon', [
      'uri' => $file_url,
      'alt' => $alt_text,
      'icon_id' => $icon_data['id'],
    ]);

    $media->save();
  }

  \Drupal::messenger()->addStatus(t('Icons import completed. Created: @created, Updated: @updated', [
    '@created' => $created_count,
    '@updated' => $updated_count,
  ]));
}

/**
 * Function to modify svg icon to remove text and have a white background and be centered within a square.
 */
function sitenow_media_wysiwyg_modify_svg_files($file) {
  if (!file_exists($file)) {
    return;
  }

  $svg_content = file_get_contents($file);

  // Remove any <text> elements from the SVG.
  $svg_content = preg_replace('/<text[^>]*>.*?<\/text>/s', '', $svg_content);

  // Modify the viewBox to expand the canvas to 90x90 and center the content.
  $svg_content = preg_replace('/viewBox="([\d\s-]+)"/', 'viewBox="-20 -20 90 90"', $svg_content);

  // Ensure width and height are set to 90x90 for the SVG to match the canvas size.
  if (!strpos($svg_content, 'width="90"')) {
    $svg_content = preg_replace('/<svg/', '<svg width="90" height="90"', $svg_content, 1);
  }

  // Add a white background rect that fully covers the 90x90 canvas.
  if (!strpos($svg_content, '<rect x="-20" y="-20" width="90" height="90" fill="white"/>')) {
    $svg_content = preg_replace('/(<svg[^>]*>)/', '$1<rect x="-20" y="-20" width="90" height="90" fill="white"/>', $svg_content, 1);
  }

  file_put_contents($file, $svg_content);
}
