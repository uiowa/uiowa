<?php

/**
 * @file
 * Installation functions for sitenow_migrate module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\File\Exception\FileException;
use Drupal\Core\File\FileExists;
use Drupal\Core\File\FileSystemInterface;

/**
 * Implements hook_install().
 */
function sitenow_migrate_install() {
  // Recreation of media.install to ensure the generic file image is available
  // in the local environment prior to migration.
  // Helps with memory issues and errors during migration, if the file
  // doesn't already exist.
  /** @var \Drupal\Core\Extension\ExtensionPathResolver $path_resolver */
  $path_resolver = \Drupal::service('extension.path.resolver');
  $source = $path_resolver->getPath('module', 'sitenow_migrate') . '/images/icons';
  $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');
  $file_system->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);

  $files = $file_system->scanDirectory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
  foreach ($files as $file) {
    // When reinstalling the media module we don't want to copy the icons when
    // they already exist. The icons could be replaced (by a contrib module or
    // manually), so we don't want to replace the existing files. Removing the
    // files when we uninstall could also be a problem if the files are
    // referenced somewhere else. Since showing an error that it was not
    // possible to copy the files is also confusing, we silently do nothing.
    if (!file_exists($destination . DIRECTORY_SEPARATOR . $file->filename)) {
      try {
        $file_system->copy($file->uri, $destination, FileExists::Error);
      }
      catch (FileException $e) {
        // Ignore and continue.
      }

    }
  }
}

/**
 * Helper function for installing config related to a migration.
 */
function sitenow_migrate_migration_install($sitename) {
  /** @var \Drupal\Core\Extension\ExtensionPathResolver $path_resolver */
  $path_resolver = \Drupal::service('extension.path.resolver');

  if (!$sitename) {
    return;
  }
  if ('' === $module_path = $path_resolver->getPath('module', "{$sitename}_migrate")) {
    return;
  }

  $config_path = $module_path . '/config/split';

  // If the config path does not exist, we cannot read any config from it.
  if (!file_exists($config_path)) {
    throw new \Exception("Config directory does not exist at $config_path.");
  }

  $source = new FileStorage($config_path);

  $config_storage = \Drupal::service('config.storage');

  foreach ($source->listAll() as $config) {
    $config_storage->write($config, $source->read($config));
  }

  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable("config_split.config_split.{$sitename}_migrate");
  $config->set('status', TRUE);
  $config->save(TRUE);
}

/**
 * Helper function for uninstalling config related to a migration.
 */
function sitenow_migrate_migration_uninstall($sitename) {
  if (!$sitename) {
    return;
  }
  // Disable the split.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable("config_split.config_split.{$sitename}_migrate");
  $config->set('status', FALSE);
  $config->save(TRUE);

  // Delete config-ignore entities that cause CM dependency problems on import.
  $config_factory->getEditable('migrate_plus.migration_group.default')->delete();
  $config_factory->getEditable('migrate_plus.migration_group.sitenow_migrate')->delete();
}
