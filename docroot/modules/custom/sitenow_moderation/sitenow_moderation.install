<?php

/**
 * @file
 * Install, update and uninstall functions for the sitenow_moderation module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\system\Entity\Action;
use Drupal\Core\Config\InstallStorage;

/**
 * Implements hook_install().
 */
function sitenow_moderation_install() {
  // Remove the publish/unpublished actions.
  // Based on Workbench Moderation Actions.
  // https://www.drupal.org/project/workbench_moderation_actions.
  if ($action = Action::load('node_publish_action')) {
    $action->delete();
  }
  if ($action = Action::load('node_unpublish_action')) {
    $action->delete();
  }

  // @todo Get available moderation actions and add them.

}

/**
 * Implements hook_uninstall().
 */
function sitenow_moderation_uninstall() {
  // Restore the publish/unpublish actions.
  // Based on Workbench Moderation Actions.
  // https://www.drupal.org/project/workbench_moderation_actions.
  $node_actions_to_restore = [
    'node_publish_action',
    'node_unpublish_action',
  ];
  foreach ($node_actions_to_restore as $action) {
    if (!Action::load($action)) {
      $entity_type_manager = \Drupal::entityTypeManager();
      $module_handler = \Drupal::moduleHandler();

      // Restore the action from the original config from the node module.
      $config_install_path = $module_handler->getModule('node')->getPath() . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
      $storage = new FileStorage($config_install_path);
      $entity_type_manager
        ->getStorage('action')
        ->create($storage->read('system.action.' . $action))
        ->trustData()
        ->save();
    }
  }

}

/**
 * Implements hook_schema().
 */
function sitenow_moderation_schema() {
  $schema['sitenow_moderation_example'] = [
    'description' => 'Table description.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record.',
      ],
      'status' => [
        'description' => 'Boolean indicating whether this record is active.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'type' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of the record.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'data' => [
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'The arbitrary data for the item.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'type' => ['type'],
      'uid' => ['uid'],
      'status' => ['status'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function sitenow_moderation_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['sitenow_moderation_status'] = [
      'title' => t('sitenow_moderation status'),
      'value' => t('sitenow_moderation value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}
