<?php

/**
 * @file
 * Contains sitenow_p2lb.module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\RevisionableInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Plugin\Context\EntityContext;
use Drupal\Core\Url;
use Drupal\layout_builder\InlineBlockUsage;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\sitenow_p2lb\P2LbHelper;
use Drupal\sitenow_pages\Entity\Page;

/**
 * Implements hook_form_alter().
 */
function sitenow_p2lb_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'views_form_content_v3_converter_moderated_content') {
    // Give both submit buttons their proper label.
    $form['header']['node_bulk_form']['actions']['submit']['#value'] = t('Magic button');
    $form['actions']['submit']['#value'] = t('Magic button');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_p2lb_form_node_page_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Disable display of the Paragraph sections for new content.
  $form['field_page_content_block']['#access'] = FALSE;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function sitenow_p2lb_node_presave(EntityInterface $entity) {
  // Prevent new paragraphs from being saved
  // to the database when a new page is created.
  if ($entity->bundle() == 'page' && $entity->isNew()) {
    if ($entity->hasField('field_page_content_block') && !$entity->get('field_page_content_block')->isEmpty()) {
      $entity->set('field_page_content_block', NULL);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_p2lb_form_node_page_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()?->getEntity();
  if ($node instanceof Page && empty($form_state->getUserInput())) {
    // Check if field_v3_conversion_revision_id is set,
    // and if the user hasn't yet interacted with the form
    // (so that we don't duplicate our messages).
    if ($node->hasField('field_v3_conversion_revision_id')) {
      if (is_numeric($node->field_v3_conversion_revision_id->value)) {
        // If we have a revision id, the page has been converted.
        // Disable field_page_content_block and set a warning message.
        \Drupal::messenger()->addWarning(t('This page has been converted to the SiteNow V3 format. Please add content through the "Body" field or click the "Layout" tab to edit an advanced page layout.'));
        $form['field_page_content_block']['#access'] = FALSE;
      }
      elseif ($node->field_v3_conversion_revision_id->value === 'v3_new') {
        $form['field_page_content_block']['#access'] = FALSE;
      }
      else {
        // If we didn't have a revision id, disable access to the body field
        // and add a message directing to the converter.
        \Drupal::messenger()->addMessage(t('This page can be converted to the SiteNow V3 format. Please visit the @link to convert this page.', [
          '@link' => Drupal::service('link_generator')->generate('SiteNow Converter tool', Url::fromRoute('sitenow_p2lb.content_converter')),
        ]));
        $form['body']['#access'] = FALSE;

        // Get issues and add a message.
        $issues = P2LbHelper::analyzeNode($node);
        if (!empty($issues)) {
          \Drupal::messenger()->addWarning(t('Components on this page contain issues that prevent them from being fully converted to V3. See details in the @link.', [
            '@link' => Link::createFromRoute('Conversion report', 'entity.node.p2lb_conversion_status', ['node' => $node->id()])->toString(),
          ]));
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function sitenow_p2lb_preprocess_menu_local_task(&$variables) {
  $url = $variables['link']['#url'];

  if ($url instanceof Url) {
    $route_name = $url->getRouteName();
    if ($route_name === 'entity.node.p2lb_conversion_status') {
      $theme = \Drupal::service('theme.manager')->getActiveTheme();
      if ($theme->getName() === 'uids_base') {
        $variables['#attached']['library'][] = 'sitenow_p2lb/overrides';
        $variables['link']['#options']['attributes']['class'][] = 'local-task-icon';
        $variables['link']['#options']['attributes']['class'][] = 'local-task-icon--p2lb';
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_p2lb_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $id = $view->storage
    ->id();
  if ($id === 'content_v3_converter') {
    if ($variables['field']->options['id'] === 'nothing') {
      $page = $variables['row']->_entity;
      $issues = P2LbHelper::analyzeNode($page);
      $build['#attached']['library'][] = 'sitenow_p2lb/overrides';

      if (!empty($issues)) {
        $message = t('Partially compatible');
        $link = t('@link', [
          '@link' => Link::createFromRoute('See details.', 'entity.node.p2lb_conversion_status', ['node' => $page->id()])->toString(),
        ]);

        $build['#markup'] = '<div>✴️</div><div>' . $message . '<br>' . $link . '</div>';
      }
      else {
        $build['#markup'] = '<div>✅</div><div>Fully compatible</div>';
      }

      $variables['output'] = $build;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_p2lb_form_node_revision_delete_confirm_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_values = $form_state->getBuildInfo()['args'][0];

  // Get node id.
  $nid = $form_values?->get('nid')?->getValue()[0]['value'] ?? NULL;

  // Guard against not finding a node id.
  if (!$nid) {
    return;
  }

  $protected_revision_id = sitenow_p2lb_get_protected_revision_id($nid);

  // Guard against not finding the protected revision id.
  if (!$protected_revision_id) {
    return;
  }

  // Get this revision's id.
  $this_revision_id = $form_state->getBuildInfo()['args'][0]?->getLoadedRevisionId();

  // Guard against not finding this revision's id.
  if (!$this_revision_id) {
    return;
  }

  // Check them against each other.
  if ($this_revision_id === $protected_revision_id) {

    // Disable delete button if they are the same, output error message.
    $form['actions']['submit']['#disabled'] = TRUE;
    $warning_text = t(
      "This is the last revision before converting from v2 to v3. It is protected and can't be deleted."
    );
    \Drupal::messenger()->addWarning($warning_text);
  }
}

/**
 * Check for nodes which are using paragraphs.
 */
function sitenow_p2lb_paragraph_nodes() {
  // Grab any nodes that are direct parents of
  // paragraph entities.
  // This shouldn't be affected by lb paragraphs like collections,
  // because block_contents will be their direct parents, not nodes.
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['parent_id'])
    ->condition('parent_type', 'node', '=');
  return $query->distinct()
    ->execute()
    ->fetchCol();
}

/**
 * Fetch all child ids attached to a parent node or section.
 */
function sitenow_p2lb_fetch_child_ids($parent) {
  if (!$parent) {
    return [];
  }
  switch ($parent->getType()) {
    case 'page':
      $field = 'field_page_content_block';
      break;

    case 'section':
      $field = 'field_section_content_block';
      break;

    default:
      return [];
  }

  $ids = [];
  $content = $parent->get($field);
  if (!is_null($content)) {
    foreach ($content as $content_ref) {
      $ids[] = $content_ref->target_revision_id;
    }
  }
  return $ids;
}

/**
 * Determine section layout_id.
 *
 * @param array $col_widths
 *   Array of integers denoting the desired column widths.
 *
 * @return array
 *   An array of section column definitions.
 */
function sitenow_p2lb_determine_columns(array $col_widths) {
  $sections = [];

  $total_col_width = array_sum($col_widths);
  // Check if we wrap into additional sections.
  // If not, we can process directly.
  // If we need multiple sections, we'll process
  // accordingly below.
  if ($total_col_width <= 12) {
    // Check for 'fluid' paragraphs, and set based on remaining space.
    $fluid_indices = array_keys($col_widths, 0, TRUE);
    if (!empty($fluid_indices)) {
      $repl = (12 - $total_col_width) / count($fluid_indices);
      // Round off to a valid repl value.
      if ($repl <= 3) {
        $repl = 3;
      }
      elseif ($repl <= 4) {
        $repl = 4;
      }
      elseif ($repl <= 6) {
        $repl = 6;
      }
      elseif ($repl <= 8) {
        $repl = 8;
      }
      elseif ($repl <= 9) {
        $repl = 9;
      }
      else {
        $repl = 12;
      }
      // Set the newly determined column widths.
      foreach ($fluid_indices as $index) {
        $col_widths[$index] = $repl;
      }
      // Reiter with the updated colwidths, in case they overrun the section.
      return sitenow_p2lb_determine_columns($col_widths);
    }
    // If we're all good, then add the section info and return.
    else {
      $sections[] = [
        'num_columns' => count($col_widths),
        'col_widths' => $col_widths,
      ];
      return $sections;
    }
  }

  // If we've reached this point, then we know we need
  // at least one additional section, and we need to
  // figure out how to handle that.
  // Create some helpers, including a cya breaker.
  $iter_adder = 0;
  $i = 0;
  $breaker = 100;

  // Cycle through the columns and recurse where necessary.
  while (TRUE) {
    $iter_adder += $col_widths[$i];

    // Section full with no overrun.
    // Take what we have and add to the list.
    if ($iter_adder === 12) {
      $sections = array_merge(
        sitenow_p2lb_determine_columns(array_slice($col_widths, 0, ++$i)),
        sitenow_p2lb_determine_columns(array_slice($col_widths, $i))
      );
      break;
    }

    // Overrun of the section.
    // Split and handle separately.
    if ($iter_adder > 12) {
      $sections = array_merge(
        sitenow_p2lb_determine_columns(array_slice($col_widths, 0, $i)),
        sitenow_p2lb_determine_columns(array_slice($col_widths, $i)),
      );
      break;
    }

    // We didn't exactly finish a section, and
    // didn't overrun, but we're Out of cols to add.
    // Take what we have left and handle/add to the list.
    if ($i === count($col_widths) - 1) {
      $sections[] = [
        'num_columns' => count($col_widths),
        'col_widths' => $col_widths,
      ];
      break;
    }

    // Extra cya check to break loop if something went wrong.
    if ($breaker-- <= 0) {
      break;
    }

    $i++;
  }

  return $sections;
}

/**
 * Process individual paragraph.
 */
function sitenow_p2lb_process_paragraph(ParagraphInterface $paragraph, $node) {
  if (empty($paragraph)) {
    return [];
  }

  // Set a few defaults. Can override later if needed.
  $display_label = 0;
  $label = NULL;
  $children = [];
  $block = NULL;
  $config = [];
  $block_definition = [];

  // Initialize a usage controller for later.
  $database = \Drupal::database();
  $use_controller = new InlineBlockUsage($database);

  // Handle each type of paragraph separately.
  switch ($paragraph->get('type')->getString()) {
    // Paragraph types that yet need mapping.
    case 'section':
      break;

    case 'accordion':
      $type = 'uiowa_collection';
      $label = 'Accordion collection';
      $view_mode = 'accordion';
      $title = $paragraph->field_uip_title->value;
      // Reverse the logic, because we're using it to
      // denote "hide," rather than display.
      $display_title = !$paragraph->field_uip_display_title->value;
      $accordion_items = $paragraph->get('field_accordion_item');
      foreach ($accordion_items as $accordion_item) {
        /** @var \Drupal\paragraphs\ParagraphInterface $accordion_item_paragraph */
        $accordion_item_paragraph = $paragraph->load($accordion_item->target_id);
        // Get the body text and format for the accordion item.
        $child = $paragraph->create([
          'langcode' => 'en',
          'type' => 'uiowa_collection_item',
          'status' => 1,
          'parent_type' => 'block_content',
          'parent_field_name' => 'field_uiowa_collection_items',
          // Get text and format for body.
          'field_collection_body' => $accordion_item_paragraph?->field_accordion_item_body?->first()?->getValue(),
          'field_collection_headline' => $accordion_item_paragraph?->field_accordion_item_title?->value,
          'field_unique_id' => $accordion_item_paragraph?->field_uip_id?->value,
        ]);
        if ($child->save()) {
          $children[] = $child;
        }
      }
      $block_definition = P2LbHelper::defaultBlockDefinition('uiowa_collection', [
        'status' => $paragraph->get('status')->getValue(),
        'field_uiowa_collection_items' => $children,
        // Build a headline out of the title
        // and display title options.
        'field_uiowa_headline' => [
          'headline' => $title,
          'heading_size' => 'h2',
          'hide_headline' => $display_title,
          'headline_style' => 'default',
        ],
      ]);
      break;

    case 'accordion_item':
      // Skip - handled by the parent accordion.
      break;

    case 'articles':
      $type = 'views_block:article_list_block-list_article';
      $more = $paragraph->field_articles_more->value;
      $more_path = ($paragraph->field_articles_more_path->get(0)) ? $paragraph->field_articles_more_path?->uri : NULL;
      $title = $paragraph->field_uip_title->value;
      // Reverse the logic, because we're using it to
      // denote "hide," rather than display.
      $display_title = !$paragraph->field_uip_display_title->value;
      // Build our headline array, because for list blocks,
      // it gets stored in the config, not in a field.
      $headline = [
        'headline' => $title,
        'hide_headline' => $display_title,
        'heading_size' => 'h2',
        'headline_style' => 'default',
        'headline_alignment' => 'default',
        'child_heading_size' => 'h3',
      ];
      $pager = ($paragraph->field_uip_pager->value) ? 'full' : 'some';
      // Number of results that should be displayed.
      $results = $paragraph->field_uip_items->value;
      // Tags to be used in the filter.
      $filter_tags = $paragraph->field_reference?->getValue();

      $exposed_filter_values = [];

      if ($filter_tags) {
        $exposed_filter_values['field_tags_target_id'] = $filter_tags;
      }

      $config = [
        'id' => 'views_block:article_list_block-list_article',
        'label' => $label,
        'provider' => 'views',
        'label_display' => $display_label,
        'views_label' => '',
        'headline' => $headline,
        'pager' => $pager,
        'pager_offset' => 0,
        'items_per_page' => $results,
        'use_more' => $more,
        'use_more_link_url' => $more_path,
        'exposed_filter_values' => $exposed_filter_values,
        'layout_builder_styles' => _sitenow_p2lb_block_styles($type, $paragraph),
        'context_mapping' => [],
      ];

      $uuid = \Drupal::service('uuid')->generate();
      break;

    case 'blockquote':
      // @todo Do we need to map the alignment options?
      $type = 'uiowa_quote';
      $blockquote_text = $paragraph->get('field_blockquote_content')->getValue()[0];
      $blockquote_footer = ($paragraph->get('field_blockquote_footer')->getValue()) ?
        $paragraph->get('field_blockquote_footer')[0]->getValue()['value'] . ' ' : '';
      $blockquote_citation = ($paragraph->get('field_blockquote_cite')->getValue()) ?
        $paragraph->get('field_blockquote_cite')[0]->getValue() : [];

      $block_definition = [
        'type' => $type,
        'langcode' => 'en',
        'status' => $paragraph->get('status')->getString(),
        'info' => 'Blockquote',
        'reusable' => 0,
        'default_langcode' => 1,
        'field_uiowa_quote_footer' => $blockquote_footer,
        'field_uiowa_quote_content' => $blockquote_text,
        'field_uiowa_quote_citation' => $blockquote_citation,
      ];

      break;

    case 'card':
      // Image isn't required. Check for one, or set to null.
      $image = $paragraph->field_card_image?->target_id ?: '';

      // Link isn't required. Check for one, or set to null.
      $link = $paragraph->field_card_link?->first()?->getValue();

      // Label (title) isn't required. Check for one, or set to null.
      $label = $paragraph->field_card_title?->value;
      $display_label = ($label) ? 1 : 0;

      // Subtitle field isn't required. Check for one, or set to null.
      $subtitle = $paragraph->field_card_subtitle?->value;

      // Card body isn't required. Check or set to array with empty value.
      $excerpt = $paragraph->field_card_body?->value;

      // By default, we're assuming this will become a V3 card.
      $type = 'uiowa_card';

      // If the card has no title...
      if (!$label) {
        if ($image && (!$subtitle && !$excerpt)) {
          // Image and optionally a link.
          $type = 'uiowa_image';
        }
        else {
          // Converting to a card is not possible because the label is required
          // in V3. Convert to a text area instead.
          $type = 'uiowa_text_area';
        }
      }
      else {
        $test_excerpt = $excerpt;
        $test_link = P2LbHelper::extractLink($test_excerpt);
        if (empty($link) || ($test_link && $test_link['uri'] === $link['uri'])) {
          $link = $test_link;
          $excerpt = $test_excerpt;
        }
        if ($excerpt && !P2LbHelper::formattedTextIsSame($excerpt, 'filtered_html', 'minimal_plus')) {
          // Converting to a card would result in data loss. Convert to a text
          // area instead.
          $type = 'uiowa_text_area';
        }
      }

      $fields = [];

      // Set fields based on the type of block we are creating.
      switch ($type) {
        case 'uiowa_card':
          // The card title doesn't use the headline field type, so we can't use
          // the helper function here.
          $fields['field_uiowa_card_title'] = [
            'text' => $label,
            // Size not set in paragraphs. Defaulting to h2.
            'size' => 'h2',
          ];

          // Add the image, if set.
          if ($image) {
            $fields['field_uiowa_card_image'] = $image;
          }

          // Add the subtitle, if set.
          if ($subtitle) {
            $fields['field_uiowa_card_author'] = $subtitle;
          }

          // Add the excerpt, if set, and set the format to minimal_plus.
          if ($excerpt) {
            $fields['field_uiowa_card_excerpt'] = [
              'value' => $excerpt,
              'format' => 'minimal_plus',
            ];
          }

          // Add the link, if set.
          if ($link) {
            $fields['field_uiowa_card_link'] = $link;
          }
          break;

        case 'uiowa_image':
          $fields = ['field_uiowa_image_image' => $image];

          // Add the link, if set.
          if ($link) {
            $fields['field_uiowa_image_link'] = $link;
          }
          break;

        case 'uiowa_text_area':
          // Compile a string with the values of the fields that are present
          // and set that to the text field of the V3 text area.
          $output = '';

          // If an image is set, convert it to its <drupal-media> equivalent.
          if ($image) {
            /** @var \Drupal\media\MediaInterface[] $images */
            $images = $paragraph->field_card_image->referencedEntities();
            if (!empty($images)) {
              foreach ($images as $image) {
                $output .= '<drupal-media data-entity-type="media" data-entity-uuid="' . $image->uuid() . '" data-view-mode="large__widescreen"></drupal-media>';
              }
            }
          }

          // Add the subtitle, if set.
          if ($subtitle) {
            $output .= $subtitle;
          }

          // Add the excerpt, if set.
          if ($excerpt) {
            $output .= $excerpt;
          }

          // Convert the link to an HTML representation.
          if (isset($link['uri']) && isset($link['title'])) {
            $url = Url::fromUri($link['uri']);
            $output .= Link::fromTextAndUrl($link['title'], $url)?->toString();
          }

          // Set the string as the field value and set the format to
          // filtered_html.
          $fields = [
            'field_uiowa_text_area' => [
              'value' => $output,
              'format' => 'filtered_html',
            ],
          ];

          // If there is a title, set it to the headline field.
          if ($label) {
            $fields['field_uiowa_headline'] = _sitenow_p2lb_headline_config($label, !$display_label);
          }
          break;

      }

      // Create the block definition based on what has been put together above.
      $block_definition = P2LbHelper::defaultBlockDefinition($type, $fields);

      break;

    case 'carousel':
      $type = 'uiowa_image_gallery';
      $title = $paragraph->field_uip_title->value;
      // Reverse the logic, because we're using it to
      // denote "hide," rather than display.
      $display_title = !$paragraph->field_uip_display_title->value;

      $carousel_image_ids = $paragraph->get('field_carousel_item')->getValue();
      // Grab the actual ids to pass to our loader.
      $carousel_image_ids = array_map(
        function ($arr) {
          return $arr['target_id'];
        }, $carousel_image_ids);

      $para_storage = \Drupal::service('entity_type.manager')
        ->getStorage('paragraph');
      $carousel_images = $para_storage->loadMultiple($carousel_image_ids);

      $fids = [];

      /** @var \Drupal\paragraphs\Entity\Paragraph $carousel_image */
      foreach ($carousel_images as $carousel_image) {
        $fids[] = $carousel_image->get('field_carousel_image_image')->getString();
      }

      $block_definition = P2LbHelper::defaultBlockDefinition('uiowa_image_gallery', [
        'field_uiowa_gallery_image' => $fids,
        // Build a headline out of the title
        // and display title options.
        'field_uiowa_headline' => [
          'headline' => $title,
          'heading_size' => 'h2',
          'hide_headline' => $display_title,
          'headline_style' => 'default',
        ],
      ]);

      break;

    case 'carousel_image':
      // We can skip this. Carousel images are handled in the carousel parent.
      break;

    case 'events':
      $type = 'uiowa_events';
      // @todo Map v2 TIDs to v3 list items.
      $audiences = $paragraph->field_events_audiences->value;
      $department = $paragraph->field_events_department->value;
      $types = $paragraph->field_events_event_types->value;
      $interests = $paragraph->field_events_gen_interests->value;
      $keywords = $paragraph->field_events_keywords->value;
      $more = $paragraph->field_events_more->value;
      $more_path = $paragraph->field_events_more_path->value;
      $past = $paragraph->field_events_past->value;
      $results = $paragraph->field_events_results->value;
      $title = $paragraph->field_uip_title->value;
      // Reverse the logic, because we're using it to
      // denote "hide," rather than display.
      $display_title = !$paragraph->field_uip_display_title->value;

      $block_definition = [
        'type' => 'uiowa_events',
        'langcode' => 'en',
        'status' => $paragraph->get('status')->getValue(),
        'reusable' => 0,
        'default_langcode' => 1,
        // @todo Make sure these are mapped correctly.
        'field_collection_more' => $more,
        'field_collection_more_path' => $more_path,
        // @todo Update this to use the new selector to set
        //   as upcoming, past, or date range.
        'field_uiowa_events_past' => $past,
        'field_collection_results' => $results,
        'field_uiowa_events_audiences' => $audiences,
        'field_uiowa_events_department' => $department,
        'field_uiowa_events_interests' => $interests,
        'field_uiowa_events_keywords' => $keywords,
        'field_uiowa_events_place' => [],
        'field_uiowa_events_types' => $types,
        // Build a headline out of the title
        // and display title options.
        'field_uiowa_headline' => _sitenow_p2lb_headline_config($title, $display_title),
      ];

      break;

    case 'featured_content':
      $type = 'featured_content';
      $title = $paragraph->field_uip_title->value;
      // Reverse the logic, because we're using it to
      // denote "hide," rather than display.
      $display_title = !$paragraph->field_uip_display_title->value;

      $block_definition = P2LbHelper::defaultBlockDefinition('featured_content', [
        'status' => $paragraph->get('status')->getValue(),
        'field_featured_content_item' => $paragraph->field_featured_content,
        'field_uiowa_headline' => _sitenow_p2lb_headline_config($title, $display_title),
        'layout_builder_styles' => _sitenow_p2lb_block_styles($type, $paragraph),
      ]);

      break;

    case 'image_gallery':
      $type = 'uiowa_image_gallery';
      $images = $paragraph->field_image;
      $title = $paragraph->field_uip_title->value;
      // Reverse the logic, because we're using it to
      // denote "hide," rather than display.
      $display_title = !$paragraph->field_uip_display_title->value;

      $block_definition = [
        'type' => $type,
        'langcode' => 'en',
        'reusable' => 0,
        'default_langcode' => 1,
        'status' => $paragraph->get('status')->getValue(),
        'field_uiowa_gallery_image' => $images,
        // Build a headline out of the title
        // and display title options.
        'field_uiowa_headline' => _sitenow_p2lb_headline_config($title, $display_title),
        'layout_builder_styles' => _sitenow_p2lb_block_styles($type, $paragraph),
      ];

      break;

    case 'people':
      $type = 'views_block:people_list_block-list_card';
      $more = $paragraph->field_people_more->value;
      $more_path = $paragraph->field_people_more_path?->uri;
      $title = $paragraph->field_uip_title->value;
      // Reverse the logic, because we're using it to
      // denote "hide," rather than display.
      $display_title = !$paragraph->field_uip_display_title->value;
      // Build our headline array, because for list blocks,
      // it gets stored in the config, not in a field.
      $headline = [
        "headline" => $title,
        "hide_headline" => $display_title,
        "heading_size" => "h2",
        "headline_style" => "default",
        "headline_alignment" => "default",
        "child_heading_size" => "h3",
      ];
      $pager = ($paragraph->field_uip_pager->value) ? 'full' : 'some';
      // Number of results that should be displayed.
      $results = $paragraph->field_uip_items->value;

      // The sort is either Sticky/First/Last
      // or Sticky/Last/First. Default to SLF.
      $sort = [
        'sticky' => [
          'order' => 'DESC',
          'weight' => '0',
        ],
        'field_person_last_name_value' => [
          'order' => 'ASC',
          'weight' => '0',
        ],
        'field_person_first_name_value' => [
          'order' => 'ASC',
          'weight' => '0',
        ],
      ];
      // Check if we need to change the last and first name positions.
      if ($paragraph->field_people_sort->value === 'block_people_sfl') {
        $last_name['field_person_last_name_value'] = $sort['field_person_last_name_value'];
        unset($sort['field_person_last_name_value']);
        $sort = array_merge($sort, $last_name);
      }
      // Tags to be used in the filter.
      $filter_tags = $paragraph->field_reference?->getValue();

      $exposed_filter_values = [];

      if ($filter_tags) {
        $exposed_filter_values['field_tags_target_id'] = $filter_tags;
      }

      // Build out the new view block configuration.
      $config = [
        'id' => $type,
        'label' => $label,
        'provider' => 'views',
        'label_display' => $display_label,
        'views_label' => '',
        'headline' => $headline,
        'pager' => $pager,
        'pager_offset' => 0,
        'items_per_page' => $results,
        'use_more' => $more,
        'use_more_link_url' => $more_path,
        'sort' => $sort,
        'exposed_filter_values' => $exposed_filter_values,
        'layout_builder_styles' => _sitenow_p2lb_block_styles($type, $paragraph),
        'context_mapping' => [],
      ];

      $uuid = \Drupal::service('uuid')->generate();
      break;

    case 'text':
      $type = 'uiowa_text_area';
      $label = 'Text block';
      $text = $paragraph->get('field_text_body')->getValue();
      // Default to no title, and we'll update later if needed.
      $title = '';
      $h_level = 'h2';

      // If the text block begins with a headline, grab it and
      // create a title from it.
      if (isset($text['value']) && preg_match('|\A<(h\d)>(.*?)<\/h\d>|', $text['value'], $matches)) {
        $h_level = $matches[1];
        $title = $matches[2];
        $text['value'] = str_replace(
          $matches[0],
          '',
          $text['value']
        );
      }

      $block_definition = [
        'type' => $type,
        'langcode' => 'en',
        'status' => $paragraph->get('status')->getValue(),
        'reusable' => 0,
        'default_langcode' => 1,
        // getValue sets both the text value and the format.
        'field_uiowa_text_area' => $text,
        'field_uiowa_headline' => _sitenow_p2lb_headline_config($title, 0, $h_level),
      ];

      break;

    case 'webform':
      $type = 'webform_block';
      $webform_data = $paragraph->get('field_webform')->getValue()[0];
      // Get the webform's uuid.
      $webform_manager = \Drupal::entityTypeManager()
        ->getStorage('webform');
      $webform = $webform_manager->loadByProperties(['id' => $webform_data['target_id']]);
      $webform_uuid = $webform[$webform_data['target_id']]->get('uuid');

      $webform_config = [
        'id' => 'webform_block',
        'provider' => 'webform',
        'label' => '',
        'label_display' => 0,
        'redirect' => 0,
        'default_data' => $webform_data['default_data'],
        'webform_id' => $webform_data['target_id'],
      ];

      // Webforms require a title in v2, but webform blocks do not
      // have a headline field in v3, so we need to build it out
      // as an additional text area.
      $title = $paragraph->get('field_uip_title')->getValue()[0]['value'];
      $display_title = !$paragraph->field_uip_display_title->value;
      $block_definition = [
        'type' => 'uiowa_text_area',
        'langcode' => 'en',
        'status' => 1,
        'reusable' => 0,
        'default_langcode' => 1,
        'field_uiowa_text_area' => [
          'value' => '',
          'format' => 'filtered_html',
        ],
        'field_uiowa_headline' => _sitenow_p2lb_headline_config($title, $display_title, 'h2'),
      ];
      break;

    default:

  }

  // If we have a block save it, and check that it saved successfully.
  if (!$block && !empty($block_definition)) {
    $block = \Drupal::entityTypeManager()
      ->getStorage('block_content')
      ->create($block_definition);
  }
  if (isset($block) && $block->save()) {
    $uuid = $block->get('uuid')->getValue()[0]['value'];
    $config = [
      'id' => 'inline_block:' . $block->bundle(),
      'label' => $label,
      'provider' => 'layout_builder',
      'label_display' => $display_label,
      'block_revision_id' => $block->getRevisionId(),
      'view_mode' => $view_mode ?? '',
    ];

    // Set the block usage to the node.
    $use_controller->addUsage($block->id(), $node);

    // Now that we have a saved block and it has an id,
    // set the parent_id for each of our children.
    foreach ($children as $child) {
      $child->set('parent_id', $block->id())
        ->save();
    }
  }

  if (!empty($config)) {
    switch ($paragraph->get('type')->getString()) {
      case 'webform':
        $styles = _sitenow_p2lb_block_styles($type, $paragraph);
        return [
          [
            'configuration' => $config,
            'uuid' => $uuid,
            'styles' => $styles,
            'id' => $paragraph?->field_uip_id->value,
          ],
          [
            'configuration' => $webform_config,
            'uuid' => $webform_uuid,
            'styles' => $styles,
            'id' => NULL,
          ],
        ];
    }

    return [
      [
        'configuration' => $config,
        'uuid' => $uuid,
        'styles' => _sitenow_p2lb_block_styles($type, $paragraph),
        'id' => $paragraph?->field_uip_id->value,
      ],
    ];
  }

  // No block was successfully created.
  return [];
}

/**
 * Simple helper to create a section array.
 */
function sitenow_p2lb_create_section_array($layout_id, $layout_settings, array $components = []): array {
  return [
    'layout_id' => $layout_id,
    'components' => $components,
    'layout_settings' => $layout_settings,
  ];
}

/**
 * Choose multi-col column settings.
 */
function sitenow_p2lb_multicol_settings($col_widths) {
  $settings = '';

  // Different multi-cols have different options to choose from.
  switch (count($col_widths)) {
    case 2:
      // Helper variable to determine the layout options.
      $options = [
        3 => '25-75',
        4 => '33-67',
        6 => '50-50',
        8 => '67-33',
        9 => '75-25',
      ];
      // Check the first column and use to determine the split.
      $picker = $col_widths[0];
      if (in_array($picker, $options)) {
        $settings = $options[$picker];
      }
      // Default to a 50-50 split if anything went wrong.
      else {
        $settings = $options[6];
      }
      break;

    case 3:
      // If first col is half width, others are 25.
      if ($col_widths[0] === 6) {
        $settings = '50-25-25';
      }
      // First col is 25, then two options are available.
      elseif ($col_widths[0] === 3) {
        // Check the middle col to determine which gets the 50.
        if ($col_widths[1] === 3) {
          $settings = '25-25-50';
        }
        else {
          $settings = '25-50-25';
        }
      }
      // If anything went wrong, or didn't match, default to even thirds.
      else {
        $settings = '33-34-33';
      }
      break;

    case 1:
    case 4:
    default:
      break;
  }
  return $settings;
}

/**
 * Match paragraphs section styles to lb section styles.
 */
function sitenow_p2lb_section_styles($section_object) {
  $paragraph_styles = $section_object
    ->get('field_uip_classes')
    ->getValue();

  $style_matcher = [
    'bg-light' => 'section_background_style_gray',
    'bg-dark' => 'section_background_style_gray',
    'bg-black' => 'section_background_style_black',
    'bg-yellow' => 'section_background_style_gold',
    'pt-5' => 'section_padding_top_extra',
    'pb-5' => 'section_padding_bottom_extra',
  ];
  $styles = [];

  foreach ($paragraph_styles as $paragraph_style) {
    $style_string = $paragraph_style['value'];
    if (isset($style_matcher[$style_string])) {
      $styles[$style_matcher[$style_string]] = $style_matcher[$style_string];
    }
  }
  return $styles;
}

/**
 * Creates an lb section for paragraphs section background image.
 */
function sitenow_p2lb_section_image($section_image_fid, $banner_text, $node) {
  $section_array = [];

  $text = $banner_text?->get('field_text_body')?->first()->getValue() ?? [
    'value' => '',
    'format' => NULL,
  ];

  $h_level = 'h2';
  $title = '';

  // Check if the text begins with an <h#> tag.
  if (preg_match('|\A<(h\d)>(.*?)<\/h\d>|', $text['value'], $matches)) {
    $h_level = $matches[1];
    $title = $matches[2];
    $text['value'] = str_replace(
      $matches[0],
      '',
      $text['value']
    );
  }

  $link = NULL;
  // Check if a link is present, and extract info.
  // (Content)(Full link content (HREF))(Other content).
  // Assumes only one button or link is present.
  // Any more links will remain in the body.
  if (preg_match('|(.*?)(<a.*?href="(.*?)".*?>(.*?)<\/a>)(.*)|is', $text['value'], $matches)) {
    $text['value'] = strip_tags($matches[1] . $matches[5],
      ['p', 'a', 'strong', 'em', 'h2', 'h3', 'h4', 'h6']);
    // Set URI based on link being absolute or relative.
    $uri = (substr($matches[3], 0, 4) === 'http') ?
      $matches[3] : \Drupal::request()->getSchemeAndHttpHost() . $matches[3];
    // Construct an appropriate link field.
    $link = [
      'uri' => $uri,
      'title' => strip_tags($matches[4]),
      'options' => [],
    ];
  }

  // Banner only allows up to minimal. Change if needed.
  $text['format'] = ($text['format'] === 'filtered_html') ?
    'minimal' : $text['format'];

  if (empty($text['value']) && empty($title) && empty($excerpt)) {
    $block = \Drupal::entityTypeManager()
      ->getStorage('block_content')
      ->create(P2LbHelper::defaultBlockDefinition('uiowa_image', [
        'field_uiowa_image_image' => $section_image_fid,
      ]));
  }
  else {
    $block = \Drupal::entityTypeManager()
      ->getStorage('block_content')
      ->create(P2LbHelper::defaultBlockDefinition('uiowa_banner', [
        'field_uiowa_banner_excerpt' => $text,
        'field_uiowa_banner_image' => $section_image_fid,
        'field_uiowa_banner_title' => [
          'size' => $h_level,
          'text' => $title,
        ],
        'field_uiowa_banner_link' => $link,
      ]));
  }

  // If we have a block save it, and check that it saved successfully.
  if ($block->save()) {
    // Create the config that will be used to set the block in its section.
    $uuid = $block->get('uuid')?->value;
    $block_config = [
      'id' => "inline_block:{$block->bundle()}",
      'label' => '',
      'provider' => 'layout_builder',
      'label_display' => 0,
      'block_revision_id' => $block->getRevisionId(),
      'view_mode' => 'full',
    ];
    $layout_settings = [
      'label' => '',
      'column_widths' => [],
      'layout_builder_styles_style' => [
        'section_margin_edge_to_edge' => 'section_margin_edge_to_edge',
      ],
    ];

    $components = [
      $uuid => [
        'uuid' => $uuid,
        'region' => 'content',
        'configuration' => $block_config,
        'weight' => 0,
        'additional' => [
          'layout_builder_styles_style' => [
            'media_format_widescreen',
          ],
        ],
      ],
    ];

    if ($block->bundle() === 'uiowa_banner') {
      $components[$uuid]['additional']['layout_builder_styles_style'] = [
        'image',
        'headline_medium',
        'banner_centered',
        'banner_gradient_dark',
        'banner_medium',
        'button_primary',
        'headline_bold_serif',
      ];

      // If there was a unique id set on the text paragraph,
      // we should set it on our banner config.
      if ($id = $banner_text?->field_uip_id->value) {
        $components[$uuid]['third_party_settings'] = [
          'layout_builder_custom' => [
            'unique_id' => $id,
          ],
        ];
      }
    }

    // Create the section array.
    $section_array = sitenow_p2lb_create_section_array('layout_onecol', $layout_settings, $components);

    // Update the block usage to the node.
    $database = \Drupal::database();
    $use_controller = new InlineBlockUsage($database);
    $use_controller->addUsage($block->id(), $node);

  }
  return $section_array;
}

/**
 * Default block style settings.
 */
function _sitenow_p2lb_block_styles($block_type, $paragraph = NULL) {
  switch ($block_type) {
    // @todo Update to make sure we have all blocks correctly covered,
    //   and update with latest default styles.
    case 'views_block:article_list_block-list_article':
      return [
        'block_background_style_light',
        'card_media_position_right',
        'card_headline_style_serif',
        'media_format_widescreen',
        'media_size_small',
        'list_format_list',
        'block_grid_threecol_33_34_33',
        'no_border',
      ];

    case 'uiowa_quote':
      return [
        'quote_left',
        'quote_above',
      ];

    case 'uiowa_card':
      return [
        'block_background_style_light',
        'card_image_large',
        'card_media_position_stacked',
        'content_alignment_left',
        'media_format_widescreen',
      ];

    case 'uiowa_events':
      return [
        'block_background_style_light',
        'card_media_position_left',
        'card_headline_style_serif',
        'media_format_circle',
        'media_size_small',
        'content_alignment_left',
        'card_image_small',
        'list_format_list',
        'block_grid_threecol_33_34_33',
        'no_border',
      ];

    case 'uiowa_image_gallery':
      $styles = [
        'media_format' => 'media_format_square',
      ];
      $classes = $paragraph->field_uip_classes?->getString();

      if (!is_null($classes)) {
        if (str_contains($classes, 'masonry')) {
          $styles['media_format'] = 'media_format_no_crop';
          $styles['block_image_gallery_style_masonry'] = 'block_image_gallery_style_masonry';
        }
      }

      return array_values($styles);

    case 'featured_content':
      $styles = [
        'list_format' => 'list_format_list',
        'list_grid' => 'block_grid_threecol_33_34_33',
        'border' => 'no_border',
      ];
      $classes = $paragraph->field_uip_classes?->getString();

      if (!is_null($classes)) {
        if (str_contains($classes, 'grid') || str_contains($classes, 'masonry')) {
          $styles['list_format'] = 'list_format_grid';
        }
        if (str_contains($classes, 'hide-images')) {
          $styles['block_hide_images'] = 'block_hide_images';
        }
        if (str_contains($classes, 'hide-descriptions')) {
          $styles['block_hide_descriptions'] = 'block_hide_descriptions';
        }
      }

      return array_values($styles);

    case 'views_block:people_list_block-list_card':
      return [
        'block_background_style_light',
        'card_media_position_left',
        'card_headline_style_serif',
        'media_format_circle',
        'media_size_small',
        'content_alignment_left',
        'list_format_list',
        'block_grid_threecol_33_34_33',
        'no_border',
      ];

    case 'uiowa_text_area':
      // Text areas are a little different, and can make use of the
      // section styles method.
      return sitenow_p2lb_section_styles($paragraph);

    default:
      return [];
  }
}

/**
 * Headline field configuration.
 */
function _sitenow_p2lb_headline_config($title = '', $display_title = 0, $heading_size = 'h2') {
  return [
    'headline' => $title,
    'heading_size' => $heading_size,
    'hide_headline' => $display_title,
    'headline_style' => 'default',
  ];
}

/**
 * Get default page sections config from default config.
 */
function _sitenow_p2lb_get_page_lb_sections_config() {
  $config_path = DRUPAL_ROOT . '/../config/default';
  $source = new FileStorage($config_path);
  $config = $source->read('core.entity_view_display.node.page.default');

  return $config['third_party_settings']['layout_builder']['sections'];
}

/**
 * Get the protected revision id generated by p2lb.
 *
 * @param string $nid
 *   The node id to get the p2lb protected revision id from.
 *
 * @return string|null
 *   The protected revision id or null if none found.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function sitenow_p2lb_get_protected_revision_id(string $nid) {

  // Guard against the node id being null.
  if (!$nid) {
    return NULL;
  }

  // Load the node storage.
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  // Get the node's most recent revision id.
  $most_recent_revision_id = $node_storage?->getLatestRevisionId($nid);

  // Load the most recent revision.
  $most_recent_revision = $node_storage?->loadRevision($most_recent_revision_id);

  // Get protected revision id from that revision's values.
  // Return the protected revision id.
  return $most_recent_revision?->field_v3_conversion_revision_id?->value;
}

/**
 * Load a protected revision.
 *
 * @param string $nid
 *   The id of the node that needs a protected revision fetched.
 *
 * @return \Drupal\Core\Entity\RevisionableInterface|null
 *   The Entity array for the protected revision or null if not found.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function sitenow_p2lb_get_protected_revision(string $nid): ?RevisionableInterface {

  // Get the protected revision id.
  $protected_revision_id = sitenow_p2lb_get_protected_revision_id($nid);

  // If this is a new node, don't bother with the query.
  if ($protected_revision_id === 'v3_new') {
    return NULL;
  }

  // Return the protected revision or NULL.
  /** @var \Drupal\Core\Entity\RevisionableInterface $revision */
  $revision = \Drupal::entityTypeManager()
    ?->getStorage('node')
    ?->loadRevision($protected_revision_id);

  return $revision;
}

/**
 * Helper function to clear a node's layout builder tempstore.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The id of the node that needs its tempstore cleared.
 *
 * @return bool
 *   Whether there was a tempstore that needed clearing or not.
 */
function sitenow_p2lb_clear_tempstore(ContentEntityInterface $entity): bool {

  // Got hints for how to do this from here.
  // https://www.drupal.org/node/3012353
  $temp_store_repository = \Drupal::service('layout_builder.tempstore_repository');
  $entity_context = EntityContext::fromEntity($entity);

  // Our 'plugin' is 'overrides', or the 'unsaved changes' of a node.
  $overrides_section_storage = \Drupal::service('plugin.manager.layout_builder.section_storage')
    ->load('overrides', ['entity' => $entity_context]);

  // If it exists, clear it out.
  if ($temp_store_repository->has($overrides_section_storage)) {
    $temp_store_repository->delete($overrides_section_storage);
    return TRUE;
  }

  // Else, return false, signifying no need to clear tempstore.
  return FALSE;
}
