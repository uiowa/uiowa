<?php

/**
 * @file
 * Install hooks for sitenow_people.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Site\Settings;
use Drupal\node\Entity\Node;

/**
 * Updates any site with 'person_extended' split.
 *
 * Converts the research areas field to use a new field name.
 */
function sitenow_people_update_8001() {
  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
  $split = 'config_split:person_extended';

  // This site has the 'person_extended' split enabled.
  if (isset($filters[$split]) && $filters[$split]['status']) {
    // This site does not have the 'collegiate' split enabled.
    $config_path = DRUPAL_ROOT . '/../config/features/person_extended';
    $source = new FileStorage($config_path);

    // Create field storage from new config.
    \Drupal::entityTypeManager()->getStorage('field_storage_config')
      ->create($source->read('field.storage.node.field_person_research_areas'))
      ->save();

    // Create field instance from new config.
    \Drupal::entityTypeManager()->getStorage('field_config')
      ->create($source->read('field.field.node.person.field_person_research_areas'))
      ->save();

    // Get all the person nodes.
    $nids = \Drupal::entityQuery('node')
      ->accessCheck()
      ->condition('type', 'person')
      ->execute();

    $nodes = Node::loadMultiple($nids);

    // Update the new field to the value of the old field.
    foreach ($nodes as $node) {
      $research_areas = $node->get('person_pt_faculty_research_areas')->getValue();
      $node
        ->set('field_person_research_areas', $research_areas)
        ->save();
    }
  }
}

/**
 * Moves data from 'person_type' to 'person_types' field.
 *
 * Only runs on sites that have 'person_extended' enabled.
 */
function sitenow_people_update_8002() {
  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
  $split = 'config_split:person_extended';

  // This site has the 'person_extended' split enabled.
  if (isset($filters[$split]) && $filters[$split]['status']) {
    $config_path = DRUPAL_ROOT . '/../config/default';
    $source = new FileStorage($config_path);

    // Create field storage from new config.
    \Drupal::entityTypeManager()->getStorage('field_storage_config')
      ->create($source->read('field.storage.node.field_person_types'))
      ->save();

    // Create field instance from new config.
    \Drupal::entityTypeManager()->getStorage('field_config')
      ->create($source->read('field.field.node.person.field_person_types'))
      ->save();

    // Get all the person nodes.
    $nids = \Drupal::entityQuery('node')
      ->accessCheck()
      ->condition('type', 'person')
      ->execute();

    $nodes = Node::loadMultiple($nids);

    // Get an array of person type config data.
    $list = $source->readMultiple($source->listAll('sitenow_people.person_type'));

    // Create a map from person type labels (which correspond
    // to the terms being used previously) to the id of the
    // person type.
    $map = [];
    foreach ($list as $config) {
      $map[$config['label']] = $config['id'];
    }

    foreach ($nodes as $node) {
      if (!is_null($person_type_field = $node->field_person_type) && $term = $person_type_field->entity) {
        // Use the map to set the value of the new field
        // from the old one.
        $node
          ->set('field_person_types', $map[$term->getName()])
          ->save();
      }
    }

    // Delete all the person type terms so that
    // the vocabulary can be removed.
    /** @var \Drupal\taxonomy\Entity\Vocabulary $terms */
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('person_types', 0, NULL, TRUE);
    /** @var \Drupal\taxonomy\Entity\Term $term */
    foreach ($terms as $term) {
      $term->delete();
    }
  }
}

/**
 * Add people filters to existing sites.
 */
function sitenow_people_update_9101() {
  // Get the current stuff.
  $current_view = \Drupal::entityTypeManager()->getStorage('view')->load('people');
  $current_default =& $current_view->getDisplay('default');
  $current_displays = $current_view->get('display');
  if ($current_view->get('status') === TRUE) {
    $current_status = 1;
  }
  else {
    $current_status = 0;
  }
  foreach ($current_displays as $current_display) {
    // Override the default sort value. Assumes only one display is enabled...
    if (isset($current_display['display_options']['enabled']) && $current_display['display_options']['enabled'] === 1) {
      $enabled_id = $current_display['id'];
      $current_path = $current_display['display_options']['path'];
    }
  }
  $current_title = $current_default['display_options']['title'];
  $current_header = $current_default['display_options']['header']['area']['content']['value'];

  // Load the new config. Wiping everything else out.
  $config_path = Settings::get('config_sync_directory');
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write('views.view.people', $source->read('views.view.people'));
  drupal_flush_all_caches();

  // Set the existing config again.
  $view = \Drupal::entityTypeManager()->getStorage('view')->load('people');
  $default =& $view->getDisplay('default');
  $default['display_options']['header']['area']['content']['value'] = $current_header;
  $default['display_options']['title'] = $current_title;
  if ($current_status === 1) {
    $view->set('status', TRUE);
    $displays = $view->get('display');
    unset($displays['default']);
    foreach ($displays as $display) {
      $display[$display['id']] =& $view->getDisplay($display['id']);
      if (isset($current_path)) {
        $display[$display['id']]['display_options']['path'] = $current_path;
      }
      $display[$display['id']]['display_options']['enabled'] = FALSE;
    }
    if (isset($enabled_id)) {
      $enabled_display =& $view->getDisplay($enabled_id);
      $enabled_display['display_options']['enabled'] = TRUE;
    }
  }
  else {
    $view->set('status', FALSE);
  }

  $view->save();

}

/**
 * Add tag and related display config setting to people.
 */
function sitenow_people_update_9301() {
  $config = \Drupal::configFactory()->getEditable('sitenow_people.settings');
  $config->set('tag_display', 'do_not_display');
  $config->set('related_display', 'do_not_display');
  $config->save();
}

/**
 * Add link indicator on teasers config setting to people.
 */
function sitenow_people_update_9302() {
  $config = \Drupal::configFactory()->getEditable('sitenow_people.settings');
  $config->set('show_teaser_link_indicator', FALSE);

  $config->save();
}

/**
 * Make Research Areas label customizable.
 */
function sitenow_people_update_9303() {
  $config = \Drupal::configFactory()->getEditable('sitenow_people.settings');

  // Load the entity field manager service.
  $entityFieldManager = \Drupal::service('entity_field.manager');

  // Load the field instance for the 'field_person_research_areas' field.
  $fieldInstance = $entityFieldManager->getFieldDefinitions('node', 'person')['field_person_research_areas'];

  // Set the default label
  // to the label of the 'field_person_research_areas' field.
  $default_label = $fieldInstance->getLabel();
  $config->set('research_title', $default_label);

  $config->save();
}

/**
 * Re-save all person nodes.
 */
function sitenow_people_update_10000(&$sandbox) {

  // Import rabbit hole config.
  $config_storage = \Drupal::service('config.storage');
  $config_path = DRUPAL_ROOT . '/../config/default';

  $config_names = [
    'field.storage.node.rabbit_hole__settings',
    'field.field.node.person.rabbit_hole__settings',
  ];

  // Import configs.
  $source = new FileStorage($config_path);
  foreach ($config_names as $config_name) {
    $config_data = $source->read($config_name);

    if ($config_data) {
      $config_storage->write($config_name, $config_data);
    }
  }

  // Process all nodes.
  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('node')
      ->accessCheck()
      ->condition('type', 'person')
      ->execute();
    $sandbox['total'] = count($query);
    $sandbox['current'] = 0;
    $sandbox['query'] = $query;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Loop through the same nodes in batches.
  $nodes_per_batch = 25;
  $batch = array_slice($sandbox['query'], $sandbox['current'], $nodes_per_batch);
  if (empty($batch)) {
    $sandbox['#finished'] = 1;
    return;
  }

  foreach ($batch as $nid) {
    $node = Node::load($nid);

    if ($node && $node->hasField('rabbit_hole__settings')) {
      // Check for required field values before processing.
      $link_direct = (int) $node->get('field_person_website_link_direct')->value;
      $source_link = $node->get('field_person_website')->uri;

      // Only process nodes with direct link enabled and source link set.
      if ($link_direct === 1 && isset($source_link) && !empty($source_link)) {
        $node->setNewRevision(TRUE);
        $node->rabbit_hole__settings->setValue([
          "action" => "page_redirect",
          "settings" => [
            "redirect" => "[node:field_person_website:0:uri]",
            "redirect_code" => 301,
            "redirect_fallback_action" => "display_page",
          ],
        ]);
        $node->setRevisionLogMessage('Automated save')
          ->setRevisionUserId(1)
          ->setRevisionCreationTime(\Drupal::time()->getRequestTime())
          ->setChangedTime(\Drupal::time()->getRequestTime())
          ->setRevisionTranslationAffected(TRUE);
        $node->save();
      }
    }

    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' nodes processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
    drupal_flush_all_caches();
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Update people views ignored configuration while keeping site customizations.
 */
function sitenow_people_update_10001() {
  // Get the current stuff.
  $current_view = \Drupal::entityTypeManager()->getStorage('view')->load('people');
  $current_default =& $current_view->getDisplay('default');
  $current_displays = $current_view->get('display');
  if ($current_view->get('status') === TRUE) {
    $current_status = 1;
  }
  else {
    $current_status = 0;
  }
  foreach ($current_displays as $current_display) {
    // Override the default sort value. Assumes only one display is enabled...
    if (isset($current_display['display_options']['enabled']) && $current_display['display_options']['enabled'] === TRUE) {
      $enabled_id = $current_display['id'];
      $current_path = $current_display['display_options']['path'];
    }
  }
  $current_title = $current_default['display_options']['title'];
  $current_header = $current_default['display_options']['header']['area']['content']['value'];

  // Get the current filters.
  $current_filters = $current_default['display_options']['filters'];

  // Load the new config. Wiping everything else out.
  $config_path = Settings::get('config_sync_directory');
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write('views.view.people', $source->read('views.view.people'));
  drupal_flush_all_caches();

  // Set the existing config again.
  $view = \Drupal::entityTypeManager()->getStorage('view')->load('people');
  $default =& $view->getDisplay('default');
  $default['display_options']['header']['area']['content']['value'] = $current_header;
  $default['display_options']['title'] = $current_title;
  if ($current_status === 1) {
    $view->set('status', TRUE);
    $displays = $view->get('display');
    unset($displays['default']);
    foreach ($displays as $display) {
      $display[$display['id']] =& $view->getDisplay($display['id']);
      if (isset($current_path)) {
        $display[$display['id']]['display_options']['path'] = $current_path;
      }
      $display[$display['id']]['display_options']['enabled'] = FALSE;
    }
    if (isset($enabled_id)) {
      $enabled_display =& $view->getDisplay($enabled_id);
      $enabled_display['display_options']['enabled'] = TRUE;
    }
    // Set sitenow_people.settings with display_filter selections based
    // on the current exposed filters.
    $filters_to_toggle = [
      'combine' => 'combine',
      'type' => 'field_person_types_target_id',
      'research' => 'field_person_research_areas_target_id',
    ];
    $filters = [];
    foreach ($filters_to_toggle as $filter_name => $filter_id) {
      if (isset($current_filters[$filter_id]) && $current_filters[$filter_id]['exposed'] === TRUE) {
        $filters[$filter_name] = TRUE;
      }
      else {
        $filters[$filter_name] = FALSE;
      }
    }
    $config = \Drupal::configFactory()->getEditable('sitenow_people.settings');
    $config->set('filter_display', $filters);
    $config->save();

  }
  else {
    $view->set('status', FALSE);
  }

  $view->save();

}
