<?php

/**
 * @file
 * Primary module hooks for SiteNow People module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\uiowa_core\HeadlineHelper;
use Drupal\views\Entity\View;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
 * Implements hook_form_alter().
 */
function sitenow_people_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_person_edit_form':
    case 'node_person_form':
      $form['#prefix'] = '<div id="form-ajax-wrapper">';
      $form['#suffix'] = '</div>';
      // Our submit handler must execute before the layout_builder_styles one
      // so it can take advantage of the logic there.
      array_unshift($form['actions']['submit']['#submit'], '_sitenow_people_person_form_submit');

      if (isset($form['field_person_hide'])) {
        // Set field_person_hide to options group (promotion options).
        $form['field_person_hide']['#group'] = 'options';
      }

      if (isset($form['field_person_types'])) {
        // Remove disabled person types from select list.
        $disabled_types = \Drupal::entityTypeManager()
          ->getStorage('person_type')->loadByProperties(['status' => FALSE]);
        foreach ($form['field_person_types']['widget']['#options'] as $key => $option) {
          if (array_key_exists($key, $disabled_types)) {
            unset($form['field_person_types']['widget']['#options'][$key]);
          }
        }
        $allowed_types = \Drupal::entityTypeManager()
          ->getStorage('person_type')->loadByProperties(['status' => TRUE]);
        // Loop through fields.
        foreach (Element::children($form) as $field_name) {
          $conditions = [];
          // Loop through allowed types looking for field name.
          foreach ($allowed_types as $key => $type) {
            $allowed_fields = $type->getAllowedFields();
            // If match, create a visibility condition.
            if (in_array($field_name, $allowed_fields)) {
              $conditions[] = [
                ':input[name="field_person_types[' . $key . ']"]' => [
                  'checked' => TRUE,
                ],
              ];
            }
          }
          // If any conditions have been set, add them to the field.
          if (!empty($conditions)) {
            $form[$field_name] += [
              '#states' => [
                'visible' => $conditions,
              ],
            ];
          }
        }
        // Show/hide person type statuses based on person type selections.
        $form['field_person_types']['widget']['#ajax'] = [
          'callback' => '_person_types_callback',
          'event' => 'change',
          'wrapper' => 'form-ajax-wrapper',
          'speed' => 'fast',
          'progress' => [
            'type' => 'throbber',
            'message' => t('Please wait...'),
          ],
        ];

        $type_selections = [];

        if (!empty($form_state->getValue('field_person_types'))) {
          $types = $form_state->getValue('field_person_types');
          // Adjust structure of array.
          foreach ($types as $value) {
            $type_selections[] = $value['target_id'];
          }
        }
        elseif (!empty($form['field_person_types']['widget']['#default_value'])) {
          $type_selections = $form['field_person_types']['widget']['#default_value'];
        }
        else {
          $form['field_person_type_status']['#access'] = FALSE;
          return $form;
        }

        if (!empty($type_selections)) {
          $person_type_status_options = $form['field_person_type_status']['widget']['#options'];
          foreach ($person_type_status_options as $key => $option) {
            // Unset options that aren't associated with selected person type.
            if (!in_array($key, $type_selections)) {
              unset($person_type_status_options[$key]);
            }
          }
          $form['field_person_type_status']['widget']['#options'] = $person_type_status_options;
        }
      }

      // If it exists, change the 'Link text' field to say 'Label' on
      // the website field, because that makes more sense in this context.
      if (isset($form['field_person_website'])) {
        foreach (Element::children($form['field_person_website']['widget']) as $k) {
          $form['field_person_website']['widget'][$k]['title']['#title'] = t('Label');
        }
      }

      break;
  }
}

/**
 * Custom callback for person types field.
 */
function _person_types_callback(&$form, $form_state) {
  return $form;
}

/**
 * Implements hook_entity_presave().
 */
function sitenow_people_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'person':
      // Setting the title with the first/last name values.
      $output = $entity->get('field_person_first_name')->value . " " . $entity->get('field_person_last_name')->value;
      $entity->setTitle($output);
      break;

  }
}

/**
 * Implements hook_entity_view_alter().
 */
function sitenow_people_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    // @todo Remove this line and just use $entity->bundle() instead.
    if (isset($build['#node']) && $node = $build['#node']) {
      switch ($node->getType()) {
        case 'person':
          if (!is_null($advisor_field = $node->field_pt_student_advisor) && $advisor = $advisor_field->entity) {
            $hide_person = $advisor->field_person_hide->value;

            if ($hide_person) {
              // Display advisor name as plain text.
              $build['field_pt_student_advisor'][0] = [
                '#plain_text' => $advisor->getTitle(),
              ];
            }
          }
          break;
      }
    }
  }
}

/**
 * Alter the fields used to represent an entity in the IEF table.
 *
 * @param array $fields
 *   The fields, keyed by field name.
 * @param array $context
 *   An array with the following keys:
 *   - parent_entity_type: The type of the parent entity.
 *   - parent_bundle: The bundle of the parent entity.
 *   - field_name: The name of the reference field on which IEF is operating.
 *   - entity_type: The type of the referenced entities.
 *   - allowed_bundles: Bundles allowed on the reference field.
 *
 * @see \Drupal\inline_entity_form\InlineFormInterface::getTableFields()
 */
function sitenow_people_inline_entity_form_table_fields_alter(array &$fields, array $context) {
  if ($context['entity_type'] == 'node') {
    // Clean up, minimize the person IEF form.
    if (in_array('person', $context['allowed_bundles'])) {
      unset($fields['label']);
      unset($fields['status']);
      $fields['field_person_first_name'] = [
        'type' => 'field',
        'label' => t('First Name'),
        'weight' => 0,
      ];
      $fields['field_person_last_name'] = [
        'type' => 'field',
        'label' => t('Last Name'),
        'weight' => 1,
      ];
      $fields['moderation_state'] = [
        'type' => 'field',
        'label' => t('State'),
        'weight' => 2,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_page_title(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == 'entity.node.canonical') {
      $node = \Drupal::routeMatch()->getParameter('node');
    }
    elseif ($route_name == 'entity.node.preview') {
      $node = \Drupal::routeMatch()->getParameter('node_preview');
    }
    if (isset($node)) {
      switch ($node->getType()) {
        case 'person':
          if ($node->hasField('field_person_credential') && !$node->get('field_person_credential')
            ->isEmpty()) {
            $variables['subtitle'] = $node->field_person_credential->value;
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_page(&$variables) {
  $current_route = \Drupal::routeMatch();
  $route_name = $current_route->getRouteName();
  if (strpos($route_name, 'view.people.') === 0) {
    // Get the current user.
    $user = \Drupal::currentUser();
    // Check for permission.
    if ($user->hasPermission('administer sitenow people') == TRUE) {
      // Print warning message informing user to use SiteNow People settings.
      $url = Url::fromRoute('sitenow_people.settings_form');
      $settings_link = Link::fromTextAndUrl(t('SiteNow People'), $url)
        ->toString();
      if ($route_name == 'view.people.page_people_table') {
        $message_text = t('This page can be configured here: @settings_link.
        This page is currently manually sorted.
        You can adjust the order by dragging the arrows up/down and then clicking "Save order" at the bottom of this page.', [
          '@settings_link' => $settings_link,
        ]);
      }
      else {
        $message_text = t('This page can be configured here: @settings_link', [
          '@settings_link' => $settings_link,
        ]);
      }

      \Drupal::messenger()->addStatus($message_text);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_views_view(&$variables) {
  switch ($variables["id"]) {
    case 'people':
      // Unset header content if empty.
      if (empty($variables["header"]["area"]["#text"])) {
        unset($variables["header"]["area"]);
      }
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_node(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    $node = $variables["node"];
    switch ($node->getType()) {
      case 'person':
        switch ($variables['view_mode']) {
          case 'teaser':
            // Heading needs to change by placement. Defaults to h3 in twig.
            $current_route = \Drupal::routeMatch();
            $route_name = $current_route->getRouteName();
            $variables['#cache']['contexts'][] = 'route.name';
            if (strpos($route_name, 'view.people.') === 0) {
              $variables['heading_size'] = 'h2';
            }
            break;
        }
        break;
    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_field(&$variables) {
  switch ($variables["element"]["#field_name"]) {
    // Change header class for person position based on view mode.
    case 'field_person_position':
      switch ($variables["element"]["#view_mode"]) {
        case 'full':
          $variables['attributes']['class'][] = 'h5';
          break;

        case 'teaser':
          $variables['attributes']['class'][] = 'h6';
          break;
      }
      break;
  }
}

/**
 * Implements hook_uip_classes_alter().
 */
function sitenow_people_uip_classes_alter(&$options, $entity, $bundle) {
  switch ($bundle) {
    case 'people':
      $options['hide-descriptions'] = 'Hide Biographies';
      $options['hide-images'] = 'Hide Images';
      $options['grid'] = 'Grid';
      $options['masonry'] = 'Masonry';
      break;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function sitenow_people_views_pre_render(ViewExecutable $view) {
  // Add <th> label for Draggable Views, otherwise it is flagged
  // for accessibility.
  if ($view->id() == "people" && $view->current_display == 'page_people_table') {
    $view->field["draggableviews"]->options["label"] = 'Sort Control';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  switch ($paragraph->bundle()) {
    case 'people':
      $admin_context = \Drupal::service('router.admin_context');
      if (!$admin_context->isAdminRoute()) {

        // Display title if it exists.
        if ($paragraph->hasField('field_uip_display_title')) {
          if ($paragraph->field_uip_display_title->value == 1) {
            $variables['display_title'] = TRUE;
          }
        }

        if ($paragraph->hasField('field_uip_classes') && !$paragraph->get('field_uip_classes')->isEmpty()) {
          $classes = $paragraph->get('field_uip_classes')->getValue();
          // Clean array of classes selected.
          $classes = array_column($classes, 'value');
          // Check for grid classes otherwise add list class.
          $display_options = [
            'grid',
            'masonry',
          ];
          $result = array_intersect($display_options, $classes);
          if (!$result) {
            $variables['attributes']['class'][] = 'list';
          }
        }
        else {
          $variables['attributes']['class'][] = 'list';
        }
        // Get field_uip_colwidth value.
        if ($paragraph->hasField('field_uip_colwidth')) {
          $variables['attributes']['class'][] = $paragraph->field_uip_colwidth->value;
        }
        // Get field_uip_id value.
        if ($paragraph->hasField('field_uip_id')) {
          $variables['attributes']['id'][] = Html::getClass($paragraph->field_uip_id->value);
        }

        if ($paragraph->hasField('field_people_sort') && !$paragraph->get('field_people_sort')->isEmpty()) {
          if ($paragraph->field_people_sort->value == 'block_people_slf') {
            $view = Views::getView('people_block');
            $view->setDisplay('block_people_slf');
          }
          elseif ($paragraph->field_people_sort->value == 'block_people_sfl') {
            $view = Views::getView('people_block');
            $view->setDisplay('block_people_sfl');
          }
        }

        if ($paragraph->hasField('field_reference') && !$paragraph->get('field_reference')->isEmpty()) {
          $tids = $paragraph->get('field_reference')->getValue();
          // Clean array of tids selected.
          $tids = array_column($tids, 'target_id');
        }
        else {
          $tids = ['all'];
        }
        // Contextual relationship filter.
        $args = implode('+', $tids);
        $view->setArguments([$args]);

        if ($paragraph->hasField('field_uip_items') && !$paragraph->get('field_uip_items')->isEmpty()) {
          $items = $paragraph->field_uip_items->value;
          $view->setItemsPerPage($items);
          $view->setExposedInput([
            'items_per_page' => $items,
          ]);
        }
        $pager_type = 'some';
        // Show pager if it exists and is set.
        if ($paragraph->hasField('field_uip_pager')) {
          if ($paragraph->field_uip_pager->value == 1) {
            $pager_type = 'full';
          }
        }

        $pager = $view->display_handler->getOption('pager');
        // IF show pager, change pager_type to 'full'.
        $pager['type'] = $pager_type;
        $view->display_handler->setOption('pager', $pager);

        $view->preExecute();
        $view->execute();
        $variables['content']['view'] = $view->render();

        // If we have more link checked and link provided, pass it.
        if ($paragraph->hasField('field_people_more')) {
          $more = ($paragraph->field_people_more->value == 1) ? TRUE : FALSE;
          if ($more == TRUE) {
            $variables['more'] = [
              '#type' => 'container',
              '#attributes' => [
                'class' => 'more-link',
              ],
            ];

            $view = View::load('people');
            $default =& $view->getDisplay('default');

            if (!empty($more_path = $paragraph->get('field_people_more_path')->getValue())) {
              $url = Url::fromUri($more_path[0]['uri']);
            }

            // Only render more link if one other display is enabled.
            $displays = [
              'page_people_sfl',
              'page_people_slf',
              'page_people_table',
            ];

            foreach ($displays as $display) {
              if ($view->getDisplay($display)['display_options']['enabled'] == TRUE) {
                $url = Url::fromRoute('view.people.' . $display);
                break;
              }
            }

            if (isset($url)) {
              $variables['more']['btn'] = [
                '#type' => 'link',
                '#title' => 'View more ' . strtolower($default['display_options']['title']),
                '#url' => $url,
                '#attributes' => [
                  'class' => ['btn', 'btn-primary'],
                ],
              ];
            }
          }
        }
      }

      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_people_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->get('view');
  if ($view->id() == 'people_block') {
    if ($view->current_display == 'block_people_sfl' || $view->current_display == 'block_people_slf') {
      $exposed_input = $view->getExposedInput();
      if (isset($exposed_input["items_per_page"])) {
        $form["items_per_page"]["#options"] = [$exposed_input["items_per_page"] => $exposed_input["items_per_page"]];
        $form["#attributes"]["class"][] = 'hidden';
      }
    }
  }

  if ($view->id() == 'people') {
    $person_type_filter = 'type';
    if (isset($form[$person_type_filter])) {
      // Get available person type configuration entities.
      $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('person_type');
      $types = $storage->getQuery();
      $types = $types->condition('status', 1)
        ->sort('title')
        ->execute();

      // Build a list of person type options.
      $options = [];
      $person_types = $storage->loadMultiple($types);
      foreach ($person_types as $type) {
        $options[$type->id()] = $type->label();
      }

      // Rebuild the person type text filter as select list.
      $form[$person_type_filter]['#type'] = 'select';
      $form[$person_type_filter]['#multiple'] = FALSE;
      $form[$person_type_filter]['#empty_option'] = t('- Any -');
      $form[$person_type_filter]['#options'] = $options;
      unset($form[$person_type_filter]['#size']);
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function sitenow_people_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element["#paragraph_type"] == 'people') {
    if (!empty($element['subform']['field_people_more'])) {
      $parents_array = $element['subform']['#parents'];
      $parents = array_shift($parents_array) . '[' . implode('][', $parents_array) . ']';
      if (!empty($element['subform']['field_people_more_path'])) {
        $element['subform']['field_people_more_path']['#states'] = [
          'visible' => [
            ':input[name="' . $parents . '[field_people_more][value]"]' => [
              'checked' => TRUE,
            ],
          ],
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_block(&$variables) {
  switch ($variables['elements']['#plugin_id']) {
    case 'inline_block:uiowa_people':
      $variables['#attached']['library'][] = 'uids_base/people';
      $block = $variables['elements']['content']['#block_content'];
      if ($block->hasField('field_collection_sort') && !$block->get('field_collection_sort')->isEmpty()) {
        if ($block->field_collection_sort->value == 'block_people_slf') {
          $view = Views::getView('people_block');
          $view->setDisplay('block_people_slf');
        }
        elseif ($block->field_collection_sort->value == 'block_people_sfl') {
          $view = Views::getView('people_block');
          $view->setDisplay('block_people_sfl');
        }
      }

      if ($block->hasField('field_collection_reference') && !$block->get('field_collection_reference')->isEmpty()) {
        $tids = $block->get('field_collection_reference')->getValue();
        // Clean array of tids selected.
        $tids = array_column($tids, 'target_id');
      }
      else {
        $tids = ['all'];
      }
      // Contextual relationship filter.
      $args = implode('+', $tids);
      $view->setArguments([$args]);

      // Set custom view variable to send to person teaser template.
      if ($block->hasField('field_uiowa_headline')) {
        $headline_fields = $block->get('field_uiowa_headline')->getValue();
        foreach ($headline_fields as $headline_field) {
          // There isn't a headline, so set the children to this heading size.
          if (empty($headline_field['headline'])) {
            $view->display_handler->setOption('heading_size', $headline_field['child_heading_size']);
          }
          else {
            $heading_size = HeadlineHelper::getHeadingSizeUp($headline_field['heading_size']);
            $view->display_handler->setOption('heading_size', $heading_size);
          }
        }
      }

      if ($block->hasField('field_collection_results') && !$block->get('field_collection_results')->isEmpty()) {
        $items = $block->field_collection_results->value;
        $view->setItemsPerPage($items);
        $view->setExposedInput([
          'items_per_page' => $items,
        ]);
      }
      $pager_type = 'some';
      // Show pager if it exists and is set.
      if ($block->hasField('field_collection_pager')) {
        if ($block->field_collection_pager->value == 1) {
          $pager_type = 'full';
        }
      }

      $pager = $view->display_handler->getOption('pager');
      // IF show pager, change pager_type to 'full'.
      $pager['type'] = $pager_type;
      $view->display_handler->setOption('pager', $pager);

      $view->preExecute();
      $view->execute();

      // Associate the block's cache tags with each entity in the view result so
      // that the appropriate render cache ID is cleared when the block changes.
      foreach ($view->result as $result_row) {
        $entity = $result_row->_entity;
        $entity->addCacheTags($variables['content']['#cache']['tags']);
      }

      $variables['content']['view'] = $view->render();

      // If we have more link checked and link provided, pass it.
      if ($block->hasField('field_collection_more')) {
        $more = ($block->field_collection_more->value == 1) ? TRUE : FALSE;
        if ($more == TRUE) {
          $variables['content']['more'] = [
            '#type' => 'container',
            '#attributes' => [
              'class' => 'more-link',
            ],
          ];

          $view = View::load('people');
          $default =& $view->getDisplay('default');

          if (!empty($more_path = $block->get('field_collection_more_path')->getValue())) {
            $url = Url::fromUri($more_path[0]['uri']);
          }

          // Only render more link if one other display is enabled.
          $displays = [
            'page_people_sfl',
            'page_people_slf',
            'page_people_table',
          ];

          foreach ($displays as $display) {
            if ($view->getDisplay($display)['display_options']['enabled'] == TRUE) {
              $url = Url::fromRoute('view.people.' . $display);
              break;
            }
          }

          if (isset($url)) {
            $variables['content']['more']['bttn'] = [
              '#type' => 'link',
              '#title' => 'View more ' . strtolower($default['display_options']['title']),
              '#url' => $url,
              '#attributes' => [
                'class' => ['bttn', 'bttn--primary', 'bttn--caps'],
              ],
            ];
          }
        }
      }
      break;
  }
}

/**
 * Custom submit handler for node person forms.
 */
function _sitenow_people_person_form_submit(array &$form, FormStateInterface $form_state) {
  // Get all instances of field_uiowa_contact_address.
  $contact_addresses = $form_state->getValue('field_person_contact_information');

  if (!is_null($contact_addresses)) {
    // Loop through each address.
    foreach ($contact_addresses as $delta => $contact_address_subform) {
      if (isset($contact_address_subform['subform'])) {
        $contact_address = $contact_address_subform['subform']['field_uiowa_contact_address'][0];
        if (isset($contact_address['address'])) {
          $has_info = FALSE;
          // Loop through all the details of the address to
          // check if any of them have been set besides the
          // country.
          foreach ($contact_address['address'] as $key => $details) {
            if ($key === 'country_code') {
              continue;
            }
            // If we find a non-empty value, we can stop looping.
            if (!empty($details)) {
              $has_info = TRUE;
              break;
            }
          }

          // If no other fields have been set, then unset the address.
          if (!$has_info) {
            // Set country code to empty string.
            $form_state->setValue([
              'field_person_contact_information',
              $delta,
              'subform',
              'field_uiowa_contact_address',
              0,
              'address',
              'country_code',
            ], '');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_allowed_values_function().
 */
function sitenow_people_person_type_statuses_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $allowed_types = \Drupal::entityTypeManager()
    ->getStorage('person_type')->loadByProperties([
      'status' => TRUE,
      'allow_former' => TRUE,
    ]);

  $types = [];

  foreach ($allowed_types as $type) {
    $types[$type->id()] = t('Former @type', [
      '@type' => $type->label(),
    ]);
  }

  return $types;
}
