<?php

/**
 * @file
 * Primary module hooks for SiteNow People module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_alter().
 */
function sitenow_people_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_person_edit_form':
    case 'node_person_form':
      if (isset($form['field_person_hide'])) {
        // Set field_person_hide to options group (promotion options).
        $form['field_person_hide']['#group'] = 'options';
      }
      break;
  }
}

/**
 * Implements hook_entity_presave().
 */
function sitenow_people_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'person':
      // Setting the title with the first/last name values.
      $output = $entity->get('field_person_first_name')->value . " " . $entity->get('field_person_last_name')->value;
      $entity->setTitle($output);
      break;

  }
}

/**
 * Alter the fields used to represent an entity in the IEF table.
 *
 * @param array $fields
 *   The fields, keyed by field name.
 * @param array $context
 *   An array with the following keys:
 *   - parent_entity_type: The type of the parent entity.
 *   - parent_bundle: The bundle of the parent entity.
 *   - field_name: The name of the reference field on which IEF is operating.
 *   - entity_type: The type of the referenced entities.
 *   - allowed_bundles: Bundles allowed on the reference field.
 *
 * @see \Drupal\inline_entity_form\InlineFormInterface::getTableFields()
 */
function sitenow_people_inline_entity_form_table_fields_alter(array &$fields, array $context) {
  if ($context['entity_type'] == 'node') {
    // Clean up, minimize the person IEF form.
    if (in_array('person', $context['allowed_bundles'])) {
      unset($fields['label']);
      unset($fields['status']);
      $fields['field_person_first_name'] = [
        'type' => 'field',
        'label' => t('First Name'),
        'weight' => 0,
      ];
      $fields['field_person_last_name'] = [
        'type' => 'field',
        'label' => t('Last Name'),
        'weight' => 1,
      ];
      $fields['moderation_state'] = [
        'type' => 'field',
        'label' => t('State'),
        'weight' => 2,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_page_title(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == 'entity.node.canonical') {
      $node = \Drupal::routeMatch()->getParameter('node');
    }
    elseif ($route_name == 'entity.node.preview') {
      $node = \Drupal::routeMatch()->getParameter('node_preview');
    }
    if (isset($node)) {
      switch ($node->getType()) {
        case 'person':
          if ($node->hasField('field_person_credential') && !$node->get('field_person_credential')
            ->isEmpty()) {
            $variables['subtitle'] = $node->field_person_credential->value;
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_page(&$variables) {
  $current_route = \Drupal::routeMatch();
  $route_name = $current_route->getRouteName();
  if (strpos($route_name, 'view.people.') === 0) {
    // Get the current user.
    $user = \Drupal::currentUser();
    // Check for permission.
    if ($user->hasPermission('administer sitenow people') == TRUE) {
      // Print warning message informing user to use SiteNow People settings.
      $url = Url::fromRoute('sitenow_people.settings_form');
      $settings_link = Link::fromTextAndUrl(t('SiteNow People'), $url)
        ->toString();
      if ($route_name == 'view.people.page_people_table') {
        $message_text = t('This page can be configured here: @settings_link.
        This page is currently manually sorted.
        You can adjust the order by dragging the arrows up/down and then clicking "Save order" at the bottom of this page.', [
          '@settings_link' => $settings_link,
        ]);
      }
      else {
        $message_text = t('This page can be configured here: @settings_link', [
          '@settings_link' => $settings_link,
        ]);
      }

      \Drupal::messenger()->addStatus($message_text);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_node(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {

    $node = $variables["node"];
    switch ($node->getType()) {
      case 'person':
        switch ($variables["view_mode"]) {
          case 'full':
            $image_field = $node->get('field_image');
            if (!$image_field->isEmpty()) {
              $image = $image_field->first()->getValue();
              $media = Media::load($image['target_id']);
              if ($media) {
                $media_field = $media->get('field_media_image')
                  ->first()
                  ->getValue();
                $file = File::load($media_field['target_id']);
                $uri = $file->getFileUri();
                $alt = ($media_field['alt'] ? $media_field['alt'] : '');
                $image = [
                  '#theme' => 'image_style',
                  '#width' => NULL,
                  '#height' => NULL,
                  '#style_name' => 'sitenow_square_m',
                  '#uri' => $uri,
                  '#alt' => $alt,
                  '#weight' => -1,
                  '#attributes' => [
                    'class' => 'content-image',
                  ],
                ];
                $variables["content"]['node_image'] = $image;
              }
            }
            break;

        }
        break;

    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_views_view(&$variables) {
  switch ($variables["id"]) {
    case 'people':
      // Unset header content if empty.
      if (empty($variables["header"]["area"]["#text"])) {
        unset($variables["header"]["area"]);
      }
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_people_preprocess_field(&$variables) {
  switch ($variables["element"]["#field_name"]) {
    // Change header class for person position based on view mode.
    case 'field_person_position':
      switch ($variables["element"]["#view_mode"]) {
        case 'full':
          $variables['attributes']['class'][] = 'h5';
          break;

        case 'teaser':
          $variables['attributes']['class'][] = 'h6';
          break;
      }
      break;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function sitenow_people_views_pre_render(ViewExecutable $view) {
  // Add <th> label for Draggable Views, otherwise it is flagged
  // for accessibility.
  if ($view->id() == "people" && $view->current_display == 'page_people_table') {
    $view->field["draggableviews"]->options["label"] = 'Sort Control';
  }
}
