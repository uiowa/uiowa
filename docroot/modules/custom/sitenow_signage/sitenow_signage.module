<?php

/**
 * @file
 * Module code for SiteNow Signage.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\media\IFrameMarkup;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_alter().
 */
function sitenow_signage_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id,
) {
  if (in_array($form_id, ['node_slide_form', 'node_slide_edit_form'])) {
    if (isset($form['field_slide_duration_other'])) {
      $form['field_slide_duration_other']['#states'] = [
        'visible' => [
          ':input[id="edit-field-slide-duration"]' => [
            'value' => '0',
          ],
        ],
      ];

      // Clear the field when duration is not "0".
      $form['field_slide_duration_other']['widget']['#element_validate'][] = 'sitenow_signage_validate_duration_other';
    }
  }
}

/**
 * Custom validation function for sitenow_signage_form_alter.
 */
function sitenow_signage_validate_duration_other($element, FormStateInterface $form_state, $form) {
  $duration_values = $form_state->getValue('field_slide_duration');

  // Check if duration field has a value other than "0".
  if (!empty($duration_values) && isset($duration_values[0]['value'])) {
    $duration_value = $duration_values[0]['value'];

    if ($duration_value !== '0') {
      // Clear the field_slide_duration_other field.
      $form_state->setValue('field_slide_duration_other', []);
    }
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function sitenow_signage_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] === 'node' && $entity_form['#bundle'] === 'slide') {
    if (isset($entity_form['field_slide_duration_other'])) {
      $entity_form['field_slide_duration_other']['#states'] = [
        'visible' => [
          'select[name*="[field_slide_duration]"]' => ['value' => '0'],
        ],
      ];
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function sitenow_signage_entity_presave(EntityInterface $entity) {
  // Only process slide nodes.
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'slide') {

    // Check if the entity has both duration fields.
    if ($entity->hasField('field_slide_duration') && $entity->hasField('field_slide_duration_other')) {

      $duration_value = $entity->get('field_slide_duration')->value;

      // If duration is not "0", clear field_slide_duration_other.
      if ($duration_value !== '0' && $duration_value !== 0) {
        $entity->get('field_slide_duration_other')->setValue([]);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_signage_form_uiowa_alerts_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Update the custom alerts description text to note that
  // custom alerts will not display on signs.
  $form['custom_alert_display']['#description'] = $form['custom_alert_display']['#description'] . ' Custom alerts will not render on signs.';
}

/**
 * Implements hook_preprocess_field().
 */
function sitenow_signage_preprocess_field(&$variables) {
  $element = $variables['element'];
  switch ($element['#field_name']) {
    case 'field_sign_slides':
      $first_slide_interval = NULL;
      foreach ($variables['items'] as &$item) {
        $node = $item['content']['#node'];
        // Set a reasonable default just in case.
        $item['interval'] = '15000';
        if ($node->hasField('field_slide_duration_other') && !$node->field_slide_duration_other->isEmpty()) {
          $item['interval'] = $item['content']['#node']->field_slide_duration_other->value * 1000;
        }
        elseif ($node->hasField('field_slide_duration') && !$node->field_slide_duration->isEmpty()) {
          $item['interval'] = $item['content']['#node']->field_slide_duration->value;
        }
        // Capture the first slide's interval.
        if ($first_slide_interval === NULL) {
          $first_slide_interval = $item['interval'];
        }
      }
      // Pass the first slide interval to slideshow.js.
      $variables['#attached']['drupalSettings']['signageSlideshow']['firstSlideInterval'] = $first_slide_interval;
      break;

    case 'field_outlook_events_resource':
      // Cache this for 1 hour.
      $variables['#cache']['tags'][] = 'time:hourly';
      // Get additional info necessary to overwrite the output of this field.
      $paragraph = $variables['element']['#object'];
      $headline = $paragraph->get('field_headline')->value;
      $use_org = $paragraph->get('field_outlook_events_use_org')->value;
      $end_time = $paragraph->get('field_outlook_events_end_time')->value;

      // Need to traverse up to the sign node to get orientation if available.
      $parent_slide = $paragraph->getParentEntity();
      $referring_item = $parent_slide->_referringItem;
      $orientation = 'horizontal';
      if ($referring_item) {
        /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $referring_field */
        $referring_field = $referring_item->getParent();
        if ($referring_field) {
          $parent_entity = $referring_field->getParent();
          // Add cache tag for the sign node so table
          // updates when sign orientation changes.
          $variables['#cache']['tags'][] = 'node:' . $parent_entity->get('nid')->value;
          if ($parent_entity->get('field_sign_orientation')->value == 'vertical') {
            $orientation = 'vertical';
          }
        }
      }

      // Load and fetch data from the Hours API.
      $api_client = \Drupal::service('uiowa_hours.api');
      $today = date('Ymd');
      $data = [];
      $rows = [];
      $had_failure = FALSE;

      // Loop through each resource value.
      foreach ($variables['items'] as $item) {
        $resource_id = $item['content']['#markup'];
        $resource_data = $api_client->getHours($resource_id);

        if ($resource_data['data'] === FALSE) {
          $had_failure = TRUE;
          continue;
        }

        // Use resource alias as room name if available.
        if (!empty($resource_data['data']['resourceAlias'])) {
          $resource_id = $resource_data['data']['resourceAlias'];
        }

        // This isn't used now and borks the foreach loop. Unset it.
        if (isset($resource_data['data']['$id'])) {
          unset($resource_data['data']['$id']);
        }
        if (isset($resource_data['data']['resourceAlias'])) {
          unset($resource_data['data']['resourceAlias']);
        }

        // Loop through today's events.
        foreach ($resource_data['data'][$today] ?? [] as $event) {
          $start = strtotime($event['iso8601Start']);
          $end = strtotime($event['iso8601End']);

          // Skip events already ended.
          if ($end < time()) {
            continue;
          }

          // Format time range based on settings.
          $formatted_date = date('g:i a', $start);
          if ($end_time) {
            if ($end >= strtotime('tomorrow')) {
              $formatted_date = date('M j g:i a', $start) . ' – ' . date('M j g:i a', $end);
            }
            else {
              $formatted_date .= ' – ' . date('g:i a', $end);
            }
          }

          // Allows overriding meeting subject with organizer name.
          if ($use_org && !empty($event['organizerName'])) {
            $subject = $event['organizerName'];
          }
          else {
            // Meeting subject (respect private items).
            $subject = ($event['isPrivate'] == 1) && !empty($event['organizerName'])
              ? $event['organizerName']
              : $event['summary'];
          }

          // Build row, store start time for sorting.
          $data[] = [
            'time' => $formatted_date,
            'start' => $start,
            'room' => $resource_id,
            'meeting' => $subject,
          ];
        }
      }

      if (!empty($data)) {
        // Sort rows by start time.
        usort($data, fn($a, $b) => $a['start'] <=> $b['start']);

        // Cap the number of rows differently based on orientation.
        $max = $orientation === 'horizontal' ? 10 : 15;
        $data = array_slice($data, 0, $max);

        // Build table rows.
        foreach ($data as $event) {
          $row = [
            'time' => $event['time'],
            'meeting' => $event['meeting'],
            'room' => $event['room'],
          ];
          $rows[] = $row;
        }
      }

      // Choose an empty message based on whether we saw a failure.
      if ($had_failure) {
        $empty_message = t('There was an error retrieving schedule information. Please try again later or contact the ITS Help Desk if the problem persists.');
      }
      else {
        $empty_message = t('There are currently no scheduled events to display.');
      }

      // Build renderable table.
      $header = [
        'time' => t('Time'),
        'meeting' => t('Meeting'),
        'room' => t('Room'),
      ];
      $markup['container'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => [
            'signage__table',
          ],
        ],
      ];
      $markup['container']['table'] = [
        '#theme' => 'table',
        '#caption' => $headline,
        '#header' => $header,
        '#rows' => $rows,
        '#empty' => $empty_message,
        '#attributes' => [
          'class' => [
            'data',
          ],
        ],
      ];
      $markup = \Drupal::service('renderer')->render($markup);

      // Replace the field output with table markup.
      $variables['items'][0]['content']['#markup'] = $markup;
      // Remove the other items to avoid outputting them.
      $variables['items'] = array_slice($variables['items'], 0, 1);

      break;

  }
}

/**
 * Implements hook_preprocess_media().
 */
function sitenow_signage_preprocess_media__remote_video(&$variables) {
  $media = $variables['media'];
  $referring_item = $media->_referringItem;
  if (!is_null($referring_item)) {
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $referring_field */
    $referring_field = $referring_item->getParent();
    // If the referring field exists...
    if ($referring_field) {
      $parent_entity = $referring_field->getParent();
      $parent_entity = $parent_entity->getEntity();
      // Make sure this only gets applied this media is being requested from
      // the 'slide_video' paragraph type.
      if ($parent_entity->getType() == 'slide_video') {
        $src = $variables['content']['field_media_oembed_video'][0]['#attributes']['src'];
        // Split src into URL and params.
        [$base_url, $params] = explode('?', $src);
        // Get the individual params.
        $params = explode('&', $params);
        // Convert the params into a key/value array type.
        $param_array = [
          'url' => '',
          'max_width' => 0,
          'max_height' => 0,
        ];
        foreach ($params as $param) {
          [$key, $value] = explode('=', $param);
          $param_array[$key] = $value;
        }
        // Decode the URL for processing.
        $param_array['url'] = urldecode($param_array['url']);

        // Set the 'setautoplay' param that we'll check for later. This ensures
        // that only videos embedded on slides get this treatment.
        if (strpos($param_array['url'], '?') !== FALSE) {
          $param_array['url'] .= '&setautoplay';
        }
        else {
          $param_array['url'] .= '?setautoplay';
        }

        $iframe_url_helper = Drupal::service('media.oembed.iframe_url_helper');
        // Regenerate the hash to convince the OEmbedIframeController that this
        // request is legit.
        $param_array['hash'] = $iframe_url_helper->getHash($param_array['url'], $param_array['max_width'], $param_array['max_height']);
        // Re-encode the URL because that is how it needs to be rendered.
        $param_array['url'] = urlencode($param_array['url']);
        // Getting the params back together!
        $params = [];
        foreach ($param_array as $key => $value) {
          $params[] = $key . '=' . $value;
        }
        $params = implode('&', $params);
        // Re-assemble and reassigned the src.
        $src = $base_url . '?' . $params;
        $variables['content']['field_media_oembed_video'][0]['#attributes']['src'] = $src;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_media_oembed_iframe(array &$variables) {
  // Unfortunately after convincing OEmbedIframeController that our request was
  // legit, it re-generates the URL, and our changes get lost. So, we grab the
  // original incoming URL.
  $url = \Drupal::request()->query->get('url');
  $params = UrlHelper::parse($url)['query'];
  $original = $variables['media']->__toString();
  // Check if the custom query param is present.
  if (isset($params['setautoplay'])) {
    // Check if this is YouTube or Vimeo.
    if (strpos($original, 'feature=oembed') !== FALSE) {
      // YouTube: Add autoplay and mute to existing feature=oembed.
      $original = str_replace('feature=oembed', 'feature=oembed&autoplay=1&mute=1', $original);
    }
    else {
      // Vimeo: Add autoplay to iframe src.
      if (preg_match('/src="([^"]*)"/', $original, $matches)) {
        $iframe_src = $matches[1];
        $separator = strpos($iframe_src, '?') !== FALSE ? '&' : '?';
        $new_iframe_src = $iframe_src . $separator . 'autoplay=1&loop=1&muted=1';
        $original = str_replace($iframe_src, $new_iframe_src, $original);
      }
    }
    $variables['media'] = IFrameMarkup::create($original);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function sitenow_signage_preprocess_node(&$variables) {
  if ($variables['node']->getType() === 'slide') {
    // Unset node title for slides.
    unset($variables['label']);
  }
  if ($variables['node']->getType() === 'sign') {
    // Add a black background to the sign node.
    $variables['attributes']['class'][] = 'bg--black';
    // Add a class for the sign orientation if it exists.
    if ($variables['node']->hasField('field_sign_orientation') && !$variables['node']->get('field_sign_orientation')->isEmpty()) {
      $orientation = $variables['node']->get('field_sign_orientation')->value;
      $variables['attributes']['class'][] = 'signage--' . $orientation;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_page(&$variables) {
  // Check if the current page is a node of type 'sign'.
  if (isset($variables['node']) && $variables['node'] instanceof NodeInterface && $variables['node']->getType() === 'sign') {
    // Only modify the page if it is not an admin route.
    $admin_context = \Drupal::service('router.admin_context');
    if (!$admin_context->isAdminRoute()) {
      // Unset regions for viewing logged in.
      foreach ([
        'header',
        'after_content',
        'pre_footer',
        'footer_first',
        'footer_second',
      ] as $region) {
        unset($variables['page'][$region]);
      }

      // Add signage stylesheet.
      $variables['#attached']['library'][] = 'sitenow_signage/signage';
      // Attach the slideshow library.
      $variables['#attached']['library'][] = 'sitenow_signage/slideshow';

      // Attach reload library and set the reload interval from the node.
      // @todo Move this into the anonymous user condition below.
      $variables['#attached']['library'][] = 'sitenow_signage/reload';
      $reload_interval = $variables['node']->field_sign_reload_interval?->value ?? 5 * 60 * 60;
      $variables['#attached']['drupalSettings']['signage']['signReloadInterval'] = $reload_interval;

      // Check that user is logged out before unsetting anything.
      if (\Drupal::currentUser()->isAnonymous()) {
        // Attach the signage alert overrides library.
        $variables['#attached']['library'][] = 'sitenow_signage/signage_alerts';

        // Check if the query string contains the 'signage-display' parameter.
        if (isset(\Drupal::request()?->query?->all()['signage-display'])) {
          // Unset remaining regions except content for logged out users.
          foreach (Element::children($variables['page']) as $key) {
            if ($key !== 'content') {
              unset($variables['page'][$key]);
            }
          }
          // Add a cache context so that the page is cached separately.
          $variables['#cache']['contexts'][] = 'url.query_args:signage-display';
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function sitenow_signage_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  if ($paragraph->bundle() == 'slide_image' &&
    isset($variables['content']['field_slide_image'])) {

    // Get the sign node from the current route.
    $sign_node = \Drupal::routeMatch()->getParameter('node');

    if ($sign_node && $sign_node->bundle() == 'sign') {
      $variables['#cache']['tags'][] = 'node:' . $sign_node->id();
    }

    // Check if we have a sign node with vertical orientation.
    if ($sign_node &&
      $sign_node->bundle() == 'sign' &&
      $sign_node->hasField('field_sign_orientation') &&
      !$sign_node->get('field_sign_orientation')->isEmpty() &&
      $sign_node->get('field_sign_orientation')->value === 'vertical') {

      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');

      foreach ($variables['content']['field_slide_image'] as $delta => &$item) {
        if (is_numeric($delta)) {
          $media_entity = $paragraph->get('field_slide_image')->get($delta)->entity;
          if ($media_entity) {
            $item = $view_builder->view($media_entity, 'vertical_9_16');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function sitenow_signage_theme($existing, $type, $theme, $path) {
  return [
    'field__node__field_sign_slides__sign__default' => [
      'template' => 'field--node--field-sign-slides--sign--default',
      'base hook' => 'field',
    ],
  ];
}

/**
 * Allowed values for reload interval field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_reload_intervals_allowed_values() {
  $values = [
    21600 => '6 hours',
    3600 => '1 hour',
    1800 => '30 minutes',
  ];

  return $values;
}

/**
 * Allowed values for slide duration field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_slide_durations_allowed_values() {
  $values = [
    10000 => '10 seconds',
    15000 => '15 seconds',
    20000 => '20 seconds',
    30000 => '30 seconds',
    45000 => '45 seconds',
    60000 => '1 minute',
    0 => 'Other',
  ];

  return $values;
}

/**
 * Implements hook_allowed_values_function().
 */
function sitenow_signage_slides_size_allowed_values() {
  $options = [
    'horizontal' => 'Horizontal (16:9)',
    'vertical' => 'Vertical (9:16)',
  ];
  return $options;
}

/**
 * Allowed values for outlook events resources.
 *
 * @see options_allowed_values()
 */
function sitenow_signage_outlook_resource_allowed_values() {
  $config = \Drupal::configFactory()->getEditable('uiowa_hours.settings');
  $group = $config->get('group') ?: 'Signage';
  $api_client = \Drupal::service('uiowa_hours.api');
  return $api_client->getResources($group) ?: ['none' => 'No resources available'];
}
