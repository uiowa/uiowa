<?php

/**
 * @file
 * Module code for SiteNow Signage.
 */

use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_signage_form_uiowa_alerts_settings_alter(&$form, $form_state, $form_id) {
  // Update the custom alerts description text to note that
  // custom alerts will not display on signs.
  $form['custom_alert_display']['#description'] = $form['custom_alert_display']['#description'] . ' Custom alerts will not render on signs.';
}

/**
 * Implements hook_preprocess_field().
 */
function sitenow_signage_preprocess_field(&$variables) {
  $element = $variables['element'];
  switch ($element['#field_name']) {
    case 'field_sign_slides':
      foreach ($variables['items'] as &$item) {
        $node = $item['content']['#node'];
        // Set a reasonable default just in case.
        $item['interval'] = '15000';
        if ($node->hasField('field_slide_duration') && !$node->field_slide_duration->isEmpty()) {
          $item['interval'] = $item['content']['#node']->field_slide_duration->value;
        }
      }
      break;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function sitenow_signage_preprocess_node(&$variables) {
  if ($variables['node']->getType() === 'slide') {
    // Unset node title for slides.
    unset($variables['label']);
  }
  if ($variables['node']->getType() === 'sign') {
    // Add a black background to the sign node.
    $variables['attributes']['class'][] = 'bg--black';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_page(&$variables) {
  // Check if the current page is a node of type 'sign'.
  if (isset($variables['node']) && $variables['node'] instanceof NodeInterface && $variables['node']->getType() === 'sign') {
    // Only modify the page if it is not an admin route.
    $admin_context = \Drupal::service('router.admin_context');
    if (!$admin_context->isAdminRoute()) {
      // Unset regions for viewing logged in.
      foreach ([
        'header',
        'after_content',
        'pre_footer',
        'footer_first',
        'footer_second',
      ] as $region) {
        unset($variables['page'][$region]);
      }

      // Add signage stylesheet.
      $variables['#attached']['library'][] = 'sitenow_signage/signage';
      // Attach the slideshow library.
      $variables['#attached']['library'][] = 'sitenow_signage/slideshow';

      // Attach reload library and set the reload interval from the node.
      // @todo Move this into the anonymous user condition below.
      $variables['#attached']['library'][] = 'sitenow_signage/reload';
      $reload_interval = $variables['node']->field_sign_reload_interval?->value ?? 5 * 60 * 60;
      $variables['#attached']['drupalSettings']['signage']['signReloadInterval'] = $reload_interval;

      // Check that user is logged out before unsetting anything.
      if (\Drupal::currentUser()->isAnonymous()) {
        // Attach the signage alert overrides library.
        $variables['#attached']['library'][] = 'sitenow_signage/signage_alerts';

        // Check if the query string contains the 'signage-display' parameter.
        if (isset(\Drupal::request()?->query?->all()['signage-display'])) {
          // Unset remaining regions except content for logged out users.
          foreach (Element::children($variables['page']) as $key) {
            if ($key !== 'content') {
              unset($variables['page'][$key]);
            }
          }
          // Add a cache context so that the page is cached separately.
          $variables['#cache']['contexts'][] = 'url.query_args:signage-display';
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function sitenow_signage_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  switch ($paragraph->bundle()) {
    case 'slide_image':
      if (isset($variables['content']['field_slide_image'])) {

        // Get the sign node from the current route.
        $sign_node = \Drupal::routeMatch()->getParameter('node');

        if ($sign_node && $sign_node->bundle() == 'sign') {
          $variables['#cache']['tags'][] = 'node:' . $sign_node->id();
        }

        // Check if we have a sign node with vertical orientation.
        if ($sign_node &&
          $sign_node->bundle() == 'sign' &&
          $sign_node->hasField('field_sign_orientation') &&
          !$sign_node->get('field_sign_orientation')->isEmpty() &&
          $sign_node->get('field_sign_orientation')->value === 'vertical') {

          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');

          foreach ($variables['content']['field_slide_image'] as $delta => &$item) {
            if (is_numeric($delta)) {
              $media_entity = $paragraph->get('field_slide_image')->get($delta)->entity;
              if ($media_entity) {
                $item = $view_builder->view($media_entity, 'vertical_9_16');
              }
            }
          }
        }
      }
      break;

    case 'slide_events':
      // $paragraph = $variables['elements']['#paragraph'];
      //      $audiences = $paragraph->get('field_slide_events_audiences');
      break;
  }
}

/**
 *
 */
function sitenow_signage_field_widget_single_element_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] === 'slide_events') {
    $events_paragraph_form = $element['subform'];
  }
}

/**
 * Implements hook_theme().
 */
function sitenow_signage_theme($existing, $type, $theme, $path) {
  return [
    'field__node__field_sign_slides__sign__default' => [
      'template' => 'field--node--field-sign-slides--sign--default',
      'base hook' => 'field',
    ],
  ];
}

/**
 * Allowed values for reload interval field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_reload_intervals_allowed_values() {
  $values = [
    21600 => '6 hours',
    3600 => '1 hour',
    1800 => '30 minutes',
  ];

  return $values;
}

/**
 * Allowed values for slide duration field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_slide_durations_allowed_values() {
  $values = [
    10000 => '10 seconds',
    15000 => '15 seconds',
    20000 => '20 seconds',
    30000 => '30 seconds',
    45000 => '45 seconds',
    60000 => '1 minute',
  ];

  return $values;
}

/**
 * Implements hook_allowed_values_function().
 */
function sitenow_signage_slides_size_allowed_values() {
  $options = [
    'horizontal' => 'Horizontal (16:9)',
    'vertical' => 'Vertical (9:16)',
  ];
  return $options;
}

/**
 * Set dynamic allowed values for multiple fields.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _sitenow_signage_get_filter_field_options(FieldStorageDefinitionInterface $definition, ?FieldableEntityInterface $entity = NULL, bool &$cacheable = TRUE): array {
  $options = [];

  switch ($definition->getName()) {
    case 'field_slide_events_audiences':
      $client = \Drupal::service('sitenow_events.content_hub_api_client');
      $filters = $client->getFilters('filters');


      $tree = _sitenow_events_build_options_tree($filters['event_audience']);
      $options = _sitenow_events_build_options_list($tree);
      break;
  }

  return $options;

}

/**
 * Helper function to build the options tree.
 *
 * @param array $data
 *   Array of data to be sorted into a tree.
 * @param int $parent
 *   Stores the current id.
 *
 * @return array
 *   Returns an associative array options tree.
 *
 * @todo https://github.com/uiowa/uiowa/issues/5028
 */
function _sitenow_signage_build_options_tree(array $data, int $parent = 0) {
  $tree = [];

  foreach ($data as $d) {
    if ((int) $d['parent_id'] === $parent) {
      $children = _sitenow_signage_build_options_tree($data, $d['id']);

      if (!empty($children)) {
        $d['_children'] = $children;
      }
      $tree[] = $d;
    }
  }

  return $tree;
}

/**
 * Helper function to output the options array.
 *
 * @param array $tree
 *   Array of tree data to be printed.
 * @param int $r
 *   Basic counter.
 * @param int $p
 *   Parent id.
 * @param array $options
 *   Options array to be passed recursively.
 *
 * @return array
 *   Return options with children prefixed with dashes.
 *
 * @todo https://github.com/uiowa/uiowa/issues/5028
 */
function _sitenow_signage_build_options_list(array $tree, $r = 0, $p = NULL, array &$options = []) {
  foreach ($tree as $t) {
    $dash = ((int) $t['parent_id'] === 0) ? '' : str_repeat('-', $r) . ' ';
    $options[$t['id']] = $dash . $t['name'];

    if ((int) $t['parent_id'] === $p) {
      // Reset $r.
      $r = 0;
    }

    if (isset($t['_children'])) {
      _sitenow_signage_build_options_list($t['_children'], ++$r, $t['parent_id'], $options);
    }
  }

  return $options;
}
