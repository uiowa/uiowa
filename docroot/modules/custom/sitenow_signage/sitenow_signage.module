<?php

/**
 * @file
 * Module code for SiteNow Signage.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_signage_form_uiowa_alerts_settings_alter(&$form, $form_state, $form_id) {
  // Update the custom alerts description text to note that
  // custom alerts will not display on signs.
  $form['custom_alert_display']['#description'] = $form['custom_alert_display']['#description'] . ' Custom alerts will not render on signs.';
}

/**
 * Implements hook_form_alter().
 */
function sitenow_signage_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $allowed_forms = ['node_sign_form', 'node_sign_edit_form', 'node_slide_form', 'node_slide_edit_form'];

  // Break out if our form ID isn't one that we have defined.
  if (!in_array($form_id, $allowed_forms, TRUE)) {
    return;
  }

  // Break out if our form doesnt have other_groups defined.
  if (!isset($form['og_audience']['other_groups'])) {
    return;
  }

  // Unset the other groups field.
  unset($form['og_audience']['other_groups']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_block(&$variables) {
  switch ($variables['plugin_id']) {
    case 'datetime_block':
    case 'iowalogo_block':
      $node = \Drupal::routeMatch()->getParameter('node');

      // Check if the header display field is empty.
      $hide_block = !empty($node->field_sign_hide_header->value);
      // Hide the block if all the specified fields are empty.
      if ($hide_block) {
        $variables['content'] = [];
      }
      break;

    case 'field_block:node:sign:field_sign_display_title':
      uiowa_core_set_attributes($variables, 'site-name');
      $node = \Drupal::routeMatch()->getParameter('node');

      // Check if the header display field is empty.
      $hide_block = !empty($node->field_sign_hide_header->value);
      // Hide the block if all the specified fields are empty.
      if ($hide_block) {
        $variables['content'] = [];
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == 'field_sign_slides') {
    // Attach the splide library.
    $variables['#attached']['library'][] = 'sitenow_signage/slideshow';
  }
}

/**
 * Implements hook_preprocess_node().
 */
function sitenow_signage_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'slide') {
    $variables['label'] = NULL;
  }
  if ($variables['node']->getType() == 'sign') {
    $variables['attributes']['class'][] = 'bg--black';
    if ($variables['view_mode'] == 'full' && (\Drupal::currentUser()->isAnonymous())) {
      $variables['#attached']['library'][] = 'sitenow_signage/signage_alerts';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_page(&$variables) {
  // Check if the current page is a node of type 'sign'.
  if (isset($variables['node']) && $variables['node'] instanceof NodeInterface && $variables['node']->getType() === 'sign') {
    // Only modify the page if it is not an admin route.
    $admin_context = \Drupal::service('router.admin_context');
    if (!$admin_context->isAdminRoute()) {
      // Remove regions.
      $variables['page']['header'] = [];
      $variables['page']['after_content'] = [];
      $variables['page']['pre_footer'] = [];
      $variables['page']['footer_first'] = [];
      $variables['page']['footer_second'] = [];
      // Add signage stylesheet.
      $variables['#attached']['library'][] = 'sitenow_signage/signage';
      // Check that user is logged out before unsetting anything.
      if (\Drupal::currentUser()->isAnonymous()) {
        // Check if the query string contains the 'signage-display' parameter.
        if (isset(\Drupal::request()?->query?->all()['signage-display'])) {
          // Remove all the regions from the page.
          foreach (Element::children($variables['page']) as $key) {
            if ($key !== 'content') {
              unset($variables['page'][$key]);
            }
          }
          // Add a cache context so that the page is cached separately.
          $variables['#cache']['contexts'][] = 'url.query_args:signage-display';
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_layout().
 */
function sitenow_signage_preprocess_layout(&$variables) {
  $layout = $variables['layout'];

  switch ($layout->id()) {

    case 'layout_twocol':
      if (isset($variables['region_attributes']['first']) && ($variables['content']['#settings']['label'] === 'Header')) {
        $variables['region_attributes']['first']->addClass('sign--header');
      }
      break;
  }
}

/**
 * Implements hook_theme().
 */
function sitenow_signage_theme($existing, $type, $theme, $path) {
  return [
    'field__node__field_sign_slides__sign__default' => [
      'template' => 'field--node--field-sign-slides--sign--default',
      'base hook' => 'field',
    ],
    'field__node__field_sign_display_title__sign__default' => [
      'template' => 'field--node--field-sign-display-title--sign--default',
      'base hook' => 'field',
    ],
  ];
}
