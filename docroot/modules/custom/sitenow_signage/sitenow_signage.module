<?php

/**
 * @file
 * Module code for SiteNow Signage.
 */

use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Implements hook_form_alter().
 */
function sitenow_signage_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id,
) {
  if (in_array($form_id, ['node_sign_form', 'node_sign_edit_form'])) {
    $form['#attached']['library'][] = 'sitenow_signage/duration-sign';

    // The IEF table display isn't a form in the traditional sense,
    // so to add classes to its actions buttons we need to traverse
    // down from here.
    if (isset($form['field_sign_slides']['widget']['entities'])) {
      foreach (array_keys($form['field_sign_slides']['widget']['entities']) as $entity_key) {
        if (str_starts_with($entity_key, '#')) {
          continue;
        }
        if (isset($form['field_sign_slides']['widget']['entities'][$entity_key]['actions'])) {
          foreach (array_keys($form['field_sign_slides']['widget']['entities'][$entity_key]['actions']) as $action_key) {
            if (str_starts_with($action_key, '#')) {
              continue;
            }
            // Now that we're on each action, check for existing
            // attributes and classes, and add our 'button--small'
            // class accordingly.
            if (!isset($form['field_sign_slides']['widget']['entities'][$entity_key]['actions'][$action_key]['#attributes'])) {
              $form['field_sign_slides']['widget']['entities'][$entity_key]['actions'][$action_key]['#attributes'] = [];
            }
            if (!isset($form['field_sign_slides']['widget']['entities'][$entity_key]['actions'][$action_key]['#attributes']['class'])) {
              $form['field_sign_slides']['widget']['entities'][$entity_key]['actions'][$action_key]['#attributes']['class'] = ['button--small'];
            }
            else {
              $form['field_sign_slides']['widget']['entities'][$entity_key]['actions'][$action_key]['#attributes']['class'][] = 'button--small';
            }
          }
        }
      }
    }

  }
  if (in_array($form_id, ['node_slide_form', 'node_slide_edit_form'])) {
    $form['#attached']['library'][] = 'sitenow_signage/duration-slide';
    if (isset($form['field_slide_duration_other'])) {
      $form['field_slide_duration_other']['#states'] = [
        'visible' => [
          ':input[id="edit-field-slide-duration"]' => [
            'value' => '0',
          ],
        ],
      ];
    }
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function sitenow_signage_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  // Show/hide the field_slide_duration_other field for IEF.
  if ($entity_form['#entity_type'] === 'node' && $entity_form['#bundle'] === 'slide') {
    if (isset($entity_form['field_slide_duration_other'])) {
      // Generate unique IDs.
      $unique_id = uniqid('slide_duration_');

      $entity_form['field_slide_duration']['widget']['#id'] = $unique_id . '_trigger';
      $entity_form['field_slide_duration_other']['#id'] = $unique_id . '_target';

      $entity_form['field_slide_duration_other']['#states'] = [
        'visible' => [
          '#' . $unique_id . '_trigger' => ['value' => '0'],
        ],
      ];
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function sitenow_signage_entity_presave(EntityInterface $entity) {
  // Only process slide nodes.
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'slide') {

    // Check if the entity has both duration fields.
    if ($entity->hasField('field_slide_duration') && $entity->hasField('field_slide_duration_other')) {

      $duration_value = $entity->get('field_slide_duration')->value;
      $has_video = FALSE;
      $video_duration = 0;

      // Check if this slide has a video paragraph.
      if ($entity->hasField('field_slide_widget') && !$entity->get('field_slide_widget')->isEmpty()) {
        foreach ($entity->get('field_slide_widget') as $paragraph_item) {
          $paragraph = $paragraph_item->entity;
          if ($paragraph && $paragraph->bundle() === 'slide_video') {
            $has_video = TRUE;
            // Get the media entity from the video paragraph.
            if ($paragraph->hasField('field_slide_video') && !$paragraph->get('field_slide_video')->isEmpty()) {
              $media_entity = $paragraph->get('field_slide_video')->entity;
              if ($media_entity) {
                $video_duration = sitenow_signage_get_video_duration($media_entity);
                if ($video_duration > 0) {
                  break;
                }
              }
            }
          }
        }
      }

      // If this slide has a video paragraph,
      // set the video duration in field_slide_duration_other.
      if ($has_video && $video_duration > 0) {
        $entity->set('field_slide_duration_other', $video_duration);
      }
      // If no video and duration is not "0", clear field_slide_duration_other.
      elseif (!$has_video && $duration_value !== '0' && $duration_value !== 0) {
        $entity->get('field_slide_duration_other')->setValue([]);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_signage_form_uiowa_alerts_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Update the custom alerts description text to note that
  // custom alerts will not display on signs.
  $form['custom_alert_display']['#description'] = $form['custom_alert_display']['#description'] . ' Custom alerts will not render on signs.';
}

/**
 * Implements hook_preprocess_field().
 */
function sitenow_signage_preprocess_field(&$variables) {
  $element = $variables['element'];
  switch ($element['#field_name']) {
    case 'field_sign_slides':
      $first_slide_interval = NULL;
      foreach ($variables['items'] as &$item) {
        $node = $item['content']['#node'];
        // Set a reasonable default just in case.
        $item['interval'] = '15000';

        // Duration priority: manual other duration > manual preset duration.
        if ($node->hasField('field_slide_duration_other') &&
          $node->field_slide_duration_other->value > 0) {
          $item['interval'] = $node->field_slide_duration_other->value * 1000;
        }
        elseif ($node->hasField('field_slide_duration') &&
          $node->field_slide_duration->value > 0) {
          $item['interval'] = $node->field_slide_duration->value;
        }

        // Capture the first slide's interval.
        if ($first_slide_interval === NULL) {
          $first_slide_interval = $item['interval'];
        }
      }
      // Pass the first slide interval to slideshow.js.
      $variables['#attached']['drupalSettings']['signageSlideshow']['firstSlideInterval'] = $first_slide_interval;
      break;

    case 'field_astra_schedule_room':
      // Cache this for 1 day.
      $variables['#cache']['tags'][] = 'time:daily';
      // Get additional info necessary to overwrite the output of this field.
      $paragraph = $variables['element']['#object'];
      $headline = $paragraph->get('field_headline')->value;
      $today = date('Y-m-d');
      $had_failure = FALSE;
      $rows = [];

      if (!empty($variables['items'][0]['content']['#markup'])) {
        $value = $variables['items'][0]['content']['#markup'];
        if ($value !== 'none') {
          // Split field value into building code and room id.
          [$building_code, $room_id] = explode('-', $value);

          // Load and fetch data from the MAUI API.
          $api_client = \Drupal::service('uiowa_maui.api');
          $data = $api_client->getRoomSchedule($today, $today, $building_code, $room_id);

          if ($data === FALSE) {
            $had_failure = TRUE;
          }
          elseif (!empty($data)) {
            foreach ($data as $event) {
              $formatted_time = trim($event->startTime) . ' â€“ ' . trim($event->endTime);
              $rows[] = [
                'time' => $formatted_time,
                'event' => trim($event->title),
              ];
            }
          }

          // Room specific table caption.
          $table_caption = 'Schedule for room ' . $room_id;
        }
      }

      $empty_message = $had_failure
        ? t('There was an error retrieving room schedule information. Please try again later or contact the ITS Help Desk if the problem persists.')
        : t('No scheduled events for this room.');

      $header = [
        'time' => t('Time'),
        'event' => t('Event'),
      ];

      // Headline overrides table caption if set.
      if (!empty($headline)) {
        $table_caption = $headline;
      }

      $markup['container']['table'] = [
        '#theme' => 'table',
        '#caption' => $table_caption ?? 'Room Schedule',
        '#header' => $header,
        '#rows' => $rows,
        '#empty' => $empty_message,
        '#attributes' => [
          'class' => [
            'signage__table',
          ],
        ],
      ];
      $markup = \Drupal::service('renderer')->render($markup);

      // Replace the field output with table markup.
      $variables['items'][0]['content']['#markup'] = $markup;
      break;

    case 'field_outlook_events_resource':
      // Cache this for 1 hour.
      $variables['#cache']['tags'][] = 'time:hourly';
      // Get additional info necessary to overwrite the output of this field.
      $paragraph = $variables['element']['#object'];
      $headline = $paragraph->get('field_headline')->value;
      $use_org = $paragraph->get('field_outlook_events_use_org')->value;
      $end_time = $paragraph->get('field_outlook_events_end_time')->value;

      $sign_node = sitenow_signage_get_paragraph_node($paragraph);
      if ($sign_node && $sign_node->bundle() == 'sign') {
        $orientation = sitenow_signage_get_orientation($sign_node);

        // Add cache tag for the sign node so table
        // updates when sign orientation changes.
        $variables['#cache']['tags'][] = 'node:' . $sign_node->get('nid')->value;
      }

      // Load and fetch data from the Hours API.
      $api_client = \Drupal::service('uiowa_hours.api');
      $today = date('Ymd');
      $data = [];
      $rows = [];
      $had_failure = FALSE;

      // Loop through each resource value.
      foreach ($variables['items'] as $item) {
        $resource_id = $item['content']['#markup'];
        $resource_data = $api_client->getHours($resource_id);

        if ($resource_data['data'] === FALSE) {
          $had_failure = TRUE;
          continue;
        }

        // Use resource alias as room name if available.
        if (!empty($resource_data['data']['resourceAlias'])) {
          $resource_id = $resource_data['data']['resourceAlias'];
        }

        // This isn't used now and borks the foreach loop. Unset it.
        if (isset($resource_data['data']['$id'])) {
          unset($resource_data['data']['$id']);
        }
        if (isset($resource_data['data']['resourceAlias'])) {
          unset($resource_data['data']['resourceAlias']);
        }

        // Loop through today's events.
        foreach ($resource_data['data'][$today] ?? [] as $event) {
          $start = strtotime($event['iso8601Start']);
          $end = strtotime($event['iso8601End']);

          // Skip events already ended.
          if ($end < time()) {
            continue;
          }

          // Format time range based on settings.
          $formatted_date = date('g:i a', $start);
          if ($end_time) {
            if ($end >= strtotime('tomorrow')) {
              $formatted_date = date('M j g:i a', $start) . ' â€“ ' . date('M j g:i a', $end);
            }
            else {
              $formatted_date .= ' â€“ ' . date('g:i a', $end);
            }
          }

          // Allows overriding meeting subject with organizer name.
          if ($use_org && !empty($event['organizerName'])) {
            $subject = $event['organizerName'];
          }
          else {
            // Meeting subject (respect private items).
            $subject = ($event['isPrivate'] == 1) && !empty($event['organizerName'])
              ? $event['organizerName']
              : $event['summary'];
          }

          // Build row, store start time for sorting.
          $data[] = [
            'time' => $formatted_date,
            'start' => $start,
            'room' => $resource_id,
            'meeting' => $subject,
          ];
        }
      }

      if (!empty($data)) {
        // Sort rows by start time.
        usort($data, fn($a, $b) => $a['start'] <=> $b['start']);

        // Cap the number of rows differently based on orientation.
        $max = $orientation === 'horizontal' ? 10 : 15;
        $data = array_slice($data, 0, $max);

        // Build table rows.
        foreach ($data as $event) {
          $row = [
            'time' => $event['time'],
            'meeting' => $event['meeting'],
            'room' => $event['room'],
          ];
          $rows[] = $row;
        }
      }

      // Choose an empty message based on whether we saw a failure.
      if ($had_failure) {
        $empty_message = t('There was an error retrieving schedule information. Please try again later or contact the ITS Help Desk if the problem persists.');
      }
      else {
        $empty_message = t('There are currently no scheduled events to display.');
      }

      // Build renderable table.
      $header = [
        'time' => t('Time'),
        'meeting' => t('Meeting'),
        'room' => t('Room'),
      ];

      $markup['container']['table'] = [
        '#theme' => 'table',
        '#caption' => $headline,
        '#header' => $header,
        '#rows' => $rows,
        '#empty' => $empty_message,
        '#attributes' => [
          'class' => [
            'signage__table',
          ],
        ],
      ];
      $markup = \Drupal::service('renderer')->render($markup);

      // Replace the field output with table markup.
      $variables['items'][0]['content']['#markup'] = $markup;
      // Remove the other items to avoid outputting them.
      $variables['items'] = array_slice($variables['items'], 0, 1);

      break;
  }
}

/**
 * Get video duration.
 */
function sitenow_signage_get_video_duration($media_entity) {
  $duration = 0;

  if ($media_entity->hasField('field_media_oembed_video')) {
    $oembed_field = $media_entity->get('field_media_oembed_video');
    if (!$oembed_field->isEmpty()) {
      $url = $oembed_field->value;

      if (str_contains($url, 'youtube.com') || str_contains($url, 'youtu.be')) {
        $duration = sitenow_signage_get_youtube_duration($url);
      }
      elseif (str_contains($url, 'vimeo.com')) {
        $duration = sitenow_signage_get_vimeo_duration($url);
      }
    }
  }

  return $duration;
}

/**
 * Get YouTube duration using YouTube Data API.
 */
function sitenow_signage_get_youtube_duration($url) {
  $api_key = \Drupal::config('sitenow_signage.settings')->get('youtube_api_key');

  if (!preg_match('/(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/', $url, $matches)) {
    return 0;
  }

  $endpoint = "https://www.googleapis.com/youtube/v3/videos?id={$matches[1]}&part=contentDetails&key={$api_key}";

  try {
    // Make HTTP GET request to YouTube Data API v3 to fetch video details.
    $response = \Drupal::httpClient()->request('GET', $endpoint, [
      'timeout' => 10,
      'http_errors' => FALSE,
      'headers' => [
        'Referer' => \Drupal::request()->getSchemeAndHttpHost(),
      ],
    ]);

    // Decode JSON response body into array.
    $data = json_decode($response->getBody(), TRUE);

    // Check if request was successful.
    // Log API response code for server errors, auth issues, quota exceeded.
    if ($response->getStatusCode() !== 200) {
      \Drupal::logger('sitenow_signage')->warning('YouTube API returned status @status: @endpoint', [
        '@status' => $response->getStatusCode(),
        '@endpoint' => $endpoint,
      ]);
      return 0;
    }

    // Silent return for content/data issues
    // (corrupted JSON, missing video data).
    if (json_last_error() !== JSON_ERROR_NONE ||
      empty($data['items'][0]['contentDetails']['duration'])) {
      return 0;
    }

    // Create DateInterval object from ISO 8601 duration string like "PT5M33S".
    $interval = new DateInterval($data['items'][0]['contentDetails']['duration']);
    // Calculate total seconds by
    // converting hours, minutes, and seconds to seconds.
    $seconds = ($interval->h * 3600) + ($interval->i * 60) + $interval->s;

    return $seconds;
  }
  catch (Exception $e) {
    \Drupal::logger('sitenow_signage')->error('YouTube API connection failed for @endpoint: @message', [
      '@endpoint' => $endpoint,
      '@message' => $e->getMessage(),
    ]);
    return 0;
  }
}

/**
 * Get Vimeo duration from oEmbed API.
 */
function sitenow_signage_get_vimeo_duration($url) {
  $oembed_url = 'https://vimeo.com/api/oembed.json?url=' . urlencode($url);

  try {
    $client = \Drupal::httpClient();
    $response = $client->request('GET', $oembed_url, ['http_errors' => FALSE]);

    // Log API response code for server errors, auth issues, quota exceeded.
    if ($response->getStatusCode() !== 200) {
      \Drupal::logger('sitenow_signage')->warning('Vimeo API returned status @status: @endpoint', [
        '@status' => $response->getStatusCode(),
        '@endpoint' => $oembed_url,
      ]);
      return 0;
    }

    $body = (string) $response->getBody();
    $data = json_decode($body, TRUE);

    if (isset($data['duration'])) {
      return (int) $data['duration'];
    }
  }
  catch (Exception $e) {
    \Drupal::logger('sitenow_signage')->error('Vimeo API connection failed for @endpoint: @message', [
      '@endpoint' => $oembed_url,
      '@message' => $e->getMessage(),
    ]);
    return 0;
  }

  return 0;
}

/**
 * Implements hook_preprocess_media().
 */
function sitenow_signage_preprocess_media__remote_video(&$variables) {
  $media = $variables['media'];
  $referring_item = $media->_referringItem;
  if (!is_null($referring_item)) {
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $referring_field */
    $referring_field = $referring_item->getParent();
    // If the referring field exists...
    if ($referring_field) {
      $parent_entity = $referring_field->getParent();
      $parent_entity = $parent_entity->getEntity();
      // Make sure this only gets applied this media is being requested from
      // the 'slide_video' paragraph type.
      if ($parent_entity->getType() == 'slide_video') {
        $src = $variables['content']['field_media_oembed_video'][0]['#attributes']['src'];
        // Split src into URL and params.
        [$base_url, $params] = explode('?', $src);
        // Get the individual params.
        $params = explode('&', $params);
        // Convert the params into a key/value array type.
        $param_array = [
          'url' => '',
          'max_width' => 0,
          'max_height' => 0,
        ];
        foreach ($params as $param) {
          [$key, $value] = explode('=', $param);
          $param_array[$key] = $value;
        }
        // Decode the URL for processing.
        $param_array['url'] = urldecode($param_array['url']);

        // Set the 'setautoplay' param that we'll check for later. This ensures
        // that only videos embedded on slides get this treatment.
        if (str_contains($param_array['url'], '?')) {
          $param_array['url'] .= '&setautoplay';
        }
        else {
          $param_array['url'] .= '?setautoplay';
        }

        $iframe_url_helper = Drupal::service('media.oembed.iframe_url_helper');
        // Regenerate the hash to convince the OEmbedIframeController that this
        // request is legit.
        $param_array['hash'] = $iframe_url_helper->getHash($param_array['url'], $param_array['max_width'], $param_array['max_height']);
        // Re-encode the URL because that is how it needs to be rendered.
        $param_array['url'] = urlencode($param_array['url']);
        // Getting the params back together!
        $params = [];
        foreach ($param_array as $key => $value) {
          $params[] = $key . '=' . $value;
        }
        $params = implode('&', $params);
        // Re-assemble and reassigned the src.
        $src = $base_url . '?' . $params;
        $variables['content']['field_media_oembed_video'][0]['#attributes']['src'] = $src;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_media_oembed_iframe(array &$variables) {
  // Unfortunately after convincing OEmbedIframeController that our request was
  // legit, it re-generates the URL, and our changes get lost. So, we grab the
  // original incoming URL.
  $url = \Drupal::request()->query->get('url');
  $params = UrlHelper::parse($url)['query'];

  // Check if the custom query param is present.
  if (isset($params['setautoplay'])) {
    /** @var \Drupal\media\OEmbed\Resource $resource */
    $resource = $variables['resource'];

    if ($resource->getProvider()->getName() === 'YouTube') {
      // YouTube: add autoplay, loop, mute, playlist params.
      $original = (string) $variables['media'];

      // Extract video ID for playlist parameter for single videos only.
      $playlist_param = '';
      if (!str_contains($original, 'list=') && preg_match('/\/embed\/([a-zA-Z0-9_-]+)/', $original, $matches)) {
        $playlist_param = '&playlist=' . $matches[1];
      }

      $variables['media'] = preg_replace(
        '/src="([^"]*)"/',
        'src="$1&autoplay=1&loop=1&mute=1&controls=0' . $playlist_param . '"',
        $original
      );
    }
    elseif ($resource->getProvider()->getName() === 'Vimeo') {
      // Vimeo: Add autoplay, loop, muted to iframe src.
      $original = (string) $variables['media'];
      if (preg_match('/src="([^"]*)"/', $original, $matches)) {
        $iframe_src = $matches[1];
        $separator = str_contains($iframe_src, '?') ? '&' : '?';
        $new_iframe_src = $iframe_src . $separator . 'autoplay=1&loop=1&muted=1&controls=0';
        $variables['media'] = str_replace($iframe_src, $new_iframe_src, $original);
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function sitenow_signage_preprocess_node(&$variables) {
  if ($variables['node']->getType() === 'slide') {
    // Unset node title for slides.
    unset($variables['label']);
  }
  if ($variables['node']->getType() === 'sign') {
    // Add a black background to the sign node.
    $variables['attributes']['class'][] = 'bg--black';
    // Add a class for the sign orientation if it exists.
    if ($variables['node']->hasField('field_sign_orientation') && !$variables['node']->get('field_sign_orientation')->isEmpty()) {
      $orientation = $variables['node']->get('field_sign_orientation')->value;
      $variables['attributes']['class'][] = 'signage--' . $orientation;
    }
    // If the user is logged in and the full node is being displayed, attach
    // the 'reduced-motion-warning' library.
    if (\Drupal::currentUser()->isAuthenticated() && $variables['view_mode'] === 'full') {
      // Add a message to the user warning about reduced motion settings and
      // linking to the article about it.
      \Drupal::messenger()->addWarning(t('If you have "reduced motion" enabled in your operating system preferences, the slideshow may not function as expected. For more information, see the <a href=":link">support article</a>.', [
        ':link' => 'https://its.uiowa.edu/services/digital-signage/sign-slideshow-not-rotating-between-slides',
      ]));
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_page(&$variables) {
  // Check if the current page is a node of type 'sign'.
  if (isset($variables['node']) && $variables['node'] instanceof NodeInterface && $variables['node']->getType() === 'sign') {
    // Only modify the page if it is not an admin route.
    $admin_context = \Drupal::service('router.admin_context');
    if (!$admin_context->isAdminRoute()) {
      // Add signage stylesheet.
      $variables['#attached']['library'][] = 'sitenow_signage/signage';
      // Attach the slideshow library.
      $variables['#attached']['library'][] = 'sitenow_signage/slideshow';

      // If the user is logged out, we adjust the display to be appropriate for
      // signage displays.
      if (\Drupal::currentUser()->isAnonymous()) {
        // Unset remaining regions except content for logged out users.
        foreach (Element::children($variables['page']) as $key) {
          if ($key !== 'content') {
            unset($variables['page'][$key]);
          }
        }

        // Attach the signage alert overrides library.
        $variables['#attached']['library'][] = 'sitenow_signage/signage_alerts';

        // Attach reload library and set the reload interval from the node.
        $variables['#attached']['library'][] = 'sitenow_signage/reload';
        $reload_interval = $variables['node']->field_sign_reload_interval?->value ?? 5 * 60 * 60;
        $variables['#attached']['drupalSettings']['signage']['signReloadInterval'] = $reload_interval;
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function sitenow_signage_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  switch ($paragraph->bundle()) {
    case 'slide_image':
      if (isset($variables['content']['field_slide_image'])) {

        // Get the sign node from the current route.
        $sign_node = \Drupal::routeMatch()->getParameter('node');

        if ($sign_node && $sign_node->bundle() == 'sign') {
          $variables['#cache']['tags'][] = 'node:' . $sign_node->id();

          // Check if we have a sign node with vertical orientation.
          if (sitenow_signage_get_orientation($sign_node) === 'vertical') {

            $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');

            foreach ($variables['content']['field_slide_image'] as $delta => &$item) {
              if (is_numeric($delta)) {
                $media_entity = $paragraph->get('field_slide_image')->get($delta)->entity;
                if ($media_entity) {
                  $item = $view_builder->view($media_entity, 'vertical_9_16');
                }
              }
            }
          }
        }
      }
      break;

    case 'slide_events':
      $filters = [
        'audiences' => sitenow_signage_value_query_string($paragraph?->field_slide_events_audiences?->getValue()),
        'department' => sitenow_signage_value_query_string($paragraph?->field_slide_events_department?->getValue()),
        'interests' => sitenow_signage_value_query_string($paragraph?->field_slide_events_interests?->getValue()),
        'keywords' => sitenow_signage_value_query_string($paragraph?->field_slide_events_keywords?->getValue()),
        'place' => sitenow_signage_value_query_string($paragraph?->field_slide_events_location?->getValue()),
        'types' => sitenow_signage_value_query_string($paragraph?->field_slide_events_types?->getValue()),
        'enddate' => ['value' => ['date' => '01-01-2100']],
      ];

      $amount = 3;
      $sign_node = sitenow_signage_get_paragraph_node($paragraph);

      if ($sign_node && $sign_node->bundle() == 'sign') {
        $orientation = sitenow_signage_get_orientation($sign_node);

        // Cache is refreshed each hour.
        $variables['#cache']['tags'][] = 'time:hourly';

        // Cache is refreshed when the sign node is saved.
        $variables['#cache']['tags'][] = 'node:' . $sign_node->get('nid')->value;

        if ($orientation === 'vertical') {
          $amount = 5;
        }
      }

      $query = [
        'query' => [
          'display_id' => 'events',
          'filters' => $filters,
          'items_per_page' => $amount,
        ],
      ];

      $response = \Drupal::service('sitenow_events.content_hub_api_client')->getEventInstances($query);
      if (!empty($response['events'])) {

        // Build cards for each event and add to the content output.
        foreach ($response['events'] as $key => $value) {
          $event = $value['event'];
          $event['attributes']['class'] = [
            'borderless',
            'headline--serif',
          ];
          $event['heading_size'] = 'h3';
          $event['sitenow_events_config'] = \Drupal::config('sitenow_events.settings');

          // Unset the properties we don't want to display.
          foreach ([
            'description',
            'media',
            'summary',
          ] as $property) {
            if (isset($event[$property])) {
              unset($event[$property]);
            }
          }

          $variables['content'][] = sitenow_events_build_card($event);
        }
      }
      else {
        // Set output for when there is no events.
        $variables['content']['events'] = [
          '#type' => 'markup',
          '#markup' => t('There are currently no scheduled events to display.'),
          '#prefix' => '<div class="element--padding__left--minimal element--padding__right--minimal">',
          '#suffix' => '</div>',
        ];
      }

      break;
  }
}

/**
 * Implements hook_theme().
 */
function sitenow_signage_theme($existing, $type, $theme, $path) {
  return [
    'field__node__field_sign_slides__sign__default' => [
      'template' => 'field--node--field-sign-slides--sign--default',
      'base hook' => 'field',
    ],
    'field__paragraph__field_headline__slide_events' => [
      'template' => 'field--paragraph--field-headline--slide-events',
      'base hook' => 'field',
    ],
  ];
}

/**
 * Allowed values for reload interval field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_reload_intervals_allowed_values() {
  $values = [
    21600 => '6 hours',
    3600 => '1 hour',
    1800 => '30 minutes',
  ];

  return $values;
}

/**
 * Allowed values for slide duration field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_slide_durations_allowed_values() {
  $values = [
    10000 => '10 seconds',
    15000 => '15 seconds',
    20000 => '20 seconds',
    30000 => '30 seconds',
    45000 => '45 seconds',
    60000 => '1 minute',
    0 => 'Other',
  ];

  return $values;
}

/**
 * Implements hook_allowed_values_function().
 */
function sitenow_signage_slides_size_allowed_values() {
  $options = [
    'horizontal' => 'Horizontal (16:9)',
    'vertical' => 'Vertical (9:16)',
  ];
  return $options;
}

/**
 * Convert field array to query array.
 *
 * Convert initial field value structure into an array
 * that can be given to a URL query.
 *
 * @param array $data
 *   Data to be converted into value query array.
 *
 * @return array
 *   An array of possible key and value options.
 */
function sitenow_signage_value_query_string(?array $data): string {
  $items = '';
  foreach ($data as $item) {
    if (isset($item['value'])) {
      if (strlen($items) > 0) {
        $items = $items . ',' . $item['value'];
      }
      else {
        $items = $item['value'];
      }
    }
  }

  return $items;
}

/**
 * Set dynamic allowed values for multiple fields.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _sitenow_signage_get_filter_field_options(FieldStorageDefinitionInterface $definition, ?FieldableEntityInterface $entity = NULL, bool &$cacheable = TRUE): array {
  $options = [];

  switch ($definition->getName()) {
    case 'field_slide_events_audiences':
      $data = \Drupal::service('sitenow_events.content_hub_api_client')->getFilters('filters');

      $tree = _sitenow_events_build_options_tree($data['event_audience']);
      $options = _sitenow_events_build_options_list($tree);
      break;

    case 'field_slide_events_department':
      $data = \Drupal::service('sitenow_events.content_hub_api_client')->getFilters('filters');

      $tree = _sitenow_events_build_options_tree($data['departments']);
      $options = _sitenow_events_build_options_list($tree);
      break;

    case 'field_slide_events_interests':
      $data = \Drupal::service('sitenow_events.content_hub_api_client')->getFilters('filters');

      $tree = _sitenow_events_build_options_tree($data['event_general_interest']);
      $options = _sitenow_events_build_options_list($tree);
      break;

    case 'field_slide_events_keywords':
      $data = \Drupal::service('sitenow_events.content_hub_api_client')->getFilters('keywords');

      foreach ($data['keywords'] as $keyword) {
        $options[$keyword['id']] = $keyword['name'];
      }
      break;

    case 'field_slide_events_location':
      $data = \Drupal::service('sitenow_events.content_hub_api_client')->getPlaces();

      foreach ($data['places'] as $place) {
        // API double-nests places for some reason.
        $place = $place['place'];
        $options[$place['id']] = $place['name'];
      }
      break;

    case 'field_slide_events_types':
      $filters = \Drupal::service('sitenow_events.content_hub_api_client')->getFilters('filters');

      $tree = _sitenow_events_build_options_tree($filters['event_types']);
      $options = _sitenow_events_build_options_list($tree);
      break;
  }

  return $options;

}

/**
 * Allowed values for astra room schedules.
 *
 * @see options_allowed_values()
 */
function sitenow_signage_astra_schedule_room_allowed_values() {
  $api_client = \Drupal::service('uiowa_maui.api');
  return $api_client->getBuildingRoomCompleteList() ?: ['none' => 'No rooms available'];
}

/**
 * Allowed values for outlook events resources.
 *
 * @see options_allowed_values()
 */
function sitenow_signage_outlook_resource_allowed_values() {
  $config = \Drupal::configFactory()->getEditable('uiowa_hours.settings');
  $group = $config->get('group') ?: 'Signage';
  $api_client = \Drupal::service('uiowa_hours.api');
  return $api_client->getResources($group) ?: ['none' => 'No resources available'];
}

/**
 * Helper function to get sign orientation.
 *
 * @param \Drupal\node\Entity\Node|null $sign_node
 *   A Node to get the orientation of.
 *
 * @return string
 *   Return the orientation string.
 *
 * @todo https://github.com/uiowa/uiowa/issues/5028
 */
function sitenow_signage_get_orientation(Node|NULL $sign_node): string {

  // Need to traverse up to the sign node to get orientation if available.
  $orientation = 'horizontal';

  if ($sign_node) {
    if ($sign_node->get('field_sign_orientation')?->value === 'vertical') {
      $orientation = 'vertical';
    }
  }

  return $orientation;
}

/**
 * Helper function to get sign orientation.
 *
 * @param Drupal\paragraphs\Entity\Paragraph $paragraph
 *   A $paragraph object.
 *
 * @return \Drupal\node\Entity\Node|null
 *   Returns the parent Node.
 *
 * @todo https://github.com/uiowa/uiowa/issues/5028
 */
function sitenow_signage_get_paragraph_node(Paragraph $paragraph) : Node|NULL {
  // Need to traverse up to the sign node to get orientation if available.
  $parent_slide = $paragraph->getParentEntity();
  $referring_item = $parent_slide->_referringItem;

  if ($referring_item) {
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $referring_field */
    $referring_field = $referring_item->getParent();
    if ($referring_field) {
      return $referring_field->getParent()->getEntity();
    }
  }

  return NULL;
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function sitenow_signage_inline_entity_form_table_fields_alter(array &$fields, array $context) {
  if ($context['field_name'] === 'field_sign_slides') {
    // Add additional fields to the slide IEF.
    if (in_array('slide', $context['allowed_bundles'])) {
      $fields['slide_type'] = [
        'type' => 'callback',
        'label' => t('Type'),
        'weight' => 1,
        'callback' => 'sitenow_signage_ief_slide_type_callback',
      ];
      $fields['slide_duration'] = [
        'type' => 'callback',
        'label' => t('Duration'),
        'weight' => 2,
        'callback' => 'sitenow_signage_ief_slide_duration_callback',
      ];
      // Remove the default Status field. We'll add that info with scheduling.
      unset($fields['status']);
      $fields['slide_publication'] = [
        'type' => 'callback',
        'label' => t('Schedule'),
        'weight' => 3,
        'callback' => 'sitenow_signage_ief_slide_publication_callback',
      ];
    }
  }
}

/**
 * Callback function to render slide type.
 */
function sitenow_signage_ief_slide_type_callback($entity, $variables) {
  // If we don't have the field, or if it's empty,
  // say so.
  if (!$entity->hasField('field_slide_widget') || $entity->get('field_slide_widget')->isEmpty()) {
    return [
      '#type' => 'markup',
      '#markup' => t('No slide attached.'),
    ];
  }
  $paragraph = $entity->get('field_slide_widget')?->entity;
  // If it's an image, grab the thumbnail and return
  // a render array with that instead.
  if ($paragraph->getParagraphType()->id() === 'slide_image') {
    $media_entity = $paragraph->get('field_slide_image')->entity;
    $thumbnail_uri = $media_entity->get('thumbnail')?->entity?->getFileUri();
    return [
      '#theme' => 'image_style',
      '#style_name' => 'thumbnail',
      '#uri' => $thumbnail_uri,
    ];
  }
  $label = $paragraph->getParagraphType()->label();
  return [
    '#type' => 'markup',
    '#markup' => $label,
  ];
}

/**
 * Callback function to format the duration field.
 */
function sitenow_signage_ief_slide_duration_callback($entity, $variables) {
  // If it's a video duration gets handled separately,
  // and should be displayed as 'Other' to avoid confusion.
  $paragraph = $entity->get('field_slide_widget')?->entity;
  if ($paragraph->getParagraphType()->id() === 'slide_video') {
    return [
      '#type' => 'markup',
      '#markup' => "Other",
    ];
  }

  $duration_value = $entity->field_slide_duration->value;
  if ($duration_value === '0') {
    // A duration value of '0' indicates the "other" duration field
    // was used, and we need to get and format its value.
    $num_seconds = $entity->field_slide_duration_other->value;
    $duration = "{$num_seconds} seconds";
  }
  else {
    // In order to get a regular duration field's human-readable
    // value, we need to get the field definition's allowed options
    // and compare with the field's stored value.
    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_definition */
    $field_definition = $entity->field_slide_duration
      ->getFieldDefinition()
      ->getFieldStorageDefinition();
    $field_allowed_options = options_allowed_values($field_definition, $entity);
    $duration = $field_allowed_options[$entity->field_slide_duration->value];
  }
  return [
    '#type' => 'markup',
    '#markup' => $duration,
  ];
}

/**
 * Callback function to render combined schedule fields.
 */
function sitenow_signage_ief_slide_publication_callback($entity, $variables) {
  // Grab and format our publication information.
  $published = ($entity->isPublished()) ? "Published" : "Unpublished";
  $strings[] = "<strong>{$published}</strong>";

  // Do the same with the scheduling information.
  foreach (['publish_on', 'unpublish_on'] as $field) {
    if ($entity->hasField($field) && !$entity->get($field)->isEmpty()) {
      $label = str_replace('_on', '', ucfirst($field));
      $value = date('m/d/Y g:i a', $entity->get($field)->value);
      $strings[] = "<strong>{$label}:</strong> {$value}";
    }
  }
  $full_message = implode('<br>', $strings);

  return [
    '#type' => 'markup',
    '#markup' => $full_message,
  ];
}
