<?php

/**
 * @file
 * Module code for SiteNow Signage.
 */

use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_signage_form_uiowa_alerts_settings_alter(&$form, $form_state, $form_id) {
  // Update the custom alerts description text to note that
  // custom alerts will not display on signs.
  $form['custom_alert_display']['#description'] = $form['custom_alert_display']['#description'] . ' Custom alerts will not render on signs.';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_block(&$variables) {
  switch ($variables['plugin_id']) {
    case 'datetime_block':
    case 'iowalogo_block':
      $node = \Drupal::routeMatch()->getParameter('node');

      // Check if the header display field is empty.
      $hide_block = !empty($node->field_sign_hide_header->value);
      // Hide the block if all the specified fields are empty.
      if ($hide_block) {
        $variables['content'] = [];
      }
      break;

    case 'field_block:node:sign:field_sign_display_title':
      uiowa_core_set_attributes($variables, 'site-name');
      $node = \Drupal::routeMatch()->getParameter('node');

      // Check if the header display field is empty.
      $hide_block = !empty($node->field_sign_hide_header->value);
      // Hide the block if all the specified fields are empty.
      if ($hide_block) {
        $variables['content'] = [];
      }
      break;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function sitenow_signage_preprocess_field(&$variables) {
  $element = $variables['element'];
  if ($element['#field_name'] === 'field_slide_bus_arrivals_stop') {
    $api_client = \Drupal::service('sitenow_signage.icareatransit_api');
    $id = (int) $element[0]['#markup'];
    $prediction_data = $api_client->getPredictions($id);
    // @todo make pretty.
    $markup = print_r($prediction_data, TRUE);
    $variables['items'][0]['content']['#markup'] = $markup;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function sitenow_signage_preprocess_node(&$variables) {
  if ($variables['node']->getType() === 'slide') {
    // Unset node title for slides.
    unset($variables['label']);
  }
  if ($variables['node']->getType() === 'sign') {
    // Add a black background to the sign node.
    $variables['attributes']['class'][] = 'bg--black';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_page(&$variables) {
  // Check if the current page is a node of type 'sign'.
  if (isset($variables['node']) && $variables['node'] instanceof NodeInterface && $variables['node']->getType() === 'sign') {
    // Only modify the page if it is not an admin route.
    $admin_context = \Drupal::service('router.admin_context');
    if (!$admin_context->isAdminRoute()) {
      // Unset regions for viewing logged in.
      foreach ([
        'header',
        'after_content',
        'pre_footer',
        'footer_first',
        'footer_second',
      ] as $region) {
        unset($variables['page'][$region]);
      }

      // Add signage stylesheet.
      $variables['#attached']['library'][] = 'sitenow_signage/signage';
      // Attach the slideshow library.
      $variables['#attached']['library'][] = 'sitenow_signage/slideshow';

      // Attach reload library and set the reload interval from the node.
      // @todo Move this into the anonymous user condition below.
      $variables['#attached']['library'][] = 'sitenow_signage/reload';
      $reload_interval = $variables['node']->field_sign_reload_interval?->value ?? 5 * 60 * 60;
      $variables['#attached']['drupalSettings']['signage']['signReloadInterval'] = $reload_interval;

      // Check that user is logged out before unsetting anything.
      if (\Drupal::currentUser()->isAnonymous()) {
        // Attach the signage alert overrides library.
        $variables['#attached']['library'][] = 'sitenow_signage/signage_alerts';

        // Check if the query string contains the 'signage-display' parameter.
        if (isset(\Drupal::request()?->query?->all()['signage-display'])) {
          // Unset remaining regions except content for logged out users.
          foreach (Element::children($variables['page']) as $key) {
            if ($key !== 'content') {
              unset($variables['page'][$key]);
            }
          }
          // Add a cache context so that the page is cached separately.
          $variables['#cache']['contexts'][] = 'url.query_args:signage-display';
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_layout().
 */
function sitenow_signage_preprocess_layout(&$variables) {
  $layout = $variables['layout'];

  switch ($layout->id()) {

    case 'layout_twocol':
      if (isset($variables['region_attributes']['first']) && ($variables['content']['#settings']['label'] === 'Header')) {
        $variables['region_attributes']['first']->addClass('sign--header');
      }
      break;
  }
}

/**
 * Implements hook_theme().
 */
function sitenow_signage_theme($existing, $type, $theme, $path) {
  return [
    'field__node__field_sign_slides__sign__default' => [
      'template' => 'field--node--field-sign-slides--sign--default',
      'base hook' => 'field',
    ],
    'field__node__field_sign_display_title__sign__default' => [
      'template' => 'field--node--field-sign-display-title--sign--default',
      'base hook' => 'field',
    ],
  ];
}

/**
 * Allowed values for reload interval field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_reload_intervals_allowed_values() {
  $values = [
    21600 => '6 hours',
    3600 => '1 hour',
    1800 => '30 minutes',
  ];

  return $values;
}

/**
 * Allowed values for bus stops field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_bus_stops_allowed_values() {
  $values = [];

  $api_client = \Drupal::service('sitenow_signage.icareatransit_api');
  $stops = $api_client->getStopList();
  /** @var \stdClass $stop */
  foreach ($stops as $item) {
    $values[$item->stop->stopnumber] = "{$item->stop->stopnumber} - {$item->stop->stoptitle}";
  }

  ksort($values);

  return $values;
}
