<?php

/**
 * @file
 * Module code for SiteNow Signage.
 */

use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_signage_form_uiowa_alerts_settings_alter(&$form, $form_state, $form_id) {
  // Update the custom alerts description text to note that
  // custom alerts will not display on signs.
  $form['custom_alert_display']['#description'] = $form['custom_alert_display']['#description'] . ' Custom alerts will not render on signs.';
}

/**
 * Implements hook_preprocess_field().
 */
function sitenow_signage_preprocess_field(&$variables) {
  $element = $variables['element'];
  switch ($element['#field_name']) {
    case 'field_sign_slides':
      foreach ($variables['items'] as &$item) {
        $node = $item['content']['#node'];
        // Set a reasonable default just in case.
        $item['interval'] = '15000';
        if ($node->hasField('field_slide_duration') && !$node->field_slide_duration->isEmpty()) {
          $item['interval'] = $item['content']['#node']->field_slide_duration->value;
        }
      }
      break;

    case 'field_astra_schedule_room':
      // Cache this for 1 day.
      $variables['#cache']['tags'][] = 'time:daily';
      // Get additional info necessary to overwrite the output of this field.
      $paragraph = $variables['element']['#object'];
      $headline = $paragraph->get('field_headline')->value;
      $today = date('Y-m-d');
      $had_failure = FALSE;
      $rows = [];

      if (!empty($variables['items'][0]['content']['#markup'])) {
        $value = $variables['items'][0]['content']['#markup'];
        if ($value !== 'none') {
          // Split field value into building code and room id.
          [$building_code, $room_id] = explode('-', $value);

          // Load and fetch data from the MAUI API.
          $api_client = \Drupal::service('uiowa_maui.api');
          $data = $api_client->getRoomSchedule($today, $today, $building_code, $room_id);

          if ($data === FALSE) {
            $had_failure = TRUE;
          }
          elseif (!empty($data)) {
            foreach ($data as $event) {
              $formatted_time = trim($event->startTime) . ' – ' . trim($event->endTime);
              $rows[] = [
                'time' => $formatted_time,
                'event' => trim($event->title),
              ];
            }
          }

          // Room specific table caption.
          $table_caption = 'Schedule for room ' . $room_id;
        }
      }

      $empty_message = $had_failure
        ? t('There was an error retrieving room schedule information. Please try again later or contact the ITS Help Desk if the problem persists.')
        : t('No scheduled events for this room.');

      $header = [
        'time' => t('Time'),
        'event' => t('Event'),
      ];

      // Headline overrides table caption if set.
      if (!empty($headline)) {
        $table_caption = $headline;
      }

      $markup['container']['table'] = [
        '#theme' => 'table',
        '#caption' => $table_caption ?? 'Room Schedule',
        '#header' => $header,
        '#rows' => $rows,
        '#empty' => $empty_message,
        '#attributes' => [
          'class' => [
            'signage__table',
          ],
        ],
      ];
      $markup = \Drupal::service('renderer')->render($markup);

      // Replace the field output with table markup.
      $variables['items'][0]['content']['#markup'] = $markup;
      break;

    case 'field_outlook_events_resource':
      // Cache this for 1 hour.
      $variables['#cache']['tags'][] = 'time:hourly';
      // Get additional info necessary to overwrite the output of this field.
      $paragraph = $variables['element']['#object'];
      $headline = $paragraph->get('field_headline')->value;
      $use_org = $paragraph->get('field_outlook_events_use_org')->value;
      $end_time = $paragraph->get('field_outlook_events_end_time')->value;
      $orientation = sitenow_signage_get_orientation($paragraph);

      // Load and fetch data from the Hours API.
      $api_client = \Drupal::service('uiowa_hours.api');
      $today = date('Ymd');
      $data = [];
      $rows = [];
      $had_failure = FALSE;

      // Loop through each resource value.
      foreach ($variables['items'] as $item) {
        $resource_id = $item['content']['#markup'];
        $resource_data = $api_client->getHours($resource_id);

        if ($resource_data['data'] === FALSE) {
          $had_failure = TRUE;
          continue;
        }

        // Use resource alias as room name if available.
        if (!empty($resource_data['data']['resourceAlias'])) {
          $resource_id = $resource_data['data']['resourceAlias'];
        }

        // This isn't used now and borks the foreach loop. Unset it.
        if (isset($resource_data['data']['$id'])) {
          unset($resource_data['data']['$id']);
        }
        if (isset($resource_data['data']['resourceAlias'])) {
          unset($resource_data['data']['resourceAlias']);
        }

        // Loop through today's events.
        foreach ($resource_data['data'][$today] ?? [] as $event) {
          $start = strtotime($event['iso8601Start']);
          $end = strtotime($event['iso8601End']);

          // Skip events already ended.
          if ($end < time()) {
            continue;
          }

          // Format time range based on settings.
          $formatted_date = date('g:i a', $start);
          if ($end_time) {
            if ($end >= strtotime('tomorrow')) {
              $formatted_date = date('M j g:i a', $start) . ' – ' . date('M j g:i a', $end);
            }
            else {
              $formatted_date .= ' – ' . date('g:i a', $end);
            }
          }

          // Allows overriding meeting subject with organizer name.
          if ($use_org && !empty($event['organizerName'])) {
            $subject = $event['organizerName'];
          }
          else {
            // Meeting subject (respect private items).
            $subject = ($event['isPrivate'] == 1) && !empty($event['organizerName'])
              ? $event['organizerName']
              : $event['summary'];
          }

          // Build row, store start time for sorting.
          $data[] = [
            'time' => $formatted_date,
            'start' => $start,
            'room' => $resource_id,
            'meeting' => $subject,
          ];
        }
      }

      if (!empty($data)) {
        // Sort rows by start time.
        usort($data, fn($a, $b) => $a['start'] <=> $b['start']);

        // Cap the number of rows differently based on orientation.
        $max = $orientation === 'horizontal' ? 10 : 15;
        $data = array_slice($data, 0, $max);

        // Build table rows.
        foreach ($data as $event) {
          $row = [
            'time' => $event['time'],
            'meeting' => $event['meeting'],
            'room' => $event['room'],
          ];
          $rows[] = $row;
        }
      }

      // Choose an empty message based on whether we saw a failure.
      if ($had_failure) {
        $empty_message = t('There was an error retrieving schedule information. Please try again later or contact the ITS Help Desk if the problem persists.');
      }
      else {
        $empty_message = t('There are currently no scheduled events to display.');
      }

      // Build renderable table.
      $header = [
        'time' => t('Time'),
        'meeting' => t('Meeting'),
        'room' => t('Room'),
      ];

      $markup['container']['table'] = [
        '#theme' => 'table',
        '#caption' => $headline,
        '#header' => $header,
        '#rows' => $rows,
        '#empty' => $empty_message,
        '#attributes' => [
          'class' => [
            'signage__table',
          ],
        ],
      ];
      $markup = \Drupal::service('renderer')->render($markup);

      // Replace the field output with table markup.
      $variables['items'][0]['content']['#markup'] = $markup;
      // Remove the other items to avoid outputting them.
      $variables['items'] = array_slice($variables['items'], 0, 1);

      break;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function sitenow_signage_preprocess_node(&$variables) {
  if ($variables['node']->getType() === 'slide') {
    // Unset node title for slides.
    unset($variables['label']);
  }
  if ($variables['node']->getType() === 'sign') {
    // Add a black background to the sign node.
    $variables['attributes']['class'][] = 'bg--black';
    // Add a class for the sign orientation if it exists.
    if ($variables['node']->hasField('field_sign_orientation') && !$variables['node']->get('field_sign_orientation')->isEmpty()) {
      $orientation = $variables['node']->get('field_sign_orientation')->value;
      $variables['attributes']['class'][] = 'signage--' . $orientation;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_page(&$variables) {
  // Check if the current page is a node of type 'sign'.
  if (isset($variables['node']) && $variables['node'] instanceof NodeInterface && $variables['node']->getType() === 'sign') {
    // Only modify the page if it is not an admin route.
    $admin_context = \Drupal::service('router.admin_context');
    if (!$admin_context->isAdminRoute()) {
      // Unset regions for viewing logged in.
      foreach ([
        'header',
        'after_content',
        'pre_footer',
        'footer_first',
        'footer_second',
      ] as $region) {
        unset($variables['page'][$region]);
      }

      // Add signage stylesheet.
      $variables['#attached']['library'][] = 'sitenow_signage/signage';
      // Attach the slideshow library.
      $variables['#attached']['library'][] = 'sitenow_signage/slideshow';

      // Attach reload library and set the reload interval from the node.
      // @todo Move this into the anonymous user condition below.
      $variables['#attached']['library'][] = 'sitenow_signage/reload';
      $reload_interval = $variables['node']->field_sign_reload_interval?->value ?? 5 * 60 * 60;
      $variables['#attached']['drupalSettings']['signage']['signReloadInterval'] = $reload_interval;

      // Check that user is logged out before unsetting anything.
      if (\Drupal::currentUser()->isAnonymous()) {
        // Attach the signage alert overrides library.
        $variables['#attached']['library'][] = 'sitenow_signage/signage_alerts';

        // Check if the query string contains the 'signage-display' parameter.
        if (isset(\Drupal::request()?->query?->all()['signage-display'])) {
          // Unset remaining regions except content for logged out users.
          foreach (Element::children($variables['page']) as $key) {
            if ($key !== 'content') {
              unset($variables['page'][$key]);
            }
          }
          // Add a cache context so that the page is cached separately.
          $variables['#cache']['contexts'][] = 'url.query_args:signage-display';
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function sitenow_signage_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  switch ($paragraph->bundle()) {
    case 'slide_image':
      if (isset($variables['content']['field_slide_image'])) {

        // Get the sign node from the current route.
        $sign_node = \Drupal::routeMatch()->getParameter('node');

        if ($sign_node && $sign_node->bundle() == 'sign') {
          $variables['#cache']['tags'][] = 'node:' . $sign_node->id();
        }

        // Check if we have a sign node with vertical orientation.
        if ($sign_node &&
          $sign_node->bundle() == 'sign' &&
          $sign_node->hasField('field_sign_orientation') &&
          !$sign_node->get('field_sign_orientation')->isEmpty() &&
          $sign_node->get('field_sign_orientation')->value === 'vertical') {

          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');

          foreach ($variables['content']['field_slide_image'] as $delta => &$item) {
            if (is_numeric($delta)) {
              $media_entity = $paragraph->get('field_slide_image')->get($delta)->entity;
              if ($media_entity) {
                $item = $view_builder->view($media_entity, 'vertical_9_16');
              }
            }
          }
        }
      }
      break;

    case 'slide_events':
      $paragraph = $variables['elements']['#paragraph'];
      $filters = [];

      $headline = $paragraph?->field_headline?->getValue();
      $headline = $headline[0]['value'] ?? '';

      $filters['audiences'] = sitenow_signage_value_query_string($paragraph?->field_slide_events_audiences?->getValue());
      $filters['department'] = sitenow_signage_value_query_string($paragraph?->field_slide_events_department?->getValue());
      $filters['interests'] = sitenow_signage_value_query_string($paragraph?->field_slide_events_interests?->getValue());
      $filters['keywords'] = sitenow_signage_value_query_string($paragraph?->field_slide_events_keywords?->getValue());
      $filters['place'] = sitenow_signage_value_query_string($paragraph?->field_slide_events_location?->getValue());
      $filters['types'] = sitenow_signage_value_query_string($paragraph?->field_slide_events_types?->getValue());
      $filters['enddate'] = ['value' => ['date' => '01-01-2100']];

      $amount = 3;
      if (sitenow_signage_get_orientation($paragraph) === 'vertical') {
        $amount = 5;
      }

      $query = [
        'query' => [
          'display_id' => 'events',
          'filters' => $filters,
          'items_per_page' => $amount,
        ],
      ];

      $response = \Drupal::service('sitenow_events.content_hub_api_client')->getEventInstances($query);
      if (!empty($response->events)) {
        $rows = [];

        foreach ($response->events as $key => $value) {
          $event = sitenow_signage_object_to_array($value->event);
          $event['sitenow_events_config'] = \Drupal::config('sitenow_events.settings');
          $styles = [
            'card--list',
            'card__row',
            'card--layout-left',
            'borderless',
            'media--widescreen',
            'media--small',
            'bg--darkmode',
          ];
          $event['attributes']['class'] = $styles;
          $event['heading_size'] = 'h2';
          $card = sitenow_events_build_card($event);
          $rows[] = $card;
        }

        $events_render = [
          '#type' => 'container',
        ];

        if (!empty($headline)) {
          $events_render['headline'] = [
            '#type' => 'html_tag',
            '#tag' => 'h2',
            '#attributes' => [
              'class' => 'slide-events--headline',
            ],
            '#value' => t($headline),
          ];
        }

        $events_render['events'] = $rows;

        $variables['content'] = [
          '#type' => 'markup',
          '#markup' => \Drupal::service('renderer')->render($events_render),
        ];
      }
      else {
        $variables['content'] = [
          '#type' => 'markup',
          '#markup' => t('There are currently no scheduled events to display.'),
        ];
      }

      break;
  }
}

/**
 * Implements hook_theme().
 */
function sitenow_signage_theme($existing, $type, $theme, $path) {
  return [
    'field__node__field_sign_slides__sign__default' => [
      'template' => 'field--node--field-sign-slides--sign--default',
      'base hook' => 'field',
    ],
  ];
}

/**
 * Allowed values for reload interval field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_reload_intervals_allowed_values() {
  $values = [
    21600 => '6 hours',
    3600 => '1 hour',
    1800 => '30 minutes',
  ];

  return $values;
}

/**
 * Allowed values for slide duration field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_slide_durations_allowed_values() {
  $values = [
    10000 => '10 seconds',
    15000 => '15 seconds',
    20000 => '20 seconds',
    30000 => '30 seconds',
    45000 => '45 seconds',
    60000 => '1 minute',
  ];

  return $values;
}

/**
 * Implements hook_allowed_values_function().
 */
function sitenow_signage_slides_size_allowed_values() {
  $options = [
    'horizontal' => 'Horizontal (16:9)',
    'vertical' => 'Vertical (9:16)',
  ];
  return $options;
}

/**
 * Convert initial field value structure into an array that can be given to a URL query.
 *
 * @param array $data
 *   Data to be converted into value query array.
 *
 * @return array
 *   An array of possible key and value options.
 */
function sitenow_signage_value_query_string(array $data): string {
  $items = '';
  foreach ($data as $item) {
    if (isset($item['value'])) {
      if (strlen($items) > 0) {
        $items = $items . ',' . $item['value'];
      }
      else {
        $items = $item['value'];
      }
    }
  }

  return $items;
}

/**
 * Set dynamic allowed values for multiple fields.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _sitenow_signage_get_filter_field_options(FieldStorageDefinitionInterface $definition, ?FieldableEntityInterface $entity = NULL, bool &$cacheable = TRUE): array {
  $options = [];

  switch ($definition->getName()) {
    case 'field_slide_events_audiences':
      $data = \Drupal::service('sitenow_events.content_hub_api_client')->getFilters('filters');

      $tree = _sitenow_events_build_options_tree($data['event_audience']);
      $options = _sitenow_events_build_options_list($tree);
      break;

    case 'field_slide_events_department':
      $data = \Drupal::service('sitenow_events.content_hub_api_client')->getFilters('filters');

      $tree = _sitenow_events_build_options_tree($data['departments']);
      $options = _sitenow_events_build_options_list($tree);
      break;

    case 'field_slide_events_interests':
      $data = \Drupal::service('sitenow_events.content_hub_api_client')->getFilters('filters');

      $tree = _sitenow_events_build_options_tree($data['event_general_interest']);
      $options = _sitenow_events_build_options_list($tree);
      break;

    case 'field_slide_events_keywords':
      $data = \Drupal::service('sitenow_events.content_hub_api_client')->getFilters('keywords');

      foreach ($data['keywords'] as $keyword) {
        $options[$keyword['id']] = $keyword['name'];
      }
      break;

    case 'field_slide_events_location':
      $data = \Drupal::service('sitenow_events.content_hub_api_client')->getPlaces();

      foreach ($data['places'] as $place) {
        // API double-nests places for some reason.
        $place = $place['place'];
        $options[$place['id']] = $place['name'];
      }
      break;

    case 'field_slide_events_types':
      $filters = \Drupal::service('sitenow_events.content_hub_api_client')->getFilters('filters');

      $tree = _sitenow_events_build_options_tree($filters['event_types']);
      $options = _sitenow_events_build_options_list($tree);
      break;
  }

  return $options;

}

/**
 * Helper function to build the options tree.
 *
 * @param array $data
 *   Array of data to be sorted into a tree.
 * @param int $parent
 *   Stores the current id.
 *
 * @return array
 *   Returns an associative array options tree.
 *
 * @todo https://github.com/uiowa/uiowa/issues/5028
 */
function _sitenow_signage_build_options_tree(array $data, int $parent = 0) {
  $tree = [];

  foreach ($data as $d) {
    if ((int) $d['parent_id'] === $parent) {
      $children = _sitenow_signage_build_options_tree($data, $d['id']);

      if (!empty($children)) {
        $d['_children'] = $children;
      }
      $tree[] = $d;
    }
  }

  return $tree;
}

/**
 * Helper function to output the options array.
 *
 * @param array $tree
 *   Array of tree data to be printed.
 * @param int $r
 *   Basic counter.
 * @param int $p
 *   Parent id.
 * @param array $options
 *   Options array to be passed recursively.
 *
 * @return array
 *   Return options with children prefixed with dashes.
 *
 * @todo https://github.com/uiowa/uiowa/issues/5028
 */
function _sitenow_signage_build_options_list(array $tree, $r = 0, $p = NULL, array &$options = []) {
  foreach ($tree as $t) {
    $dash = ((int) $t['parent_id'] === 0) ? '' : str_repeat('-', $r) . ' ';
    $options[$t['id']] = $dash . $t['name'];

    if ((int) $t['parent_id'] === $p) {
      // Reset $r.
      $r = 0;
    }

    if (isset($t['_children'])) {
      _sitenow_signage_build_options_list($t['_children'], ++$r, $t['parent_id'], $options);
    }
  }

  return $options;
}

/**
 * Allowed values for astra room schedules.
 *
 * @see options_allowed_values()
 */
function sitenow_signage_astra_schedule_room_allowed_values() {
  $api_client = \Drupal::service('uiowa_maui.api');
  return $api_client->getBuildingRoomCompleteList() ?: ['none' => 'No rooms available'];
}

/**
 * Allowed values for outlook events resources.
 *
 * @see options_allowed_values()
 */
function sitenow_signage_outlook_resource_allowed_values() {
  $config = \Drupal::configFactory()->getEditable('uiowa_hours.settings');
  $group = $config->get('group') ?: 'Signage';
  $api_client = \Drupal::service('uiowa_hours.api');
  return $api_client->getResources($group) ?: ['none' => 'No resources available'];
}

/**
 * Helper function to get sign orientation.
 *
 * @param Drupal\paragraphs\Entity\Paragraph $paragraph
 *   A $paragraph object.
 *
 * @return string
 *   Return the orientation string.
 *
 * @todo https://github.com/uiowa/uiowa/issues/5028
 */
function sitenow_signage_get_orientation(Paragraph $paragraph) {

  // Need to traverse up to the sign node to get orientation if available.
  $parent_slide = $paragraph->getParentEntity();
  $referring_item = $parent_slide->_referringItem;
  $orientation = 'horizontal';
  if ($referring_item) {
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $referring_field */
    $referring_field = $referring_item->getParent();
    if ($referring_field) {
      $parent_entity = $referring_field->getParent();
      // Add cache tag for the sign node so table
      // updates when sign orientation changes.
      $variables['#cache']['tags'][] = 'node:' . $parent_entity->get('nid')->value;
      if ($parent_entity->get('field_sign_orientation')->value == 'vertical') {
        $orientation = 'vertical';
      }
    }
  }

  return $orientation;
}

/**
 * Fast object to array conversion function.
 *
 * Helper function to convert objects recursively to arrays.
 * This is roughly 1.5-2x faster than json_decode() + json_encode().
 *
 * @param mixed $obj
 *   Any object.
 *
 * @return array|mixed
 *   Returns an object that is being converted into an array
 *   until the complete object is only an array, then it
 *   returns an array.
 */
function sitenow_signage_object_to_array(mixed $obj): mixed {
  // Only process if it's an object or array being passed to the function.
  if (is_object($obj) || is_array($obj)) {
    $ret = (array) $obj;
    foreach ($ret as &$item) {
      // Recursively process EACH element regardless of type.
      $item = sitenow_signage_object_to_array($item);
    }
    return $ret;
  }

  // Otherwise (i.e. for scalar values) return without modification.
  else {
    return $obj;
  }
}
