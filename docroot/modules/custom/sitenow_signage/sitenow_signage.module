<?php

/**
 * @file
 * Module code for SiteNow Signage.
 */

use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sitenow_signage_form_uiowa_alerts_settings_alter(&$form, $form_state, $form_id) {
  // Update the custom alerts description text to note that
  // custom alerts will not display on signs.
  $form['custom_alert_display']['#description'] = $form['custom_alert_display']['#description'] . ' Custom alerts will not render on signs.';
}

/**
 * Implements hook_preprocess_field().
 */
function sitenow_signage_preprocess_field(&$variables) {
  $element = $variables['element'];
  switch ($element['#field_name']) {
    case 'field_slide_bus_arrivals_stop':
      $stop_id = (int) $element[0]['#markup'];

      // Get the bus stop name from the allowed values and set label.
      $stops = sitenow_signage_bus_stops_allowed_values();
      $stop_name = $stops[$stop_id] ?? '';

      // Set the bus stop id as a data attribute on the container for JS.
      $variables['items'][0]['content'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => ['bus-arrivals'],
          'data-stop-name' => $stop_name,
          'data-stop-id' => $stop_id,
        ],
        'loading_message' => [
          '#markup' => '
          <table>
            <thead class="headers">
              <tr>
                <th>Time</th>
                <th>Route</th>
                <th>Agency</th>
              </tr>
            </thead>
            <td colspan="3" >Loading bus arrival informationâ€¦</td>
          </table>',
          '#allowed_tags' => ['table', 'thead', 'tr', 'th', 'td'],
        ],
      ];

      $variables['#attached']['library'][] = 'sitenow_signage/bus_arrivals';
      break;

    case 'field_sign_slides':
      foreach ($variables['items'] as &$item) {
        $node = $item['content']['#node'];
        // Set a reasonable default just in case.
        $item['interval'] = '15000';
        if ($node->hasField('field_slide_duration') && !$node->field_slide_duration->isEmpty()) {
          $item['interval'] = $item['content']['#node']->field_slide_duration->value;
        }
      }
      break;

  }
}

/**
 * Implements hook_preprocess_node().
 */
function sitenow_signage_preprocess_node(&$variables) {
  if ($variables['node']->getType() === 'slide') {

    // Unset node title for slides.
    unset($variables['label']);
  }
  if ($variables['node']->getType() === 'sign') {
    // Add a black background to the sign node.
    $variables['attributes']['class'][] = 'bg--black';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_page(&$variables) {
  // Check if the current page is a node of type 'sign'.
  if (isset($variables['node']) && $variables['node'] instanceof NodeInterface && $variables['node']->getType() === 'sign') {
    // Only modify the page if it is not an admin route.
    $admin_context = \Drupal::service('router.admin_context');
    if (!$admin_context->isAdminRoute()) {
      // Unset regions for viewing logged in.
      foreach ([
        'header',
        'after_content',
        'pre_footer',
        'footer_first',
        'footer_second',
      ] as $region) {
        unset($variables['page'][$region]);
      }

      // Add signage stylesheet.
      $variables['#attached']['library'][] = 'sitenow_signage/signage';
      // Attach the slideshow library.
      $variables['#attached']['library'][] = 'sitenow_signage/slideshow';

      // Attach reload library and set the reload interval from the node.
      // @todo Move this into the anonymous user condition below.
      $variables['#attached']['library'][] = 'sitenow_signage/reload';
      $reload_interval = $variables['node']->field_sign_reload_interval?->value ?? 5 * 60 * 60;
      $variables['#attached']['drupalSettings']['signage']['signReloadInterval'] = $reload_interval;

      // Check that user is logged out before unsetting anything.
      if (\Drupal::currentUser()->isAnonymous()) {
        // Attach the signage alert overrides library.
        $variables['#attached']['library'][] = 'sitenow_signage/signage_alerts';

        // Check if the query string contains the 'signage-display' parameter.
        if (isset(\Drupal::request()?->query?->all()['signage-display'])) {
          // Unset remaining regions except content for logged out users.
          foreach (Element::children($variables['page']) as $key) {
            if ($key !== 'content') {
              unset($variables['page'][$key]);
            }
          }
          // Add a cache context so that the page is cached separately.
          $variables['#cache']['contexts'][] = 'url.query_args:signage-display';
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function sitenow_signage_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  if ($paragraph->bundle() == 'slide_image' &&
    isset($variables['content']['field_slide_image'])) {

    // Get the sign node from the current route.
    $sign_node = \Drupal::routeMatch()->getParameter('node');

    if ($sign_node && $sign_node->bundle() == 'sign') {
      $variables['#cache']['tags'][] = 'node:' . $sign_node->id();
    }

    // Check if we have a sign node with vertical orientation.
    if ($sign_node &&
      $sign_node->bundle() == 'sign' &&
      $sign_node->hasField('field_sign_orientation') &&
      !$sign_node->get('field_sign_orientation')->isEmpty() &&
      $sign_node->get('field_sign_orientation')->value === 'vertical') {

      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');

      foreach ($variables['content']['field_slide_image'] as $delta => &$item) {
        if (is_numeric($delta)) {
          $media_entity = $paragraph->get('field_slide_image')->get($delta)->entity;
          if ($media_entity) {
            $item = $view_builder->view($media_entity, 'vertical_9_16');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function sitenow_signage_theme($existing, $type, $theme, $path) {
  return [
    'field__node__field_sign_slides__sign__default' => [
      'template' => 'field--node--field-sign-slides--sign--default',
      'base hook' => 'field',
    ],
  ];
}

/**
 * Allowed values for reload interval field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_reload_intervals_allowed_values() {
  $values = [
    21600 => '6 hours',
    3600 => '1 hour',
    1800 => '30 minutes',
  ];

  return $values;
}

/**
 * Allowed values for slide duration field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_slide_durations_allowed_values() {
  $values = [
    10000 => '10 seconds',
    15000 => '15 seconds',
    20000 => '20 seconds',
    30000 => '30 seconds',
    45000 => '45 seconds',
    60000 => '1 minute',
  ];

  return $values;
}

/**
 * Implements hook_allowed_values_function().
 */
function sitenow_signage_slides_size_allowed_values() {
  $options = [
    'horizontal' => 'Horizontal (16:9)',
    'vertical' => 'Vertical (9:16)',
  ];
  return $options;
}

/**
 * Allowed values for bus stops field.
 *
 * @see \options_allowed_values()
 */
function sitenow_signage_bus_stops_allowed_values() {
  $values = [];
  $unlisted_stops = [0];

  $api_client = \Drupal::service('sitenow_signage.icareatransit_api');
  $stops = $api_client->getStopList();
  /** @var \stdClass $stop */
  foreach ($stops as $item) {
    if (!in_array($item->stop->stopnumber, $unlisted_stops)) {
      $values[$item->stop->stopnumber] = "{$item->stop->stopnumber} - {$item->stop->stoptitle}";
    }
  }

  ksort($values);

  return $values;
}
