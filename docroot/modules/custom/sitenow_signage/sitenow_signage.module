<?php

/**
 * @file
 * Module code for SiteNow Signage.
 */

use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_block(&$variables) {
  switch ($variables['plugin_id']) {
    case 'datetime_block':
    case 'iowalogo_block':
      $node = \Drupal::routeMatch()->getParameter('node');

      // Check if the header display field is empty.
      $hide_block = !empty($node->field_sign_hide_header->value);
      // Hide the block if all the specified fields are empty.
      if ($hide_block) {
        $variables['content'] = [];
      }
      break;

    case 'field_block:node:sign:field_sign_display_title':
      uiowa_core_set_attributes($variables, 'site-name');
      $node = \Drupal::routeMatch()->getParameter('node');

      // Check if the header display field is empty.
      $hide_block = !empty($node->field_sign_hide_header->value);
      // Hide the block if all the specified fields are empty.
      if ($hide_block) {
        $variables['content'] = [];
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == 'field_slideshow_slides') {
    // Attach the splide library.
    $variables['#attached']['library'][] = 'sitenow_signage/slideshow';
  }
}

/**
 * Implements hook_preprocess_node().
 */
function sitenow_signage_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'slide') {
    $variables['label'] = NULL;
  }
  if ($variables['node']->getType() == 'sign') {
    $variables['attributes']['class'][] = 'bg--black';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sitenow_signage_preprocess_page(&$variables) {
  // Check if the current page is a node of type 'sign'.
  if (isset($variables['node']) && $variables['node'] instanceof NodeInterface && $variables['node']->getType() === 'sign') {
    // Remove regions.
    $variables['page']['header'] = [];
    $variables['page']['after_content'] = [];
    $variables['page']['pre_footer'] = [];
    $variables['page']['footer_first'] = [];
    $variables['page']['footer_second'] = [];
    // Add signage stylesheet.
    $variables['#attached']['library'][] = 'sitenow_signage/signage';
    // Check that user is logged out before unsetting anything.
    if (\Drupal::currentUser()->isAnonymous()) {
      // Check if the query string contains the 'signage-display' parameter.
      if (isset(\Drupal::request()?->query?->all()['signage-display'])) {
        // Remove all the regions from the page.
        foreach (Element::children($variables['page']) as $key) {
          if ($key !== 'content') {
            unset($variables['page'][$key]);
          }
        }
        // Add a cache context so that the page is cached separately.
        $variables['#cache']['contexts'][] = 'url.query_args:signage-display';
      }
    }

  }
}

/**
 * Implements hook_preprocess_layout().
 */
function sitenow_signage_preprocess_layout(&$variables) {
  $layout = $variables['layout'];
  $node = $variables['content']['#entity'] ?: NULL;

  if ($node instanceof NodeInterface && $node->getType() === 'sign') {
    if (!empty($node->field_sign_hide_header->value)) {
      $variables['attributes']['class'][] = 'sign--header-hidden';
    }

    switch ($layout->id()) {

      case 'layout_twocol':
        if (isset($variables['region_attributes']['first']) && ($variables['content']['#settings']['label'] === 'Header')) {
          $variables['region_attributes']['first']->addClass('sign--header');
        }
        break;
    }
  }
}

/**
 * Implements hook_theme().
 */
function sitenow_signage_theme($existing, $type, $theme, $path) {
  return [
    'field__block_content__field_slideshow_slides__slideshow' => [
      'template' => 'field--block-content--field-slideshow-slides--slideshow',
      'base hook' => 'field',
    ],
    'field__node__field_sign_display_title__sign__default' => [
      'template' => 'field--node--field-sign-display-title--sign--default',
      'base hook' => 'field',
    ],
  ];
}
