<?php

/**
 * @file
 * Primary module hooks for uiowa_aggregator module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\media\Entity\Media;
use Drupal\uiowa_core\HeadlineHelper;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uiowa_aggregator_form_aggregator_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Remove never from aggregator cleanup options. Keeping items forever has
  // potential to create very large database tables. Add additional options.
  unset($form['processors']['aggregator']['aggregator_clear']['#options'][0]);
  $form['processors']['aggregator']['aggregator_clear']['#options'][15552000] = t('6 months');
  $form['processors']['aggregator']['aggregator_clear']['#options'][31557600] = t('1 year');

  // Remove access to aggregator teaser length as it does nothing!
  // @see: https://www.drupal.org/project/drupal/issues/2283877
  $form['processors']['aggregator']['aggregator_teaser_length']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uiowa_aggregator_form_aggregator_feed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var Drupal\uiowa_core\Access\UiowaCoreAccess $check */
  $check = \Drupal::service('uiowa_core.access_checker');

  /** @var Drupal\Core\Access\AccessResultInterface $access */
  $access = $check->access(\Drupal::currentUser()->getAccount());

  // Set the minimum feed refresh to match our hourly cron job so that
  // webmasters aren't confused as to why it's not refreshing sooner. Admins can
  // set this to whatever assuming they set up a custom job to run more often.
  if ($access->isForbidden()) {
    foreach ($form['refresh']['widget']['#options'] as $key => $value) {
      if ($key !== 0 && $key < 3600) {
        unset($form['refresh']['widget']['#options'][$key]);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_build_defaults_alter().
 */
function uiowa_aggregator_aggregator_item_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {
  $build['#type'] = 'card';
  unset($build['#theme']);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function uiowa_aggregator_aggregator_item_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $build['#attached']['library'][] = 'uids_base/aggregator-feed';
  // Add the card library.
  $build['#attached']['library'][] = 'uids_base/card';

  // Set the title.
  $build['#title'] = $entity->label();

  // Move author field to #meta and add an icon.
  if (!$entity->get('author')->isEmpty() && isset($build['author'])) {
    $build['#meta']['author'] = [
      ...(is_array($build['author']) ? $build['author'] : []),
      '#prefix' => '<span role="presentation" class="fas fa-user"></span>',
    ];
  }

  unset($build['author']);

  // Move description field to #content.
  if (isset($build['description'])) {
    $build['#content'] = $build['description'];
  }
  unset($build['description']);

  // Move timestamp to #subtitle. Since this is just a string, set it as
  // #markup so that it is considered a valid render array.
  $build['#subtitle']['timestamp'] = [
    '#markup' => \Drupal::service('date.formatter')->format((int) $entity->getPostedTime(), 'medium'),
  ];
  unset($build['timestamp']);

  // Set the URL.
  $build['#url'] = $entity->link?->value;

  $override_styles = $build['#override_styles'] ?? [];

  $style_map = [
    'card_headline_style' => 'headline--serif',
    'card_media_position' => 'card--layout-right',
    'media_format' => 'media--widescreen',
    'media_size' => 'media--small',
    'border' => 'borderless',
    ...$override_styles,
    'aggregator_item' => 'aggregator-item',
  ];

  $build['#attributes']['class'] = array_values($style_map);

  // Only add the feed image  and heading size to the aggregator item if we're
  // not on the canonical feed page.
  if (\Drupal::routeMatch()->getRouteName() !== 'entity.aggregator_feed.canonical') {
    // Set the heading level size for use in the template.
    $build['#title_heading_size'] = $variables['elements']['#heading_size'] ?? 'h3';

    /** @var Drupal\aggregator\Entity\Feed $feed */
    $feed = \Drupal::entityTypeManager()
      ->getStorage('aggregator_feed')
      ->load($entity->getFeedId());
    $mid = $feed->field_aggregator_feed_image
      ?->target_id;

    // Establish default view mode if layout_builder_styles don't exist.
    $image_view_mode = 'large__square';

    // A local feed image should take precedence.
    if (!is_null($mid) && !is_null($media = Media::load($mid))) {

      // Map the layout builder styles to the view mode that should be used.
      $media_formats = [
        'media--widescreen' => 'large__widescreen',
        'media--square' => 'large__square',
        'media--circle' => 'large__square',
      ];

      // Set the view mode based on the media format.
      if (isset($media_formats[$style_map['media_format']])) {
        $image_view_mode = $media_formats[$style_map['media_format']];
      }

      $feed_image = \Drupal::entityTypeManager()->getViewBuilder('media')->view($media, $image_view_mode);
      if (!in_array($image_view_mode, $feed_image['#cache']['keys'])) {
        unset($feed_image['#cache']['keys']);
      }
      $build['#media']['field_aggregator_feed_image'] = $feed_image;
    }
    elseif ($image = $feed->getImage()) {
      $build['#meta']['feed_image_external'] = uiowa_aggregator_build_external_image($image, $image_view_mode, $feed->get('title')->getString());
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uiowa_aggregator_preprocess_block__inline_block__uiowa_aggregator(&$variables) {
  /** @var \Drupal\block_content\BlockContentInterface $block */
  $block = $variables['elements']['content']['#block_content'];

  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }

  $variables['attributes']['class'][] = 'list-container';

  $feeds = [];

  foreach ($block->get('field_uiowa_aggregator_feeds')->getIterator() as $list_string_item) {
    $feeds[] = $list_string_item->getString();
  }

  $per_page = (int) $block->get('field_uiowa_aggregator_count')->getString();
  $show_pager = (bool) $block->get('field_uiowa_aggregator_pager')->getString();

  $query = \Drupal::entityTypeManager()->getStorage('aggregator_item')->getQuery()
    ->accessCheck(TRUE)
    ->condition('fid', $feeds, 'IN')
    ->sort('timestamp', 'DESC')
    ->sort('iid', 'DESC');

  if (!$show_pager) {
    $query->range(0, $per_page);
  }

  $result = $query->execute();

  if ($result) {
    $variables['content']['aggregator'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'aggregator-wrapper',
          'uiowa-aggregator',
          'list-container__inner',
        ],
      ],
    ];
    $variables['content']['aggregator']['feed_source'] = ['#markup' => ''];
    $items = \Drupal::entityTypeManager()->getStorage('aggregator_item')->loadMultiple($result);

    if ($items) {
      // Determine heading size for child items.
      $heading_size = 'h3';

      $headline = $block->get('field_uiowa_headline')
        ?->first()
        ?->getValue();

      // Get the appropriate heading size.
      if (!is_null($headline)) {
        if (empty($headline['headline'])) {
          $heading_size = $headline['child_heading_size'];
        }
        else {
          $heading_size = HeadlineHelper::getHeadingSizeUp($headline['heading_size']);
        }
      }

      // If output is paged, overwrite $items with the current chunk.
      if ($show_pager) {
        $count = count($items);
        static $element = 0;
        $element++;
        /** @var \Drupal\Core\Pager\PagerManager $pager */
        $pager = \Drupal::service('pager.manager');
        $chunks = array_chunk($items, $per_page);
        $current = $pager->createPager($count, $per_page, $element)->getCurrentPage();
        $items = $chunks[$current];
      }

      $variables['content']['aggregator']['items'] = \Drupal::entityTypeManager()->getViewBuilder('aggregator_item')->viewMultiple($items, 'default');

      foreach (Element::children($variables['content']['aggregator']['items']) as $id) {
        $variables['content']['aggregator']['items'][$id]['#heading_size'] = $heading_size;
        // If they exist, pass the override styles from the block down to the
        // individual feed items.
        if (isset($variables['elements']['#override_styles'])) {
          $variables['content']['aggregator']['items'][$id]['#override_styles'] = $variables['elements']['#override_styles'];
        }
      }

      if ($show_pager) {
        $variables['content']['pager'] = [
          '#type' => 'pager',
          '#element' => $element,
          '#quantity' => 3,
        ];
      }
    }
  }
  else {
    $variables['content']['no_results'] = [
      '#markup' => $block->field_uiowa_aggregator_text?->value,
      '#prefix' => '<div class="uiowa-aggregator-no-results">',
      '#suffix' => '</div>',
    ];
  }

  $variables['#attached']['feed'][] = [
    'aggregator/rss',
    \Drupal::configFactory()->get('system.site')->get('name') . ' ' . t('aggregator'),
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uiowa_aggregator_preprocess_aggregator_feed(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() === 'entity.aggregator_feed.canonical') {
    $variables['#attached']['library'][] = 'uids_base/aggregator-feed';

    /** @var Drupal\aggregator\Entity\Feed $feed */
    $feed = $variables['elements']['#aggregator_feed'];
    $image = $feed->get('field_aggregator_feed_image');

    // The image field prints via the view mode if set. If not, we'll replace
    // it with the feed image if that is set.
    if ($image->isEmpty()) {
      if ($image = $feed->getImage()) {
        $variables['content']['field_aggregator_feed_image'] = uiowa_aggregator_build_external_image($image, 'small__square', $feed->get('title')->getString());
      }
    }
  }
}

/**
 * Allowed values callback for uiowa_aggregator_feeds field.
 */
function _uiowa_aggregator_get_feeds() {
  $feeds = \Drupal::entityTypeManager()->getStorage('aggregator_feed')->loadMultiple();
  $options = [];

  foreach ($feeds as $feed) {
    $options[$feed->id()] = $feed->label();
  }

  return $options;
}

/**
 * Builds a render array for a feed's external image.
 *
 * @param string $image
 *   The image URL.
 * @param string $view_mode
 *   The view mode.
 * @param string $title
 *   The title.
 *
 * @return array
 *   The render array for a feed's external image.
 */
function uiowa_aggregator_build_external_image($image, $view_mode, $title) {
  return [
    '#theme' => 'imagecache_external_responsive',
    '#uri' => $image,
    '#responsive_image_style_id' => $view_mode,
    '#attributes' => [
      'data-lazy' => TRUE,
      'alt' => t('@title feed image', ['@title' => $title]),
      'class' => [
        'feed-image',
      ],
    ],
  ];
}
