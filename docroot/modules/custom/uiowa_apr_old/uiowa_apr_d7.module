<?php

/**
 * @file
 * UIowa APR module.
 */

/**
 * Implements hook_menu().
 */
function uiowa_apr_d7_menu() {
  $items = array();

  $directory_path = variable_get('ui_apr_directory_path', 'apr/people');
  $directory_title = variable_get('ui_apr_directory_title', 'People');
  $publications_path = variable_get('ui_apr_publications_path', 'apr/publications');
  $sitemap_path = $directory_path . '/sitemap.txt';

  $items['admin/config/content/apr'] = array(
    'title' => 'UI APR Configuration',
    'description' => 'Configuration for UI APR service',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ui_apr_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items[$directory_path] = array(
    'title' => $directory_title,
    'page callback' => 'render_profile_code',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items[$publications_path] = array(
    'title' => 'Publications',
    'page callback' => 'render_publications_code',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items[$sitemap_path] = array(
    'title' => 'APR Site Map',
    'page callback' => 'render_site_map',
    'delivery callback' => 'ui_apr_deliver_site_map',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Page callback for individual profile menu item.
 *
 * @param string $slug
 *   The profile slug.
 * @param string $section
 *   The profile section.
 *
 * @return string
 *   Themed markup string.
 */
function render_profile_code($slug = NULL, $section = NULL) {
  $api_key = variable_get('ui_apr_api_key', 'Unknown');
  $environment = variable_get('ui_apr_environment', 'TEST');
  $service_url = apr_js_url($environment);
  $canonical_base = variable_get('ui_apr_directory_canonical', '');
  $directory_path = variable_get('ui_apr_directory_path', 'apr/people');
  $directory_title = variable_get('ui_apr_directory_title', 'People');
  $title_selector = variable_get('ui_apr_title_selector', 'h1.title');
  $directory_intro = variable_get('ui_apr_directory_intro', '');
  $page_size = variable_get('ui_apr_directory_page_size', '30');
  $show_title = variable_get('ui_apr_directory_show_title', 'false');
  $show_switcher = variable_get('ui_apr_directory_show_switcher', 'false');
  $profile_html = NULL;
  $msg = NULL;

  $css_includes = variable_get('ui_apr_css_includes', '');
  $stylesheets = stylesheets($css_includes);

  if (!is_null($slug)) {
    $meta = fetch_profile_meta($slug);

    $profile_title = $meta["name"];
    drupal_set_title($profile_title);
    meta_tag('description', $profile_title . ' - Official University of Iowa profile', 'ui-apr-meta-description');

    $canonical_slug = $meta["slug"];
    $canonical = canonical($canonical_base, $canonical_slug);
    link_tag('canonical', $canonical, 'ui-apr-link-canonical');

    $profile_html = fetch_profile($slug, $show_title);

    if(is_null($profile_html)) {
      $redirect_path = 'Location: /' . $directory_path . '?not_found=1';
      header($redirect_path);
      die();
    }
  }

  // Check to see if we redirected with a not_found param
  $params = drupal_get_query_parameters();
  $not_found = NULL;
  if(array_key_exists('not_found', $params)) {
    $not_found = true;
  }
  if(!is_null($not_found)) {
    $msg = "Profile not found. Please use the search tools to find the correct person.";
  }

  return theme('uiowa_apr_profile', array(
    'slug' => $slug,
    'section' => $section,
    'api_key' => $api_key,
    'service_url' => $service_url,
    'directory_title' => $directory_title,
    'title_selector' => $title_selector,
    'directory_intro' => $directory_intro,
    'page_size' => $page_size,
    'show_title' => $show_title,
    'show_switcher' => $show_switcher,
    'profile_html' => $profile_html,
    'custom_styles' => $stylesheets,
    'msg' => $msg,
    'not_found' => $not_found,
  ));
}

/**
 * Helper function to fetch profile name from a slug.
 *
 * @param string $slug
 *   The profile slug.
 * @param string $section
 *   The profile section.
 *
 * @return array
 *   Array containing metadata about the profile.
 */
function fetch_profile_meta($slug, $section = NULL) {
  $api_key = variable_get('ui_apr_api_key', 'Unknown');
  $environment = variable_get('ui_apr_environment', 'TEST');
  $service_url = apr_service_url($environment) . '/people/' . $slug . "/meta";

  $params = array("key" => $api_key);
  $query_string = '?' . http_build_query($params);
  $name_service_url = $service_url . $query_string;

  $options = array(
    "method" => "GET",
    "timeout" => 10.0,
    "headers" => array(
      "Accept" => 'text/plain',
      "Referer" => $GLOBALS['base_url'],
    ),
  );

  $service_response = drupal_http_request($name_service_url, $options);

  if ($service_response->code >= 200 && $service_response->code < 300) {
    $json = $service_response->data;
    return drupal_json_decode($json);
  }
  else {
    return array(
      "name" => $slug,
      "slug" => $slug
    );
  }
}

/**
 * Helper function to fetch a profile.
 *
 * @param string $slug
 *   The profile slug.
 * @param bool $show_title
 *   Boolean indicating whether or not to show the title.
 *
 * @return mixed
 *   The response data or an empty string.
 */
function fetch_profile($slug, $show_title) {
  $api_key = variable_get('ui_apr_api_key', 'Unknown');
  $environment = variable_get('ui_apr_environment', 'TEST');
  $service_url = apr_service_url($environment) . '/people/' . $slug;

  $params = array(
    'key' => $api_key,
    'collapse' => 'false',
    'title' => $show_title,
  );

  $query_string = '?' . http_build_query($params);
  $profile_service_url = $service_url . $query_string;

  $options = array(
    "method" => "GET",
    "timeout" => 10.0,
    "headers" => array(
      "Accept" => 'text/html',
      "Referer" => $GLOBALS['base_url'],
    ),
  );

  $service_response = drupal_http_request($profile_service_url, $options);

  if ($service_response->code >= 200 && $service_response->code < 300) {
    return $service_response->data;
  }
  else {
    return NULL;
  }
}

/**
 * Page callback for publication menu item.
 */
function render_publications_code() {
  drupal_set_title('Publications');
  $api_key = variable_get('ui_apr_api_key', 'Unknown');
  $directory_path = variable_get('ui_apr_directory_path', 'apr/people');
  $publications_title = variable_get('ui_apr_publications_title', 'Research');
  $publications_depts = variable_get('ui_apr_publications_departments', '');
  $page_size = variable_get('ui_apr_publications_page_size', '10');
  $environment = variable_get('ui_apr_environment', 'TEST');
  $service_url = apr_js_url($environment);

  $css_includes = variable_get('ui_apr_css_includes', '');
  $stylesheets = stylesheets($css_includes);

  drupal_set_title($publications_title);

  return theme('uiowa_apr_publications', array(
    'api_key' => $api_key,
    'directory_path' => $directory_path,
    'publications_title' => $publications_title,
    'publications_depts' => trim($publications_depts),
    'page_size' => $page_size,
    'service_url' => $service_url,
    'custom_styles' => $stylesheets,
  ));
}

/**
 * Page callback for sitemap menu item.
 */
function render_site_map() {
  $api_key = variable_get('ui_apr_api_key', 'Unknown');
  $directory_path = variable_get('ui_apr_directory_path', 'apr/people');
  $environment = variable_get('ui_apr_environment', 'TEST');

  $service_url = apr_service_url($environment) . '/people/sitemap';
  $params = array("key" => $api_key, "path" => $directory_path);
  $query_string = '?' . http_build_query($params);
  $sitemap_service_url = $service_url . $query_string;

  $options = array(
    "method" => "GET",
    "headers" => array(
      "Accept" => 'text/plain',
      "Referer" => $GLOBALS['base_url'],
    ),
  );

  $service_response = drupal_http_request($sitemap_service_url, $options);

  if ($service_response->code >= 200 && $service_response->code < 300) {
    return $service_response->data;
  }
  else {
    return "Could not generate site map. Response code: " . $service_response->code;
  }
}

/**
 * Delivery callback for sitemap menu item.
 */
function ui_apr_deliver_site_map($content) {
  drupal_add_http_header('Content-Type', 'text/plain; charset=utf-8');
  print $content;
  drupal_page_footer();
}

/**
 * Helper function to map environments to APR service URLs.
 *
 * @param string $environment
 *   The environment.
 *
 * @return string
 *   The APR service URL.
 */
function apr_service_url($environment = 'TEST') {
  $environment_map = array(
    "TEST" => 'https://test.its.uiowa.edu/apr',
    "PROD" => 'https://apps.its.uiowa.edu/apr',
    "DEV" => 'http://progress.its.uiowa.edu:9000/apr',
  );

  if (array_key_exists($environment, $environment_map)) {
    return $environment_map[$environment];
  }
  else {
    return $environment_map['TEST'];
  }
}

/**
 * Helper function to return the APR JavaScript URL.
 */
function apr_js_url($environment = 'TEST') {
  return apr_service_url($environment) . '/public/dist';
}

/**
 * Implements hook_theme().
 */
function uiowa_apr_d7_theme($existing, $type, $theme, $path) {
  $theme = array();

  $theme['uiowa_apr_profile'] = array(
    'render element' => 'content',
    'template' => 'apr-directory',
    'path' => drupal_get_path('module', 'uiowa_apr_d7'),
  );

  $theme['uiowa_apr_publications'] = array(
    'render element' => 'content',
    'template' => 'apr-publications',
    'path' => drupal_get_path('module', 'uiowa_apr_d7'),
  );

  return $theme;
}

/**
 * Helper function to trim stylesheets.
 */
function stylesheets($stylesheet_string) {
  $trimmed = trim($stylesheet_string);
  if (empty($trimmed)) {
    return array();
  }
  else {
    return explode(PHP_EOL, $trimmed);
  }
}

/**
 * Helper function to create meta tags in the page head
 */
function meta_tag($name, $value, $key) {
  $meta_description = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => $name,
      'content' => $value
    ),
  );

  drupal_add_html_head($meta_description, $key);
}

/**
 * Helper function to create link tags in the page head
 */
function link_tag($rel, $href, $key) {
  $element = array(
    '#tag' => 'link', // The #tag is the html tag -
    '#attributes' => array( // Set up an array of attributes inside the tag
      'href' => $href,
      'rel' => $rel,
    ),
  );
  drupal_add_html_head($element, $key);
}

/**
 * @param $canonical_base - Configuration value for base url
 * @param $slug - Profile slug
 *
 * @return string representing canonical url to the profile
 */
function canonical($canonical_base, $slug) {
  if(empty($canonical_base)) {
    $current_url = url(current_path(), array('absolute' => TRUE, 'query' => drupal_get_query_parameters()));
    $canonical =  $current_url;
  } else {
    $canonical = $canonical_base . $slug;
  }

  return $canonical;
}

/**
 * Page callback argument for configuration form menu item.
 */
function ui_apr_form($form, &$form_state) {
  $ui_apr_directory_intro = variable_get('ui_apr_directory_intro', array(
    'value' => '',
    'format' => 'filtered_html',
  ));

  $form['ui_apr_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#default_value' => variable_get('ui_apr_api_key'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t('The API key provided by the ITS-AIS APR team'),
    '#required' => TRUE,
  );

  $form['ui_apr_directory_path'] = array(
    '#type' => 'textfield',
    '#title' => t("Directory Path"),
    '#default_value' => variable_get('ui_apr_directory_path', 'apr/people'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t("Path for the site's primary APR directory. Serves as the base for all profile urls"),
    '#required' => TRUE,
  );

  $form['ui_apr_directory_canonical'] = array(
    '#type' => 'textfield',
    '#title' => t("Canonical Profile Base"),
    '#default_value' => variable_get('ui_apr_directory_canonical', ''),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t("Base url to generate the canonical link to a profile. The slug will be appended to the url. Trailing slash should be included."),
    '#required' => FALSE,
  );

  $form['ui_apr_directory_title'] = array(
    '#type' => 'textfield',
    '#title' => t("Directory Title"),
    '#default_value' => variable_get('ui_apr_directory_title', 'People'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t("Title for the site's primary APR directory. Will be set as Drupal\'s page title"),
    '#required' => TRUE,
  );

  $form['ui_apr_directory_page_size'] = array(
    '#type' => 'textfield',
    '#title' => t("Directory Page Size"),
    '#default_value' => variable_get('ui_apr_directory_page_size', '30'),
    '#size' => 100,
    '#maxlength' => 3,
    '#description' => t('Number of entries per page of the directory. Attribute defaults to 30.'),
    '#required' => TRUE,
  );

  $form['ui_apr_directory_show_title'] = array(
    '#type' => 'select',
    '#title' => t("Show APR Title"),
    '#options' => array(
      'true' => t('true'),
      'false' => t('false'),
    ),
    '#default_value' => variable_get('ui_apr_directory_show_title', 'false'),
    '#description' => t("Flag to show or hide the title returned with the APR profile. By default the profile title will shown as the site's drupal_title"),
    '#required' => TRUE,
  );

  $form['ui_apr_directory_intro'] = array(
    '#type' => 'text_format',
    '#rows' => '10',
    '#cols' => '100',
    '#title' => t("Introduction Block"),
    '#format' => $ui_apr_directory_intro['format'],
    '#default_value' => $ui_apr_directory_intro['value'],
    '#description' => t('HTML to be included at top of directory. Will be enclosed in div with the class apr-directory-introduction'),
    '#required' => FALSE,
  );

  $form['ui_apr_directory_show_switcher'] = array(
    '#type' => 'select',
    '#title' => t("Show List Switcher"),
    '#options' => array(
      'true' => t('true'),
      'false' => t('false'),
    ),
    '#default_value' => variable_get('ui_apr_directory_show_switcher', 'false'),
    '#description' => t("Flag to show or hide the control that allows the user to switch between list views"),
    '#required' => TRUE,
  );

  $form['ui_apr_publications_path'] = array(
    '#type' => 'textfield',
    '#title' => t("Publications Path"),
    '#default_value' => variable_get('ui_apr_publications_path', 'apr/publications'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t("Path for the site's APR publications directory."),
    '#required' => TRUE,
  );

  $form['ui_apr_publications_title'] = array(
    '#type' => 'textfield',
    '#title' => t("Publications Title"),
    '#default_value' => variable_get('ui_apr_publications_title', 'Research'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t("Title for the site's primary publications directory. Will be set as Drupal's page title"),
    '#required' => TRUE,
  );

  $form['ui_apr_publications_page_size'] = array(
    '#type' => 'textfield',
    '#title' => t("Publications Page Size"),
    '#default_value' => variable_get('ui_apr_publications_page_size', '10'),
    '#size' => 100,
    '#maxlength' => 3,
    '#description' => t('Number of entries per page of the publications directory. Attribute defaults to 10.'),
    '#required' => TRUE,
  );

  $form['ui_apr_publications_departments'] = array(
    '#type' => 'textarea',
    '#rows' => '5',
    '#cols' => '100',
    '#title' => "Publications Departments",
    '#default_value' => variable_get('ui_apr_publications_departments', ''),
    '#description' => 'Customize the list of departments exposed by the publications tool. Expects a JSON array. Value attributes in the array must match a department name in APR. Use the text attribute to customize the text the user will see.',
    '#attributes' => array('placeholder' => "[{text: 'Economics', value: 'Economics'}]"),
    '#required' => FALSE,
  );

  $form['ui_apr_title_selector'] = array(
    '#type' => 'textfield',
    '#title' => t("Title Selector"),
    '#default_value' => variable_get('ui_apr_title_selector', 'h1.title'),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t("CSS selector to identify the location of the site's drupal_title"),
    '#required' => TRUE,
  );

  $form['ui_apr_css_includes'] = array(
    '#type' => 'textarea',
    '#rows' => '3',
    '#cols' => '100',
    '#title' => t("Stylesheets"),
    '#default_value' => variable_get('ui_apr_css_includes', ''),
    '#description' => t('Urls to stylesheets to include in template, one per-line.'),
    '#required' => FALSE,
  );

  $form['ui_apr_environment'] = array(
    '#type' => 'select',
    '#title' => t('APR Service Environment'),
    '#options' => array(
      'TEST' => t('Test'),
      'PROD' => t('Production'),
      'DEV' => t('Development'),
    ),
    '#default_value' => variable_get('ui_apr_environment', 'TEST'),
    '#description' => t("Specify version of APR Service to access."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * APR profile preprocess.
 */
function template_preprocess_uiowa_apr_profile(&$variables) {
  $variables['directory_intro_filtered'] = check_markup($variables['directory_intro']['value'], $variables['directory_intro']['format']);
}
