<?php

/**
 * @file
 * Primary module hooks for SiteNow Area of Study module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function uiowa_area_of_study_preprocess_html(&$variables) {
  $variables['#attached']['library'][] = 'uiowa_area_of_study/global';
}

/**
 * Implements hook_form_alter().
 */
function uiowa_area_of_study_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_area_of_study_form':
    case 'node_area_of_study_edit_form':
      _sitenow_node_form_defaults($form, $form_state);
      if (isset($form['field_area_of_study_link_direct'])) {
        $form['field_area_of_study_link_direct']['#states'] = [
          'visible' => [
            ':input[name="field_area_of_study_source_link[0][uri]"]' => ['filled' => TRUE],
          ],
        ];
      }
      break;
  }
}

/**
 * Implements hook_theme for Areas of Study.
 */
function uiowa_area_of_study_theme($existing, $type, $theme, $path) {
  return [
    'node__area_of_study__teaser' => [
      'template' => 'node--area-of-study--teaser',
      'base hook' => 'node',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uiowa_area_of_study_preprocess_field(&$variables) {
  switch ($variables["element"]["#field_name"]) {
    // Make it button!
    case 'field_area_of_study_source_link':
      switch ($variables["element"]["#view_mode"]) {
        case '_custom':
          // Assumes single link.
          $variables['items'][0]['content']['#options']['attributes']['class'][] = 'bttn bttn--full bttn--primary bttn--caps';
          break;
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uiowa_area_of_study_preprocess_views_view_field(&$variables) {
  if (isset($variables['view']) && ($variables['view']->id() == 'areas_of_study') && ($variables['view']->current_display == 'areas_of_study')) {
    if (isset($variables['view']->field) && $variables['field']->realField == 'nothing') {
      $nid = $variables["row"]->_entity->get('nid')->value;
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      $markup = '';
      // For each program type, load the value(s) and string them together for the view result.
      $degrees = [];
      $degree_options = '';
      foreach ($node->get('field_area_of_study_majors') as $paragraph) {
        if ($paragraph->entity->getType() == 'degree') {
          $paragraph_item = $paragraph->entity;
          if (!empty($paragraph_item->field_degree_abbreviation)) {
            $degrees[] = $paragraph_item->field_degree_abbreviation->value;
          }
        }
      }
      $degrees = array_unique($degrees);
      foreach ($degrees as $item) {
        $degree_options .= $item . ', ';
      }
      if (!empty($degree_options)) {
        $markup .= $degree_options;
      }
      // AoS Program Type text fields.
      $fields = [
        'Minor' => 'field_area_of_study_minors',
        'Certificate' => 'field_area_of_study_certificates',
        'Online Option' => 'field_area_of_study_online',
      ];
      foreach ($fields as $label => $field) {
        $value = $node->get($field)->value;
        if ($value) {
          $markup .= $label . ', ';
        }
      }
      $markup = trim($markup, ', ');
      $markup = '<div class="degree-options">' . $markup . '</div>';
      if (!empty($markup)) {
        $variables['output'] = [
          '#markup' => $markup,
        ];
      }
    }
  }
}
