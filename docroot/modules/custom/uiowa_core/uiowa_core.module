<?php

/**
 * @file
 * Primary module hooks for Uiowa Core module.
 */

use Drupal\block_content\Entity\BlockContent;
use Drupal\Component\Utility\Html;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\google_tag\Entity\Container;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\symfony_mailer\EmailInterface;
use Drupal\uiowa_core\Entity\Card;
use Drupal\uiowa_core\Entity\Event;
use Drupal\uiowa_core\Entity\RendersAsCardInterface;
use Drupal\uiowa_core\Entity\TimelineItem;
use Drupal\uiowa_core\HeadlineHelper;
use Drupal\uiowa_core\RegionHelper;
use Drupal\views\Views;
use Symfony\Component\Mime\Address;
use Symfony\Component\Mime\Exception\RfcComplianceException;

/**
 * Implements hook_cron().
 */
function uiowa_core_cron() {
  // Daily.
  $state_key = 'uiowa_core_daily_last';
  $daily_last_cleared = \Drupal::state()->get($state_key);
  $today = date('Y-m-d');
  if (!$daily_last_cleared || $daily_last_cleared != $today) {
    \Drupal::state()->set($state_key, $today);
    Cache::invalidateTags(['time:daily']);

    if (\Drupal::moduleHandler()->moduleExists('acquia_purge')) {
      $purgeInvalidationFactory = \Drupal::service('purge.invalidation.factory');
      $purgeQueuers = \Drupal::service('purge.queuers');
      $purgeQueue = \Drupal::service('purge.queue');
      $queuer = $purgeQueuers->get('coretags');

      $invalidations = [
        $purgeInvalidationFactory->get('tag', 'time:daily'),
      ];

      $purgeQueue->add($queuer, $invalidations);
    }
  }

  // Hourly.
  $request_time = \Drupal::time()->getRequestTime();
  $state_key = 'uiowa_core_hourly_last';
  $hourly_last_cleared = \Drupal::state()->get($state_key);

  if (!$hourly_last_cleared || $request_time - $hourly_last_cleared >= 3540) {
    \Drupal::state()->set($state_key, $request_time);
    Cache::invalidateTags(['time:hourly']);

    if (\Drupal::moduleHandler()->moduleExists('acquia_purge')) {
      $purgeInvalidationFactory = \Drupal::service('purge.invalidation.factory');
      $purgeQueuers = \Drupal::service('purge.queuers');
      $purgeQueue = \Drupal::service('purge.queue');
      $queuer = $purgeQueuers->get('coretags');

      $invalidations = [
        $purgeInvalidationFactory->get('tag', 'time:hourly'),
      ];

      $purgeQueue->add($queuer, $invalidations);
    }
  }
}

/**
 * Implements hook_entity_build_defaults_alter().
 */
function uiowa_core_entity_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {
  if ($entity instanceof RendersAsCardInterface && $entity->viewModeShouldRenderAsCard($view_mode)) {
    // Add card build info.
    $entity->addCardBuildInfo($build);
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function uiowa_core_entity_bundle_info_alter(array &$bundles) {
  if (isset($bundles['block_content']['uiowa_card'])) {
    $bundles['block_content']['uiowa_card']['class'] = Card::class;
  }
  if (isset($bundles['block_content']['uiowa_event'])) {
    $bundles['block_content']['uiowa_event']['class'] = Event::class;
  }
  if (isset($bundles['paragraph']['uiowa_timeline_item'])) {
    $bundles['paragraph']['uiowa_timeline_item']['class'] = TimelineItem::class;
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function uiowa_core_module_implements_alter(&$implementations, $hook) {
  // Our uiowa_core_cron() needs to run before purge_processor_cron().
  if ($hook === 'cron' && isset($implementations['purge_processor_cron'])) {
    $group = $implementations['purge_processor_cron'];
    unset($implementations['purge_processor_cron']);
    $implementations['purge_processor_cron'] = $group;
  }
}

/**
 * Implements hook_mail().
 */
function uiowa_core_mail($key, &$message, $params) {
  // Empty to trigger LegacyEmailBuilder for instances where mail is sent from
  // MailManagerReplacement::mail() directly.
}

/**
 * Implements hook_mail_alter().
 */
function uiowa_core_mail_alter(&$message) {
  if (!in_array($message['module'], [
    'webform',
  ])) {
    // Add header in use by email team to avoid spam/external tagging.
    $message['headers']['X-UI-Hosted'] = 'ITS-Acquia';

    // Set a from address to the site email address if none are set.
    if (empty($message['from'])) {
      $message['from'] = \Drupal::config('system.site')->get('mail');
    }

    // Override the from address if it doesn't match our Platform Email domain
    // of uiowa.edu. Otherwise, the email will not be sent. We aren't handling
    // multiple from addresses here because that doesn't seem to work currently
    // hook_mail_alter isn't even invoked for some reason.
    try {
      $from = Address::create($message['from']);
      $domain = explode('@', $from->getAddress());
      $domain = array_pop($domain);

      if ($domain != 'uiowa.edu') {
        $name = $from->getName() ?: \Drupal::config('system.site')->get('name');
        $from = new Address('sitenow-noreply@uiowa.edu', $name);
        $message['headers']['From'] = $from->toString();
      }
    }
    catch (RfcComplianceException $e) {
      \Drupal::logger('uiowa_core')->error(t('Unable to alter outgoing email using from address @from', [
        '@from' => $message['from'],
      ]));
    }
  }
}

/**
 * Implements hook_mailer_PHASE().
 */
function uiowa_core_mailer_build(EmailInterface $email) {
  // Add header in use by email team to avoid spam/external tagging.
  $email->addTextHeader('X-UI-Hosted', 'ITS-Acquia');

  // Set a from address to the site email address if none are set.
  if (empty($email->getFrom())) {
    $email->setFrom([
      new Address(\Drupal::config('system.site')->get('mail'), \Drupal::config('system.site')->get('name')),
    ]);
  }

  // Override the from address if it doesn't match our Platform Email domain
  // of uiowa.edu. Otherwise, the email will not be sent. We aren't handling
  // multiple from addresses here because that doesn't seem to work currently -
  // hook_mail_alter isn't even invoked for some reason.
  $from_addresses = $email->getFrom();

  foreach ($from_addresses as &$from) {

    $domain = explode('@', $from->getEmail());
    $domain = array_pop($domain);

    if ($domain != 'uiowa.edu') {
      $name = $from->getDisplayName() ?: \Drupal::config('system.site')->get('name');
      $from = new Address('sitenow-noreply@uiowa.edu', $name);
    }
  }
  $email->setFrom($from_addresses);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Invalidate related and tag view caches on content types that
 * support these views.
 */
function uiowa_core_node_presave(Node $node) {
  $node_type = $node->getType();
  $type_map = [
    'article' => 'articles',
    'page' => 'pages',
    'person' => 'people',
  ];

  // Only proceed if this is a supported content type.
  if (isset($type_map[$node_type])) {
    $config_name = 'sitenow_' . $type_map[$node_type] . '.settings';
    $config = \Drupal::configFactory()->getEditable($config_name);
    // We'll do this for tag list and related content.
    foreach ([
      'tag_display' => 'tags_list',
      'related_display' => 'related_content',
    ] as $setting => $view_name) {
      // Only proceed if the option is turned on for this content type.
      if ($config->get($setting) !== 'do_not_display') {
        // Get the view and invalidate the cache.
        $view = Views::getView($view_name);
        $view->storage->invalidateCaches();
      }
    }
  }
}

/**
 * Implements hook_entity_view().
 */
function uiowa_core_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity instanceof RendersAsCardInterface && $entity->viewModeShouldRenderAsCard($view_mode) && !$entity instanceof BlockContent) {
    // Build the card.
    $entity->buildCard($build);
  }
}

/**
 * Implements hook_theme().
 */
function uiowa_core_theme($existing, $type, $theme, $path) {
  return [
    'card' => [
      'render element' => 'element',
    ],
    'uiowa_core_headline' => [
      'variables' => [
        'headline' => NULL,
        'hide_headline' => FALSE,
        'heading_size' => 'h2',
        'headline_style' => 'default',
        'headline_alignment' => 'default',
      ],
    ],
  ];
}

/**
 * Preprocess function uiowa_core_headline.
 */
function template_preprocess_uiowa_core_headline(&$variables) {
  if ((bool) $variables['hide_headline'] === TRUE) {
    $style = 'sr-only';
  }
  else {
    $style = HeadlineHelper::getStyles()[$variables['headline_style']];
    $alignment = HeadlineHelper::getHeadingAlignment()[$variables['headline_alignment']];
    $variables['headline_alignment'] = $alignment;
  }

  $variables['headline_style'] = $style;

}

/**
 * Preprocess function for card.
 */
function template_preprocess_card(&$variables) {
  $element = $variables['element'];

  // Set up various attributes if not already set up.
  foreach ([
    'attributes',
    'button_attributes',
    'media_attributes',
  ] as $attributes_type) {
    if (!isset($element["#$attributes_type"])) {
      $element["#$attributes_type"] = [];
    }
  }

  // Create a set of title headline classes in case its needed.
  $headline_classes = ['headline'];

  // Loop through all classes, add any media and headline classes
  // to the array and remove them from the card classes.
  if (isset($element['#attributes']['class'])) {
    foreach ($element['#attributes']['class'] as $key => $style) {
      if (str_starts_with($style, 'media')) {
        $element['#media_attributes']['class'][] = $style;
        unset($element['#attributes']['class'][$key]);
      }
      if (str_starts_with($style, 'headline')) {
        $headline_classes[] = $style;
        unset($element['#attributes']['class'][$key]);
      }
    }
  }

  $linked_element = FALSE;

  // If there is no URL, then it is not linked.
  if (!empty($element['#url'])) {
    if (!is_null($element['#title'])) {
      $linked_element = 'title';
    }
    elseif (isset($element['#link_text'])) {
      $linked_element = 'button';
    }
    elseif (!empty($element['#media'])) {
      $linked_element = 'media';
    }
    else {
      $linked_element = 'button';
    }
  }

  $element['#linked_element'] = $linked_element;

  if (!empty($element['#title'])) {
    $element['#headline'] = [
      'headline_text' => $element['#title'],
      'headline_level' => $element['#title_heading_size'] ?: 'h2',
      'headline_class' => $headline_classes,
    ];

    // Set 'click-target' class on headline URL if title is the linked element.
    if ($element['#linked_element'] === 'title') {
      $element['#headline']['headline_url'] = $element['#url'];
      $element['#headline']['headline_url_class'] = 'click-target';
    }
  }

  // Set 'aria-hidden' on the button if it is not linked.
  if ($element['#linked_element'] !== 'button') {
    $element['#button_attributes']['aria-hidden'] = TRUE;
  }

  // If title and link text are set, set a button id attribute for
  // aria-describedby.
  if (is_string($element['#title']) && !empty($element['#link_text'])) {
    $aria_id = Html::getUniqueId($element['#title']);
    $element['#headline']['headline_aria'] = $aria_id;
    $element['#button_attributes']['id'] = $aria_id;
  }

  if (!empty($element['#url'])) {
    // Add click-container class if there is a link.
    $element['#attributes']['class'][] = 'click-container';
  }
  else {
    // If there is no URL, set a data attribute so our click a11y script knows
    // to ignore this card.
    $element['#attributes']['data-uids-no-link'] = TRUE;
  }

  $element['#attributes']['class'][] = 'block--word-break';

  // Initialize a list of button classes we need to use.
  $button_classes = [
    'bttn',
    'bttn--primary',
    'bttn--transparent',
    'bttn--light-font',
  ];

  // Add the 'click-target' class to the button if it is linked.
  if ($element['#linked_element'] === 'button') {
    $button_classes[] = 'click-target';
  }

  // Set appropriate button classes if there is a URL, no link text, and link
  // indicator should be shown.
  if (isset($element['#url']) && !isset($element['#link_text']) && $element['#link_indicator']) {
    $button_classes = [
      ...$button_classes,
      'bttn--circle',
      'bttn--no-text',
    ];
  }

  // Add button classes.
  if (!isset($element['#button_attributes']['class'])) {
    $element['#button_attributes']['class'] = [];
  }

  $element['#button_attributes']['class'] = [
    ...$element['#button_attributes']['class'],
    ...$button_classes,
  ];

  // Transfer properties and slots from the render element to variables for
  // processing in the template.
  foreach ([
    'attributes',
    'button_attributes',
    'media',
    'media_attributes',
    'headline',
    'subtitle',
    'meta',
    'content',
    'url',
    'link_text',
    'link_indicator',
    'linked_element',
  ] as $prop) {
    if (isset($element["#$prop"])) {
      // If this is an attributes array, convert it to an Attribute first.
      if (str_ends_with($prop, 'attributes') && !$element["#$prop"] instanceof Attribute) {
        $element["#$prop"] = new Attribute($element["#$prop"]);
      }
      $variables[$prop] = $element["#$prop"];
    }
    else {
      $variables[$prop] = NULL;
    }
  }

  // If there is a media element, add the media library.
  if (isset($element['#media'])) {
    $variables['#attached']['library'][] = 'uids_base/media';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uiowa_core_preprocess_field(&$variables) {
  switch ($variables['field_name']) {
    case 'title':
      uiowa_core_set_attributes($variables, [
        'page-title',
        'headline--serif',
        'headline',
      ]);
      break;
  }

  // Check for filtered_html or full_html textareas
  // that might contain a callout, and if found,
  // add the associated uids_base library.
  switch ($variables['field_type']) {
    case 'text_with_summary':
    case 'text_long':
      if (isset($variables['element'][0]['#format']) &&
        in_array($variables['element'][0]['#format'],
          [
            'filtered_html',
            'full_html',
          ])) {
        if (isset($variables['element'][0]['#text']) && preg_match('%<div.*?class=".*?callout.*?">%is', $variables['element'][0]['#text'])) {
          $variables['#attached']['library'][] = 'uids_base/callout';
        }
      }
      break;
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function uiowa_core_preprocess_page(&$variables) {
  $current_route = \Drupal::routeMatch();
  $node = $current_route->getParameter('node');

  $view_id = Drupal::request()->attributes->get('view_id');

  // Tags and related display logic on core content types:
  $tags_related_display_allowed_types = [
    'article',
    'page',
    'person',
  ];
  if (isset($node) && $node instanceof NodeInterface) {
    $node_type = $node->bundle();

    if (in_array($node_type, $tags_related_display_allowed_types)) {

      $tag_display_config = [];
      $tag_display_config['article'] = \Drupal::configFactory()->getEditable('sitenow_articles.settings')->get('tag_display');
      $tag_display_config['page'] = \Drupal::configFactory()->getEditable('sitenow_pages.settings')->get('tag_display');
      $tag_display_config['person'] = \Drupal::configFactory()->getEditable('sitenow_people.settings')->get('tag_display');

      $related_display_config = [];
      $related_display_config['article'] = \Drupal::configFactory()->getEditable('sitenow_articles.settings')->get('related_display');
      $related_display_config['page'] = \Drupal::configFactory()->getEditable('sitenow_pages.settings')->get('related_display');
      $related_display_config['person'] = \Drupal::configFactory()->getEditable('sitenow_people.settings')->get('related_display');

      if (empty($view_id) || $view_id === 'tags_list') {
        switch ($node_type) {
          case 'article':
          case 'page':
          case 'person':
            switch ($tag_display_config[$node_type]) {

              case 'tag_buttons':
                // Tag buttons are default for now. We may add more
                // options in the future, keeping this case around.
                break;

              case 'do_not_display':
                unset($variables['page']['pre_footer']['views_block__tags_list_tags_list']);
                break;

              default:
                unset($variables['page']['pre_footer']['views_block__tags_list_tags_list']);
            }
            break;
        }
      }
      if (empty($view_id) || $view_id === 'related_list') {
        switch ($node_type) {
          case 'article':
          case 'page':
          case 'person':
            switch ($related_display_config[$node_type]) {

              case 'headings_lists':
                // Headings and lists are default for now. We may add more
                // options in the future, keeping this case around.
                unset($variables['page']['pre_footer']['views_block__related_manually_referenced_content_block_grid']);
                break;

              case 'card_grid':
                unset($variables['page']['pre_footer']['views_block__related_content_block_related_headings_lists']);
                break;

              default:
                unset($variables['page']['pre_footer']['views_block__related_content_block_related_headings_lists']);

            }
            break;
        }
      }
    }
    // If it wasn't one of our tags related display allowed types,
    // then we can unset the entire view from the page
    // so that it won't display.
    else {
      unset($variables['page']['pre_footer']['views_block__tags_list_tags_list']);
      unset($variables['page']['pre_footer']['views_block__related_content_block_related_headings_lists']);
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function uiowa_core_page_attachments(&$page) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    // Load campus-wide Google Tag in PROD.
    $env = getenv('AH_PRODUCTION');
    if ((int) $env === 1) {
      $page['#attached']['library'][] = 'uiowa_core/gtag';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function uiowa_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_route = \Drupal::routeMatch();
  $route_name = $current_route->getRouteName();

  // Only allow certain types to be replicated.
  // Ignored config that can be custom to a site.
  if ($route_name === 'entity.node.replicate') {
    // Get allowed replicate entity types.
    $allowed_types = \Drupal::config('uiowa_core.settings')->get('uiowa_core.replicate_allowed');

    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityFormInterface) {
      /** @var Drupal\Core\Entity\EntityInterface $entity */
      $entity = $form_object->getEntity();

      $node_type = $entity->bundle();
      $node_title = $entity->getTitle();
      // Set message and prevent replicate.
      if (!in_array($node_type, $allowed_types)) {
        \Drupal::messenger()
          ->addWarning(t('Replicating content of this type is not allowed. Please contact the ITS Help Desk about enabling this functionality for this content.'));
        $form['actions']['submit']['#disabled'] = TRUE;
      }
      // Customize the replicate confirm dialog to our
      // use case (pages with titles)
      $bundle_label = \Drupal::entityTypeManager()
        ->getStorage('node_type')
        ->load($entity->bundle())
        ->label();

      // Changes title to match the "Edit" action title
      // (e.g. "<em>Edit</em> Home").
      $form['#title'] = t('<em>Replicate @type</em> @title',
        ['@type' => $bundle_label, '@title' => $node_title]);

      // Lowercase for the rest of the form.
      $bundle_label = strtolower($bundle_label);

      $form['new_label_en']['#title'] = t("Replicated @type content's title", ['@type' => $bundle_label]);
      $form['new_label_en']['#description'] = t('This text will be used as the title of the newly-replicated @type.', ['@type' => $bundle_label]);
      // Removes the "This action cannot be undone" text.
      $form['description'] = ['#markup' => ''];
    }
  }

  switch ($form_id) {
    case 'fragment_region_item_add_form':
    case 'fragment_region_item_edit_form':
      // Ensure item is published to prevent rendering issue for anonymous user.
      $form['status']['widget']['value']['#default_value'] = TRUE;
      $form['status']['#disabled'] = TRUE;
      break;

    case 'google_tag_container':
      $uiowa_core_gtag = (int) \Drupal::config('uiowa_core.settings')->get('uiowa_core.gtag');
      // Inform on configuration form that the functionality is
      // currently being blocked from being inserted.
      if ($uiowa_core_gtag === 0) {
        \Drupal::messenger()
          ->addWarning(t('Local Google Tag Manager container snippets are currently blocked from being inserted on this website. Please contact the ITS Help Desk about enabling this functionality.'));
      }
      break;

    // Add delete forms as the types of protected blocks changes.
    case 'block_content_uiowa_text_area_delete_form':
      // Get current block uuid.
      $form_object = $form_state->getFormObject();
      if ($form_object instanceof EntityFormInterface) {
        /** @var Drupal\Core\Entity\EntityInterface $block */
        $block = $form_object->getEntity();
        $uuid = $block->uuid();

        // Get protected settings from uiowa_core.
        $protected = \Drupal::config('uiowa_core.protected');
        // If protected...
        if ($protected->get('protect')) {
          // Get uuids of protected blocks.
          $protected_blocks = $protected->get('protected_blocks');
          $uuids = array_keys($protected_blocks);

          // See if current block matches any protected and prevent deletion.
          if (in_array($uuid, $uuids)) {
            \Drupal::messenger()
              ->addWarning(t('This block is protected from deletion. Remove content from the block instead.'));
            $form['actions']['submit']['#disabled'] = TRUE;
          }
        }
      }
      break;

    case 'menu_link_content_menu_link_content_form':
      // All checked or unchecked this seems to do the same. Hide until we
      // have a use-case.
      if (isset($form["menu_per_role__show_role"])) {
        $form["menu_per_role__show_role"]['#access'] = FALSE;
      }
      // Allow menu items to be hidden to anonymous user with an opt-in process.
      if (isset($form["menu_per_role__hide_role"])) {
        // Show message if hidden.
        if (!empty($form["menu_per_role__hide_role"]["widget"]["#default_value"])) {
          \Drupal::messenger()
            ->addWarning(t('This menu item is currently being hidden. Please contact an user with the "administer menu link visibility" permission.'));
        }

        // Only want folks controlling anonymous visibility.
        $options = [];
        foreach ($form["menu_per_role__hide_role"]["widget"]["#options"] as $key => $option) {
          if ($key === 'anonymous') {
            $options[$key] = $option;
            break;
          }
        }
        $form["menu_per_role__hide_role"]["widget"]["#options"] = $options;

        // Put functionality behind permission.
        if (!\Drupal::currentUser()
          ->hasPermission('administer menu link visibility')) {
          $form["menu_per_role__hide_role"]['#access'] = FALSE;
        }
      }
      break;

    case 'uiowa_core_region_settings':
      // Put active region item functionality behind permission.
      if (!\Drupal::currentUser()
        ->hasPermission('configure all region_item fragment layout overrides')) {
        $form['region_item_after_content_container']['active_region_content_blocks']['after_content']['#disabled'] = TRUE;
        $form['region_item_pre_footer_container']['active_region_content_blocks']['pre_footer']['#disabled'] = TRUE;
        \Drupal::messenger()
          ->addWarning(t('You do not have permission to set the active after content and pre footer items. Please contact a user with webmaster permissions.'));
      }
      break;

    // Add region settings to appropriate node forms.
    case 'node_page_edit_form':
    case 'node_page_form':
      RegionHelper::overrideNodeForm($form);
      break;

    // Add multi column to person types.
    case 'node_person_edit_form':
    case 'node_person_form':
      $form['field_person_types']['#attributes']['class'][] = 'multi--column';
      break;

    case 'views_exposed_form':
      $form['#attached']['library'][] = 'uiowa_core/exposedFormEnhancements';

      // Fixes a bug with BEF, details here:
      // https://www.drupal.org/project/better_exposed_filters/issues/3264403#comment-14803047
      foreach ($form as $k => $v) {
        if (str_contains($k, '_collapsible')) {
          $form[$k]['#open'] = FALSE;
        }
      }
      break;
  }
}

/**
 * {@inheritdoc}
 */
function uiowa_core_google_tag_insert_alter(&$satisfied, Container $container) {
  $uiowa_core_gtag = (int) \Drupal::config('uiowa_core.settings')->get('uiowa_core.gtag');
  $env = getenv('AH_PRODUCTION');
  // Determine if site specific Google Tag should be inserted.
  if ($uiowa_core_gtag === 0 || (int) $env === 0) {
    $satisfied = FALSE;
  }
}

/**
 * Implements hook_preprocess_html().
 */
function uiowa_core_preprocess_html(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if ($admin_context->isAdminRoute()) {
    /** @var \Drupal\Core\Theme\ActiveTheme $active_theme */
    $active_theme_name = \Drupal::service('theme.manager')->getActiveTheme()->getName();
    $default_theme_name = \Drupal::config('system.theme')->get('default');
    if ($active_theme_name === 'claro' && $default_theme_name === 'uids_base') {
      $config_factory = \Drupal::configFactory();
      $config = $config_factory->getEditable('uids_base.settings');

      // Only set 'text--serif' if 'fonts.font-family' setting is set to serif.
      if ($config->get('fonts.font-family') === 'serif') {
        $variables['attributes']['class'][] = 'text--serif';
        $variables['#attached']['library'][] = 'uids_base/global-serif';
      }
    }
  }
  else {
    // Body classes for after content.
    // First, we load the global config for region_settings to check if we have
    // a global after_content.
    $global_after_content_fid = \Drupal::configFactory()
      ->get('uiowa_core.settings')
      ->get('uiowa_core.region_content.after_content');

    // Then, we load the node we are on so we can use its fields.
    $node = \Drupal::routeMatch()
      ->getParameter('node');

    // If our node is really a node, and it is of type page...
    $after_content_override_fid = NULL;
    if ($node instanceof NodeInterface && $node->getType() === 'page') {

      $after_content_override_fid = $node
        ?->field_after_content_override
        ?->target_id;
    }

    // Then, if either a global after_content or an after_content_override
    // exists...
    if (!is_null($global_after_content_fid) || !is_null($after_content_override_fid)) {
      // And if the page has the after_content region...
      if (isset($variables['page']['after_content'])) {
        // Add the class to the body.
        $variables['attributes']['class'][] = 'after_content--spacing';
      }
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function uiowa_core_menu_local_tasks_alter(&$data, $route_name) {
  $logged_in = \Drupal::currentUser()->isAuthenticated();
  if ($logged_in) {
    $data['tabs'][0]['entity.node.delete_form']['#weight'] = 110;
    $data['tabs'][0]['entity.fragment.delete_form']['#weight'] = 110;
    $data['tabs'][0]['entity.taxonomy_term.delete_form']['#weight'] = 110;
  }
  if (isset($data['tabs'][0]['replicate_ui.local_tasks:entity.node.replicate'])) {
    $node = \Drupal::routeMatch()->getParameter('node');
    // Get allowed replicate entity types.
    if ($node) {
      $allowed_types = \Drupal::config('uiowa_core.settings')->get('uiowa_core.replicate_allowed');
      $node_type = $node->bundle();
      // Remove replicate menu item.
      if (!in_array($node_type, $allowed_types)) {
        $data['tabs'][0]['replicate_ui.local_tasks:entity.node.replicate']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function uiowa_core_entity_operation_alter(array &$operations, EntityInterface $entity) {
  // If we're using the replicate module, check if it's available.
  // Also check if we are operating on a node.
  if (isset($operations['replicate']) && $entity instanceof NodeInterface) {
    // Pull our allowed types, and check against the given entity.
    $allowed_types = \Drupal::config('uiowa_core.settings')->get('uiowa_core.replicate_allowed');
    $type = $entity->getType();
    // If it's not an allowed type, then remove
    // the replicate operation.
    if (!in_array($type, $allowed_types)) {
      unset($operations['replicate']);
    }
  }
  switch ($entity->getEntityTypeId()) {
    case 'fragment':
      $current_route = \Drupal::routeMatch();
      $route_name = $current_route->getRouteName();
      if ($route_name === 'uiowa_core.region_settings') {
        $operations['layout']['weight'] = 9;
        $url = Url::fromRoute($route_name)->toString();
        $operations['layout']['url']->setOption('query', ['destination' => $url]);
      }
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uiowa_core_preprocess_block(&$variables) {
  if (isset($variables['base_plugin_id']) && $variables['base_plugin_id'] === 'inline_block') {
    if (isset($variables['content']['#block_content']) && $variables['content']['#block_content'] instanceof RendersAsCardInterface) {
      $variables['content']['#block_content']->buildCard($variables['content']);

      // Prevent contextual links from displaying.
      if (isset($variables['content']['#contextual_links'])) {
        unset($variables['content']['#contextual_links']);
      }

    }
  }
  switch ($variables['plugin_id']) {
    case 'views_block:tags_list-tags_list':
      $variables['#attached']['library'][] = 'uids_base/tags';
      $variables['title_attributes']['class'] = 'h6 block__headline headline headline--serif';
      if (!isset($variables['attributes']['class'])) {
        $variables['attributes']['class'] = [];
      }
      $variables['attributes']['class'][] = 'layout-container tags-list__container block-padding__bottom block-padding__top';
      break;

    case 'views_block:related_manually_referenced_content-block_grid':
      $variables['#attached']['library'][] = 'uids_base/related';
      $variables['title_attributes']['class'] = 'h3 block__headline headline headline--underline headline--serif';
      if (!isset($variables['attributes']['class'])) {
        $variables['attributes']['class'] = [];
      }
      $variables['attributes']['class'][] = 'block--bg-container bg--gray block-padding__bottom block-padding__top';
      break;

    case 'views_block:related_content-block_related_headings_lists':
      $variables['#attached']['library'][] = 'uids_base/related';
      $variables['title_attributes']['class'] = 'h3 block__headline headline headline--underline headline--serif';
      if (!isset($variables['attributes']['class'])) {
        $variables['attributes']['class'] = [];
      }
      $variables['attributes']['class'][] = 'block--bg-container related col--threecol--33 bg--gray block-padding__bottom block-padding__top';
      break;

    case 'system_main_block':
      $current_route = \Drupal::routeMatch();
      if (\Drupal::currentUser()->isAnonymous() && in_array($current_route->getRouteName(), [
        'system.401',
        'system.403',
      ])) {
        $variables['content']['login_link'] = [
          '#type' => 'link',
          '#title' => t('HawkID Login'),
          '#url' => Url::fromRoute('samlauth.saml_controller_login', [
            'destination' => \Drupal::request()->getRequestUri(),
          ]),
          '#prefix' => '<p class="text-align-center">',
          '#suffix' => '</p>',
          '#attributes' => [
            'class' => [
              'bttn',
              'bttn--primary',
              'bttn--caps',
            ],
          ],
          '#cache' => [
            'max-age' => 0,
          ],
        ];
      }
      break;

  }
}

/**
 * Implements hook_token_info().
 */
function uiowa_core_token_info(): array {
  $info = [];
  $info['types']['uiowa_core'] = [
    'name' => t('UIowa Core'),
    'description' => t('Tokens for UIowa Core.'),
  ];
  $info['tokens']['uiowa_core']['org_name'] = [
    'name' => 'Organization Name',
    'description' => 'A token to override the default University of Iowa organization name.',
  ];
  $info['tokens']['uiowa_core']['favicon_assets_path'] = [
    'name' => 'Favicon assets path',
    'description' => 'A token to override the default favicons path.',
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function uiowa_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type === 'uiowa_core') {

    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('uiowa_core.settings');
    $theme_config = $config_factory->getEditable('uids_base.settings');
    $ccom_site = ($theme_config->get('header.branding_options') == 'ccom');

    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'org_name':
          $org_name = $ccom_site ? 'Carver College of Medicine' : 'The University of Iowa';
          $replacements[$original] = $config->get('uiowa_core.org_name') ?? $org_name;
          break;

        case 'favicon_assets_path':
          $favicon_path = $ccom_site ? '/profiles/custom/sitenow/assets/uihc_favicons/' : '/profiles/custom/sitenow/assets/';
          $replacements[$original] = $config->get('uiowa_core.favicon_assets_path') ?? $favicon_path;

          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements template_preprocess_views_view().
 */
function uiowa_core_preprocess_views_view(&$variables) {
  // Check if the current view has a specific ID or display ID.
  $class_exclusion_list = [
    'student_card',
    'student_profiles',
    'academic_groups_taxonomy_term',
    'people_list_block',
    'article_list_block',
    'related_manually_referenced_content',
    'residence_halls',
    'room_list',
  ];

  // Check if the current view's machine name is in the exclusion list.
  if (!in_array($variables['view']->id(), $class_exclusion_list)) {
    // Add list container class for list spacing.
    $variables['attributes']['class'][] = 'list-container--list';
  }

  if ($variables['view']->id() == 'related_manually_referenced_content') {
    // Attach the grid class.
    $variables['attributes']['class'][] = 'grid--threecol--33-34-33';
  }
}

/**
 * Allowed values function for partner counties field.
 */
function uiowa_core_county_options(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  return [
    'Adair',
    'Adams',
    'Allamakee',
    'Appanoose',
    'Audubon',
    'Benton',
    'Black Hawk',
    'Boone',
    'Bremer',
    'Buchanan',
    'Buena Vista',
    'Butler',
    'Calhoun',
    'Carroll',
    'Cass',
    'Cedar',
    'Cerro Gordo',
    'Cherokee',
    'Chickasaw',
    'Clarke',
    'Clay',
    'Clayton',
    'Clinton',
    'Crawford',
    'Dallas',
    'Davis',
    'Decatur',
    'Delaware',
    'Des Moines',
    'Dickinson',
    'Dubuque',
    'Emmet',
    'Fayette',
    'Floyd',
    'Franklin',
    'Fremont',
    'Greene',
    'Grundy',
    'Guthrie',
    'Hamilton',
    'Hancock',
    'Hardin',
    'Harrison',
    'Henry',
    'Howard',
    'Humboldt',
    'Ida',
    'Iowa',
    'Jackson',
    'Jasper',
    'Jefferson',
    'Johnson',
    'Jones',
    'Keokuk',
    'Kossuth',
    'Lee',
    'Linn',
    'Louisa',
    'Lucas',
    'Lyon',
    'Madison',
    'Mahaska',
    'Marion',
    'Marshall',
    'Mills',
    'Mitchell',
    'Monona',
    'Monroe',
    'Montgomery',
    'Muscatine',
    'O\'Brien',
    'Osceola',
    'Page',
    'Palo Alto',
    'Plymouth',
    'Pocahontas',
    'Polk',
    'Pottawattamie',
    'Poweshiek',
    'Ringgold',
    'Sac',
    'Scott',
    'Shelby',
    'Sioux',
    'Story',
    'Tama',
    'Taylor',
    'Union',
    'Van Buren',
    'Wapello',
    'Warren',
    'Washington',
    'Wayne',
    'Webster',
    'Winnebago',
    'Winneshiek',
    'Woodbury',
    'Worth',
    'Wright',
  ];
}

/**
 * Allowed values function for partner counties field.
 */
function uiowa_core_academic_years(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $start_year = 2008;
  $end_year = date('Y') + 1;
  $years = [];
  while ($end_year > $start_year) {
    $years[$end_year - 1] = t('@start-@end', [
      '@start' => $end_year - 1,
      '@end' => $end_year,
    ]);
    $end_year--;
  }
  return $years;
}

/**
 * Delivers the default value for the academic years field.
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function uiowa_core_academic_years_default_value(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  $current_year = date('Y');

  return [
    [
      'value' => $current_year,
    ],
  ];
}

/**
 * Added allowed values function for student profiles territory field.
 */
function uiowa_core_state_options(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable = TRUE) {
  $options = [
    'AL' => 'Alabama',
    'AK' => 'Alaska',
    'AZ' => 'Arizona',
    'AR' => 'Arkansas',
    'CA' => 'California',
    'CO' => 'Colorado',
    'CT' => 'Connecticut',
    'DE' => 'Delaware',
    'DC' => 'District of Columbia',
    'FL' => 'Florida',
    'GA' => 'Georgia',
    'HI' => 'Hawaii',
    'ID' => 'Idaho',
    'IL' => 'Illinois',
    'IN' => 'Indiana',
    'IA' => 'Iowa',
    'KS' => 'Kansas',
    'KY' => 'Kentucky',
    'LA' => 'Louisiana',
    'ME' => 'Maine',
    'MD' => 'Maryland',
    'MA' => 'Massachusetts',
    'MI' => 'Michigan',
    'MN' => 'Minnesota',
    'MS' => 'Mississippi',
    'MO' => 'Missouri',
    'MT' => 'Montana',
    'NE' => 'Nebraska',
    'NV' => 'Nevada',
    'NH' => 'New Hampshire',
    'NJ' => 'New Jersey',
    'NM' => 'New Mexico',
    'NY' => 'New York',
    'NC' => 'North Carolina',
    'ND' => 'North Dakota',
    'OH' => 'Ohio',
    'OK' => 'Oklahoma',
    'OR' => 'Oregon',
    'PA' => 'Pennsylvania',
    'RI' => 'Rhode Island',
    'SC' => 'South Carolina',
    'SD' => 'South Dakota',
    'TN' => 'Tennessee',
    'TX' => 'Texas',
    'UT' => 'Utah',
    'VT' => 'Vermont',
    'VA' => 'Virginia',
    'WA' => 'Washington',
    'WV' => 'West Virginia',
    'WI' => 'Wisconsin',
    'WY' => 'Wyoming',
  ];

  if (!is_null($entity)) {
    $bundle = $entity->bundle();
    // Allow modules to alter options.
    \Drupal::moduleHandler()->alter('state_options', $options, $entity, $bundle);
  }
  else {
    // Allow modules to alter options.
    \Drupal::moduleHandler()->alter('state_options', $options);
  }

  return $options;
}

/**
 * Helper function convert exposed filter to select dropdown.
 */
function uiowa_core_config_entity_filter_select(array &$form, $entity_id) {
  // Get available configuration entities.
  $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage($entity_id);
  $entities = $storage->getQuery()
    ->accessCheck()
    ->condition('status', 1)
    ->sort('title')
    ->execute();

  // Build a list of options.
  $options = [];
  $config_entities = $storage->loadMultiple($entities);
  foreach ($config_entities as $item) {
    $options[$item->id()] = $item->label();
  }
  asort($options);

  // Rebuild the text filter as select list dropdown.
  $form['#type'] = 'select';
  $form['#multiple'] = FALSE;
  $form['#empty_option'] = t('- Any -');
  $form['#options'] = $options;
  unset($form['#size']);
}

/**
 * Helper function to set the field label icon.
 *
 * @param array $variables
 *   The field variables array.
 * @param string $icon_classes
 *   The Font Awesome class for the field label icon.
 * @param string $icon_bg_classes
 *   The Font Awesome class for the background of the field label icon.
 */
function uiowa_core_set_field_label_icon(array &$variables, string $icon_classes, string $icon_bg_classes = '') : void {
  if (!isset($variables['field_label_icon'])) {
    $variables['field_label_icon'] = '';
  }
  $variables['field_label_icon'] = implode(' ',
    [
      $variables['field_label_icon'],
      $icon_classes,
    ]);
  if (!empty($icon_bg_classes)) {
    $variables['field_label_icon_bg'] = $icon_bg_classes;
  }
}

/**
 * Helper function to set the field icon.
 *
 * @param array $variables
 *   The field variables array.
 * @param string $icon_classes
 *   The Font Awesome class for the field icon.
 * @param string $icon_bg_classes
 *   The Font Awesome class for the background of the field icon.
 */
function uiowa_core_set_field_icon(array &$variables, string $icon_classes, string $icon_bg_classes = '') : void {
  if (!isset($variables['field_icon'])) {
    $variables['field_icon'] = '';
  }
  $variables['field_icon'] = implode(' ',
    [
      $variables['field_icon'],
      $icon_classes,
    ]);
  if (!empty($icon_bg_classes)) {
    $variables['field_icon_bg'] = $icon_bg_classes;
  }
}

/**
 * Helper function to set the block/field's attributes.
 *
 * @param array $variables
 *   The block/field variables array.
 * @param array|string $classes
 *   The class(es) to be added to the block/field's attributes.
 */
function uiowa_core_set_attributes(array &$variables, array|string $classes) : void {
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }
  if (!is_array($classes)) {
    $classes = [$classes];
  }
  $variables['attributes']['class'] = array_unique(array_merge($variables['attributes']['class'], $classes));
}

/**
 * Helper function to set the block/field's title attributes.
 *
 * @param array $variables
 *   The block/field variables array.
 * @param array|string $title_classes
 *   The class(es) to be added to the block/field's title attributes.
 */
function uiowa_core_set_title_attributes(array &$variables, array|string $title_classes): void {
  if (!isset($variables['title_attributes']['class'])) {
    $variables['title_attributes']['class'] = [];
  }
  if (!is_array($title_classes)) {
    $title_classes = [$title_classes];
  }
  $variables['title_attributes']['class'] = array_unique(array_merge($variables['title_attributes']['class'], $title_classes));
}

/**
 * Helper function to clean up html tags.
 */
function uiowa_core_html_cleanup($string, $allowed_tags = NULL): string {
  return trim(strip_tags($string, $allowed_tags));
}

/**
 * Helper function to determine if empty.
 */
function uiowa_core_html_empty_after_cleanup($string, $allowed_tags = NULL): bool {
  return uiowa_core_html_cleanup($string, $allowed_tags) === '';
}

/**
 * Unsets a block from the given layout builder parts.
 *
 * @param array &$variables
 *   The variables array.
 * @param string $block_id
 *   The block ID to unset.
 */
function uiowa_core_unset_layout_builder_block(array &$variables, string $block_id) {
  if (isset($variables['content']['_layout_builder'])) {
    foreach ($variables['content']['_layout_builder'] as &$layout) {
      foreach ($layout as &$layout_part) {
        if (is_array($layout_part)) {
          foreach ($layout_part as $key => $block) {
            if (isset($block['#plugin_id']) && $block['#plugin_id'] === $block_id) {
              unset($layout_part[$key]);
              break 2;
            }
          }
        }
      }
    }
  }
}

/**
 * Helper function to hide views row fields.
 */
function uiowa_core_views_row_hide_fields(&$variables, ...$fields_to_hide) {
  foreach ($variables['rows'] as &$row_build) {
    if (!isset($row_build['content']['#hide_fields'])) {
      $row_build['content']['#hide_fields'] = [];
    }

    foreach ($fields_to_hide as $field_to_hide) {
      $row_build['content']['#hide_fields'][] = $field_to_hide;
    }
  }
}
