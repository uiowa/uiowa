<?php

/**
 * @file
 * The sitenow profile cannot contain a hook_install() implementation.
 * @see: https://www.drupal.org/project/drupal/issues/2982052
 */

use Drupal\block_content\BlockContentInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
use Drupal\Core\Entity\Sql\SqlContentEntityStorageException;
use Drupal\file\Entity\File;
use Drupal\layout_builder\Section;
use Drupal\layout_builder\SectionComponent;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Helper function to update all blocks of a type.
 */
function _update_all_blocks_by_plugin_id($block_plugin_id, callable $process): void {
  $db = \Drupal::database();
  $block_storage = \Drupal::entityTypeManager()
    ->getStorage('block_content');

  $section_column = 'layout_builder__layout_section';
  $tables = [
    'node__layout_builder__layout',
    'node_revision__layout_builder__layout',
  ];
  $blocks = [];

  foreach ($tables as $table_name) {
    // Select instances where the section contains this type of block.
    $query = $db->select($table_name, 'n')
      ->condition($section_column, "%$block_plugin_id%", 'LIKE')
      ->fields('n', ['entity_id', 'revision_id', 'delta', $section_column]);

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage(t('Blocks of @type records found: @count', [
        '@type' => $block_plugin_id,
        '@count' => $count,
      ]));

    $results = $query->execute();

    // Loop through the results.
    foreach ($results as $record) {
      // Unserialize the section field into it's class object.
      /** @var \Drupal\layout_builder\Section $section */
      $section = unserialize($record->layout_builder__layout_section, [
        'allowed_classes' => TRUE,
      ]);

      // Loop through the components in the section.
      /** @var \Drupal\layout_builder\Section $section */
      foreach ($section->getComponents() as &$component) {

        // Limit this to only the block component.
        if ($component->getPluginId() !== $block_plugin_id) {
          continue;
        }

        $component_arr = $component->toArray();

        $revision_id = $component_arr['configuration']['block_revision_id'];

        $block = NULL;

        if ($revision_id) {
          if (empty($blocks[$revision_id])) {
            $blocks[$revision_id] = $block_storage->loadRevision($revision_id);
          }
          $block = $blocks[$revision_id];

          if (!$block instanceof BlockContentInterface) {
            continue;
          }
        }

        call_user_func_array($process, [&$component, $block]);
      }
      // Serialize section component and update section component db record.
      // Replace the old section with our newly created one.
      $db->update($table_name)
        ->condition('revision_id', $record->revision_id)
        ->condition('delta', $record->delta)
        ->fields([
          $section_column => serialize($section),
        ])
        ->execute();
    }
  }

  // Only continue with this section if we have a key_value_expire
  // table to work with.
  if ($db->schema()->tableExists('key_value_expire')) {
    // Check if we have a tempstore of this node.
    // Temp store is saved in the db in the key_value_expire,
    // And holds a serialized blob with the unsaved changes.
    // Might be a better method of accessing this through the Layout
    // Builder API and layoutTempstoreRepository, but have not found it yet.
    $query = $db->select('key_value_expire', 'kve')
      ->fields('kve')
      ->condition('collection', 'tempstore.shared.layout_builder.section_storage.overrides', '=')
      ->condition('value', "%$block_plugin_id%", 'LIKE');

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage(t('Tempstore records for blocks of @type records found: @count', [
        '@type' => $block_plugin_id,
        '@count' => $count,
      ]));

    $results = $query
      ->execute();

    foreach ($results as $record) {

      // Unserialize and replace the section in question with our updated one.
      $stored_data = unserialize($record->value, [
        'allowed_classes' => TRUE,
      ]);

      /** @var \Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage $section_storage */
      $section_storage = $stored_data->data['section_storage'];

      // Loop through sections in the storage.
      foreach ($section_storage->getSections() as &$section) {
        // Loop through the components in the section.
        foreach ($section->getComponents() as &$component) {

          // Limit this to only the uiowa_banner block component.
          if ($component->getPluginId() !== $block_plugin_id) {
            continue;
          }

          $component_arr = $component->toArray();

          $revision_id = $component_arr['configuration']['block_revision_id'];
          if ($revision_id) {
            $block = $block_storage->loadRevision($revision_id);
          }
          else {
            $block = unserialize($component_arr['configuration']['block_serialized'], [
              'allowed_classes' => TRUE,
            ]);
          }

          call_user_func_array($process, [&$component, $block]);
        }
      }
      $stored_data->data['section_storage'] = $section_storage;

      // Insert the updated tempstore.
      $db->update('key_value_expire')
        ->condition('name', $record->name, '=')
        ->condition('expire', $record->expire, '=')
        ->fields([
          'value' => serialize($stored_data),
        ])
        ->execute();
    }
  }
}

/**
 * Set list grid defaults for existing list blocks.
 */
function sitenow_update_9001() {
  $block_types = [
    'uiowa_aggregator',
    'uiowa_events',
    'uiowa_articles',
    'uiowa_people',
  ];
  foreach ($block_types as $block_type) {
    // Find NIDs for all nodes with at least one aggregator block.
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'page')
      ->condition('layout_builder__layout', '%' . $block_type . '%', 'LIKE');

    $results = $query->execute();

    foreach ($results as $nid) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      $layout = $node->get('layout_builder__layout');

      // Grab the sections. We'll set updated ones back in below.
      $layout_sections = $layout->getSections();

      /**
       * @var integer $delta_s
       * @var \Drupal\layout_builder\Section $section
       */
      foreach ($layout_sections as $delta_s => $section) {
        $section_is_updated = FALSE;

        // insertComponent() uses delta and region
        // which makes it more difficult to re-set components.
        // With an array and iterator we can set it directly.
        $section_arr = $section->toArray();
        $i = 0;

        /**
         * @var \Drupal\layout_builder\SectionComponent $component
         */
        foreach ($section->getComponents() as $component) {
          if ($component->getPluginId() === 'inline_block:' . $block_type) {
            // @phpstan-ignore-next-line
            $styles = $component->get('layout_builder_styles_style');
            $styles[] = 'list_format_list';
            $styles[] = 'block_grid_threecol_33_34_33';

            // @phpstan-ignore-next-line
            $component->set('layout_builder_styles_style', $styles);
            $section_arr['components'][$i] = $component->toArray();
            $section_is_updated = TRUE;
          }
          $i++;
        }

        if ($section_is_updated) {
          // Create a section from array, set, and save.
          $layout_sections[$delta_s] = Section::fromArray($section_arr);
          $node->set('layout_builder__layout', $layout_sections)
            ->save();
        }
      }
    }
  }
}

/**
 * Set new font-family theme setting.
 */
function sitenow_update_9002() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uids_base.settings');
  $config->set('fonts.font-family', 'sans-serif');
  $config->save();
}

/**
 * Set menu links to expanded by default.
 */
function sitenow_update_9003(&$sandbox) {
  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('menu_link_content')
      ->condition('expanded', 0, '=')
      ->execute();
    $sandbox['total'] = count($query);
    $sandbox['current'] = 0;
    $sandbox['query'] = $query;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Loop through menu links in batches.
  $per_batch = 100;
  $batch = array_slice($sandbox['query'], $sandbox['current'], $sandbox['current'] + $per_batch);
  if (empty($batch)) {
    $sandbox['#finished'] = 1;
    \Drupal::service('router.builder')->rebuild();
    return;
  }

  foreach ($batch as $mcid) {
    $menu_item = MenuLinkContent::load($mcid);
    $menu_item->expanded = 1;
    $menu_item->save();
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' menu items processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Update menu block instance settings to show 1 level of menu.
 */
function sitenow_update_9004(&$sandbox) {
  $connection = Database::getConnection();

  // We need to adjust the records for the current node
  // version and previous revisions.
  foreach ([
    'node_revision__layout_builder__layout',
    'node__layout_builder__layout',
  ] as $table_name) {
    $query = $connection->select($table_name, 'n');
    $orGroup = $query->orConditionGroup()
      ->condition('layout_builder__layout_section', '%s:5:"depth";i:0;%', 'LIKE')
      ->condition('layout_builder__layout_section', '%s:5:"depth";s:1:"0"%', 'LIKE');

    $query->fields('n', ['entity_id'])
      ->condition($orGroup);
    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage($table_name . ' records found (before): ' . $count);

    // For reasons I can't quite understand,
    // the depth config in the menu block settings
    // get serialized as an integer in some cases
    // and as a string in others. We have to handle
    // both.
    // Handle integer case.
    $connection->update($table_name)
      ->condition('layout_builder__layout_section', '%menu_block:main%', 'LIKE')
      ->expression('layout_builder__layout_section', 'REPLACE(layout_builder__layout_section, :old, :new)', [
        ':old' => 's:5:"depth";i:0;',
        ':new' => 's:5:"depth";i:1;',
      ])
      ->execute();
    // Handle string case.
    $connection->update($table_name)
      ->condition('layout_builder__layout_section', '%menu_block:main%', 'LIKE')
      ->expression('layout_builder__layout_section', 'REPLACE(layout_builder__layout_section, :old, :new)', [
        ':old' => 's:5:"depth";s:1:"0"',
        ':new' => 's:5:"depth";s:1:"1"',
      ])
      ->execute();

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage($table_name . ' records found (after): ' . $count);
  }
}

/**
 * Enable grad_person_extended split.
 *
 * In cases where the person_extended split was being used,
 * enable the grad_person_extended split to take its place.
 */
function sitenow_update_9005() {

  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
  $split = 'config_split:person_extended';

  // If person_extended split isn't registered or
  // isn't active, return early.
  if (!isset($filters[$split]) || !$filters[$split]['status']) {
    return t('person_extended split is not active, so no update to run.');
  }

  $config_path = DRUPAL_ROOT . '/../config/default';
  $source = new FileStorage($config_path);

  // Create field storage for new person type status field.
  \Drupal::entityTypeManager()
    ->getStorage('field_storage_config')
    ->create($source->read('field.storage.node.field_person_type_status'))
    ->save();

  // Create field instance for 'field_person_type_status'.
  \Drupal::entityTypeManager()->getStorage('field_config')
    ->create($source->read('field.field.node.person.field_person_type_status'))
    ->save();

  // The following config is needed for the next update.
  $config_names = [
    'config_ignore.settings',
    'config_split.config_split.grad_person_extended',
  ];
  $config_storage = \Drupal::service('config.storage');
  foreach ($config_names as $config_name) {
    $config_storage->write($config_name, $source->read($config_name));
  }

  // Enable the 'person_extended' split.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('config_split.config_split.grad_person_extended');
  $config->set('status', TRUE);
  $config->save(TRUE);
}

/**
 * Update sites using the person_extended to reflect changes to that split.
 */
function sitenow_update_9006(&$sandbox) {
  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
  $split = 'config_split:person_extended';

  // If person_extended split isn't registered or
  // isn't active, return early.
  if (!isset($filters[$split]) || !$filters[$split]['status']) {
    return t('person_extended split is not active, so no update to run.');
  }

  // Process all nodes that have a filled person.
  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'person')
      ->execute();

    $sandbox['total'] = count($query);
    $sandbox['current'] = 0;
    $sandbox['query'] = $query;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Loop through the same nodes in batches.
  $nodes_per_batch = 25;
  $batch = array_slice($sandbox['query'], $sandbox['current'], $sandbox['current'] + $nodes_per_batch);
  if (empty($batch)) {
    $sandbox['#finished'] = 1;
    return;
  }

  foreach ($batch as $nid) {
    // Load the node, set a flag for whether we need to save the node.
    $node = Node::load($nid);
    // Unset any gremlins.
    $node->set('field_person_contact_information', NULL);
    $save_node = FALSE;
    $field_fragments = [
      'room',
      'building',
      'phone',
    ];
    foreach ([
      'lab',
      'office',
    ] as $location_type) {
      $location = [];
      foreach ($field_fragments as $fragment_name) {
        $field_name = "field_person_{$location_type}_{$fragment_name}";
        if ($node->hasField($field_name) && $node->{$field_name}->value) {
          $location[$fragment_name] = $node->{$field_name}->value;
          // Remove field instances from node.
          $node->set($field_name, NULL);
          // Now we need to save the node.
          $save_node = TRUE;
        }
      }

      if (!empty($location)) {
        // Create a Contact Info paragraph instance.
        // and populate with location info.
        $contact_info = Paragraph::create([
          'type' => 'uiowa_contact',
          'field_uiowa_contact_label' => [
            'value' => ucfirst($location_type),
          ],
        ]);

        // If a phone number is present, pop it off the array
        // and add it.
        if (isset($location['phone'])) {
          $contact_info->field_uiowa_contact_phone = array_pop($location);
        }

        // Create the address_line1 string.
        $address = implode(' ', $location);

        // If there is an address_line1, build the address object.
        if ($address !== '') {
          $field_uiowa_contact_address = [
            'country_code' => 'US',
            'address_line1' => $address,
          ];
          $contact_info->set('field_uiowa_contact_address', $field_uiowa_contact_address);
        }
        // Save the contact info.
        $contact_info->save();

        // Attach the contact info to the node.
        $node->field_person_contact_information[] = [
          'target_id' => $contact_info->id(),
          'target_revision_id' => $contact_info->getRevisionId(),
        ];
        $save_node = TRUE;
      }
    }

    // Check if we have the current student field and
    // the person types field.
    if ($node->hasField('field_pt_student_current') && $node->hasField('field_person_types')) {
      // If the person type includes 'student' and
      // current student is FALSE, set the person type status.
      $existing_types = array_column($node->field_person_types->getValue(), 'target_id');
      if (in_array('student', $existing_types) && !$node->field_pt_student_current->value) {
        $node->field_person_type_status->setValue(['value' => 'student']);
        $save_node = TRUE;
      }
    }

    // Save node if there were changes.
    if ($save_node) {
      // Set revision message and save.
      $node->setRevisionLogMessage('Automated save.');
      $node->save();
    }
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' nodes processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Update button classes.
 */
function sitenow_update_9007() {
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme();

  // Limit to just sites running uids_base.
  if ($active_theme->getName() === 'uids_base') {

    $secondary = 'bttn--secondary bttn--caps';
    $search_replace = [
      'btn-primary' => 'bttn--primary bttn--caps',
      'btn-secondary' => $secondary,
      'btn-success' => $secondary,
      'btn-danger' => $secondary,
      'btn-info' => $secondary,
      'btn-warning' => $secondary,
      'btn-light' => $secondary,
      'btn-dark' => $secondary,
      'btn-link' => '',
      'btn-lg' => '',
      'btn-sm' => '',
      'btn-block' => '',
      'btn' => 'bttn',
    ];
    // Table classes to remove.
    $table_search = [
      'table--static',
      'table--is-striped',
      'is-striped',
      'table',
    ];
    $entity_type_manager = \Drupal::entityTypeManager();
    $entity_field_manager = \Drupal::service('entity_field.manager');
    $text_long = $entity_field_manager->getFieldMapByFieldType('text_long');
    $text_with_summary = $entity_field_manager->getFieldMapByFieldType('text_with_summary');
    $entity_field_map = array_merge($text_long, $text_with_summary);

    foreach ($entity_field_map as $entity_type_id => $field_map) {
      $entity_storage = $entity_type_manager->getStorage($entity_type_id);
      if (!($entity_storage instanceof SqlContentEntityStorage)) {
        continue;
      }

      $entity_type = $entity_type_manager->getDefinition($entity_type_id);
      $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
      $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);
      foreach (array_intersect_key($field_storage_definitions, $field_map) as $field_storage_definition) {
        $tables = [];
        $field_name = $field_storage_definition->getName();
        try {
          $tables[] = $table_mapping->getFieldTableName($field_name);
          $value_column = $table_mapping->getFieldColumnName($field_storage_definition, 'value');
        }
        catch (SqlContentEntityStorageException $e) {
          continue;
        }
        // See if the field has a revision table.
        $revision_table = NULL;
        if ($entity_type->isRevisionable() && $field_storage_definition->isRevisionable()) {
          if ($table_mapping->requiresDedicatedTableStorage($field_storage_definition)) {
            $revision_table = $table_mapping->getDedicatedRevisionTableName($field_storage_definition);
          }
          elseif ($table_mapping->allowsSharedTableStorage($field_storage_definition)) {
            $revision_table = $entity_type->getRevisionDataTable() ?: $entity_type->getRevisionTable();
          }
          $tables[] = $revision_table;
        }
        if (!empty($tables)) {
          $db = \Drupal::database();

          foreach ($tables as $table) {
            $update_count = 0;
            $query = $db->select($table, 't')
              ->fields('t');

            $or_group = $query->orConditionGroup();

            foreach ($search_replace as $needle => $string) {
              $or_group->condition($value_column, '%' . $db->escapeLike($needle) . '%', 'LIKE');
            }

            foreach ($table_search as $needle) {
              $or_group->condition($value_column, '%' . $db->escapeLike($needle) . '%', 'LIKE');
            }

            $results = $query->condition($or_group)
              ->execute();

            foreach ($results as $record) {

              $document = Html::load($record->{$value_column});

              foreach (['a', 'table'] as $tag) {
                $instances = $document->getElementsByTagName($tag);

                // We don't actually need the regressive loop
                // here, but its copied/pasted.
                $i = $instances->length - 1;

                while ($i >= 0) {
                  // The current inline image element.
                  $dom_element = $instances->item($i);

                  $class = $dom_element->getAttribute('class');

                  switch ($tag) {
                    case 'a':
                      foreach ($search_replace as $needle => $replace) {
                        $class = str_replace($needle, $replace, $class);
                      }
                      break;

                    case 'table':
                      foreach ($table_search as $needle) {
                        $class = str_replace($needle, '', $class);
                      }
                      break;
                  }

                  if (trim($class)) {
                    $dom_element->setAttribute('class', $class);
                  }
                  else {
                    $dom_element->removeAttribute('class');
                  }

                  $i--;
                }
              }

              // Run database update to store updated $value_column as
              // Html::serialize($document).
              $db->update($table)
                ->fields([
                  $value_column => Html::serialize($document),
                ])
                ->condition('entity_id', $record->entity_id)
                ->condition('revision_id', $record->revision_id)
                ->execute();

              $update_count++;
            }

            if ($update_count) {
              \Drupal::messenger()
                ->addMessage('Processed ' . $update_count . ' update(s) for ' . $table . ' table ' . $value_column . ' column.');
            }
          }
        }
      }
    }

    // Loop through SiteNow config ignored views.
    $views = ['articles', 'people'];
    foreach ($views as $view) {
      $view = \Drupal::entityTypeManager()->getStorage('view')->load('people');
      $default =& $view->getDisplay('default');
      $header_content = $default["display_options"]["header"]["area"]["content"]["value"];
      foreach ($search_replace as $needle => $string) {
        $header_content = str_replace($needle, $string, $header_content);
      }
      $default["display_options"]["header"]["area"]["content"]["value"] = $header_content;
      $view->save();
    }

  }
}

/**
 * Fix table classes that were inadvertently broken.
 */
function sitenow_update_9008() {
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme();

  // Limit to just sites running uids_base.
  if ($active_theme->getName() === 'uids_base') {

    $table_search = [
      '--gray-borders' => 'table--gray-borders',
      '--hover-highlight' => 'table--hover-highlight',
      '--width-default' => 'table--width-default',
    ];
    $entity_type_manager = \Drupal::entityTypeManager();
    $entity_field_manager = \Drupal::service('entity_field.manager');
    $text_long = $entity_field_manager->getFieldMapByFieldType('text_long');
    $text_with_summary = $entity_field_manager->getFieldMapByFieldType('text_with_summary');
    $entity_field_map = array_merge($text_long, $text_with_summary);

    foreach ($entity_field_map as $entity_type_id => $field_map) {
      $entity_storage = $entity_type_manager->getStorage($entity_type_id);
      if (!($entity_storage instanceof SqlContentEntityStorage)) {
        continue;
      }

      $entity_type = $entity_type_manager->getDefinition($entity_type_id);
      $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
      $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);
      foreach (array_intersect_key($field_storage_definitions, $field_map) as $field_storage_definition) {
        $tables = [];
        $field_name = $field_storage_definition->getName();
        try {
          $tables[] = $table_mapping->getFieldTableName($field_name);
          $value_column = $table_mapping->getFieldColumnName($field_storage_definition, 'value');
        }
        catch (SqlContentEntityStorageException $e) {
          continue;
        }
        // See if the field has a revision table.
        $revision_table = NULL;
        if ($entity_type->isRevisionable() && $field_storage_definition->isRevisionable()) {
          if ($table_mapping->requiresDedicatedTableStorage($field_storage_definition)) {
            $revision_table = $table_mapping->getDedicatedRevisionTableName($field_storage_definition);
          }
          elseif ($table_mapping->allowsSharedTableStorage($field_storage_definition)) {
            $revision_table = $entity_type->getRevisionDataTable() ?: $entity_type->getRevisionTable();
          }
          $tables[] = $revision_table;
        }
        if (!empty($tables)) {
          $db = \Drupal::database();

          foreach ($tables as $table) {
            $update_count = 0;

            foreach ($table_search as $needle => $replace) {
              $update_count += $db->update($table)
                ->condition($value_column, '%' . $db->escapeLike($needle) . '%', 'LIKE')
                ->expression($value_column, "REPLACE($value_column, :old, :new)", [
                  ':old' => $needle,
                  ':new' => $replace,
                ])
                ->execute();
            }

            if ($update_count) {
              \Drupal::messenger()
                ->addMessage(t('Processed @update_count update(s) for @table table @value_column column.', [
                  '@update_count' => $update_count,
                  '@table' => $table,
                  '@value_column' => $value_column,
                ]));

              $fix_count = $db->update($table)
                ->condition($value_column, '%' . $db->escapeLike('tabletable--') . '%', 'LIKE')
                ->expression($value_column, "REPLACE($value_column, :old, :new)", [
                  ':old' => 'tabletable--',
                  ':new' => 'table--',
                ])
                ->execute();

              \Drupal::messenger()
                ->addMessage(t('Fixed @fix_count instance(s) where the customer had manually changed the table class in @table table @value_column column.', [
                  '@fix_count' => $fix_count,
                  '@table' => $table,
                  '@value_column' => $value_column,
                ]));
            }
          }
        }
      }
    }
  }
}

/**
 * Helper function to convert an existing people block to a list view block.
 */
function _convert_people_block_component(SectionComponent &$component, BlockContentInterface $block) {
  // @phpstan-ignore-next-line
  $styles = $component->get('layout_builder_styles_style');

  // Default LB styles for new block.
  $new_styles = [
    'card_media_position_right',
    'media_format_circle',
    'content_alignment_left',
    'card_image_small',
    'list_format_list',
    'block_grid_threecol_33_34_33',
  ];

  if (is_array($styles)) {

    $style_update_map = [
      'block_hide_descriptions' => 'delete',
      'block_hide_details' => 'delete',
      'block_hide_images' => 'delete',
      'block_grid_twocol_50_50' => 'block_grid_threecol_33_34_33',
      'list_format_grid' => 'list_format_list',
    ];

    foreach ($styles as $style) {
      if (isset($style_update_map[$style])) {
        if ($style_update_map[$style] === 'delete') {
          continue;
        }
        if ($key = array_search($style_update_map[$style], $new_styles)) {
          $new_styles[$key] = $style;
        }
      }
    }

    $new_styles = array_unique($new_styles);
  }

  // Build out the new view block configuration.
  $config = [
    'id' => 'views_block:people_list_block-list_card',
    'label' => NULL,
    'provider' => 'views',
    'label_display' => NULL,
    'views_label' => '',
    'items_per_page' => $block->field_collection_results->value ?: 'none',
    'headline' => $block->get('field_uiowa_headline')
      ->getValue()[0],
    'pager' => $block->field_collection_pager->value ? 'full' : 'some',
    'pager_offset' => 0,
    'use_more' => $block->field_collection_more->value,
    'use_more_link_url' => $block->field_collection_more_path->value,
    'sort' => [
      'sticky' => [
        'order' => 'DESC',
        'weight' => 0,
      ],
      'field_person_last_name_value' => [
        'order' => 'ASC',
        'weight' => 0,
      ],
      'field_person_first_name_value' => [
        'order' => 'ASC',
        'weight' => 0,
      ],
    ],
    'exposed_filter_values' => [
      'field_tags_target_id' => [],
    ],
    'layout_builder_styles' => $new_styles,
    'context_mapping' => [],
  ];

  // Process tags.
  if (isset($block->get('field_collection_reference')
    ->getValue()[0])) {
    foreach ($block->get('field_collection_reference')
      ->getValue()[0] as $target) {
      $config['exposed_filter_values']['field_tags_target_id'][] = ['target_id' => $target];
    }
  }

  $fields = [
    'field_person_credential',
    'title',
    'field_teaser',
    'field_person_email',
    'field_image',
    'field_person_phone',
    'field_person_position',
  ];

  // Process field visibility settings.
  foreach ($fields as $field) {
    $hide = 0;
    if (isset($styles)) {
      switch ($field) {
        case 'field_image':
          if (in_array('block_hide_images', $styles)) {
            $hide = 1;
          }
          break;

        case 'field_teaser':
          if (in_array('block_hide_descriptions', $styles)) {
            $hide = 1;
          }
          break;

        case 'field_person_email':
        case 'field_person_phone':
          if (in_array('block_hide_details', $styles)) {
            $hide = 1;
          }
          break;
      }
    }

    $config['fields'][$field]['hide'] = $hide;
  }

  // Process sorting defaults.
  $current_sort = $block->field_collection_sort->value;
  if ($current_sort == 'block_people_sfl') {
    $last_name_sort = $config['sort']['field_person_last_name_value'];
    unset($config['sort']['field_person_last_name_value']);
    $config['sort']['field_person_last_name_value'] = $last_name_sort;
  }

  // Repurpose the existing component and set new styles.
  $component->setConfiguration($config);

  // @phpstan-ignore-next-line
  $component->set('layout_builder_styles_style', $new_styles);
}

/**
 * Update all LB people blocks to views block.
 */
function sitenow_update_9009() {
  $db = \Drupal::database();
  $block_storage = \Drupal::entityTypeManager()
    ->getStorage('block_content');

  $section_column = 'layout_builder__layout_section';
  $tables = [
    'node__layout_builder__layout',
    'node_revision__layout_builder__layout',
  ];

  // Collect all the block instances so we can delete them at the end.
  $blocks = [];

  foreach ($tables as $table_name) {
    // Select instances where the section contains a uiowa_people block.
    $query = $db->select($table_name, 'n')
      ->condition($section_column, '%uiowa_people%', 'LIKE')
      ->fields('n', ['entity_id', 'revision_id', 'delta', $section_column]);

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage('People block records found: ' . $count);

    $results = $query->execute();

    // Loop through the results.
    foreach ($results as $record) {

      // Unserialize the section field into it's class object. Allowed classes
      // were set to FALSE for PHPCS after the update had already run.
      /** @var \Drupal\layout_builder\Section $section */
      $section = unserialize($record->layout_builder__layout_section, [
        'allowed_classes' => FALSE,
      ]);

      // Loop through the components in the section.
      foreach ($section->getComponents() as &$component) {

        // Limit this to only the uiowa_people block component.
        if ($component->getPluginId() !== 'inline_block:uiowa_people') {
          continue;
        }

        $component_arr = $component->toArray();
        $revision_id = $component_arr['configuration']['block_revision_id'];

        if (!$revision_id) {
          continue;
        }

        if (empty($blocks[$revision_id])) {
          $blocks[$revision_id] = $block_storage->loadRevision($revision_id);
        }

        if (is_null($blocks[$revision_id])) {
          continue;
        }

        _convert_people_block_component($component, $blocks[$revision_id]);
      }

      // Replace the old section with our newly created one.
      $db->update($table_name)
        ->condition('revision_id', $record->revision_id)
        ->condition('delta', $record->delta)
        ->fields([
          $section_column => serialize($section),
        ])
        ->execute();
    }
  }

  // Only continue with this section if we have a key_value_expire
  // table to work with.
  if ($db->schema()->tableExists('key_value_expire')) {
    // Check if we have a tempstore of this node.
    // Temp store is saved in the db in the key_value_expire,
    // And holds a serialized blob with the unsaved changes.
    // Might be a better method of accessing this through the Layout Builder API
    // and layoutTempstoreRepository, but have not found it yet.
    $query = $db->select('key_value_expire', 'kve')
      ->fields('kve', ['name', 'value', 'expire'])
      ->condition('value', '%uiowa_people%', 'LIKE');

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage('Tempstore records found: ' . $count);

    $results = $query
      ->execute();

    foreach ($results as $record) {
      // Unserialize and replace the section in question with our updated one.
      // Allowed classes were set to FALSE for PHPCS after the update
      // had already run.
      $stored_data = unserialize($record->value, [
        'allowed_classes' => FALSE,
      ]);

      /** @var \Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage $section_storage */
      $section_storage = $stored_data->data['section_storage'];

      // Loop through sections in the storage.
      foreach ($section_storage->getSections() as &$section) {
        // Loop through the components in the section.
        foreach ($section->getComponents() as &$component) {

          // Limit this to only the uiowa_people block component.
          if ($component->getPluginId() !== 'inline_block:uiowa_people') {
            continue;
          }

          $component_arr = $component->toArray();
          $revision_id = $component_arr['configuration']['block_revision_id'];

          if ($revision_id) {
            if (empty($blocks[$revision_id])) {
              $blocks[$revision_id] = $block_storage->loadRevision($revision_id);
            }
            $block = $blocks[$revision_id];
          }
          else {
            // Allowed classes were set to FALSE for PHPCS after the
            // update had already run.
            $block = unserialize($component_arr['configuration']['block_serialized'], [
              'allowed_classes' => FALSE,
            ]);
          }

          if (!$block instanceof BlockContentInterface) {
            continue;
          }

          _convert_people_block_component($component, $block);
        }
      }
      $stored_data->data['section_storage'] = $section_storage;

      // Insert the updated tempstore.
      $db->update('key_value_expire')
        ->condition('name', $record->name, '=')
        ->condition('expire', $record->expire, '=')
        ->fields([
          'value' => serialize($stored_data),
        ])
        ->execute();
    }
  }
  // Delete all the blocks.
  foreach ($blocks as $block) {
    if (!is_null($block)) {
      $block->delete();
    }
  }
}

/**
 * Set - None - section container options to Normal.
 */
function sitenow_update_9010() {
  $connection = Database::getConnection();

  // We need to adjust the records for the current node
  // version and previous revisions.
  foreach ([
    'node_revision__layout_builder__layout',
    'node__layout_builder__layout',
  ] as $table_name) {
    // If the section has a "section_margin_*" style, we can ignore it.
    // It already has a container style selected.
    $query = $connection->select($table_name, 'n')
      ->fields('n', ['entity_id', 'delta', 'layout_builder__layout_section'])
      ->condition('layout_builder__layout_section', '%section_margin_%', 'NOT LIKE');

    $records = $query->execute()->fetchAll();

    \Drupal::messenger()
      ->addMessage($table_name . ' records found (before): ' . count($records));

    // We'll want to collect NIDs for pages we're updating
    // to check against the temp store later.
    $nids = [];

    foreach ($records as $record) {
      // Add the entity ID to our update list.
      $nids[$record->entity_id] = $record->entity_id;

      // Unserialize the record and extract the layout settings. Allowed classes
      // were set to FALSE for PHPCS after the update had already run.
      $stored_data = unserialize($record->layout_builder__layout_section, [
        'allowed_classes' => FALSE,
      ]);

      $layout_settings = $stored_data->getLayoutSettings();
      // Add in the 'Normal' container style.
      // We only pulled records that didn't have a container style,
      // so this can simply be appended.
      $layout_settings['layout_builder_styles_style']['section_margin_fixed_width_container'] = 'section_margin_fixed_width_container';
      $stored_data->setLayoutSettings($layout_settings);

      // Insert the updated settings back into the DB.
      $connection->update($table_name)
        ->condition('entity_id', $record->entity_id, '=')
        ->condition('delta', $record->delta, '=')
        ->fields([
          'layout_builder__layout_section' => serialize($stored_data),
        ])
        ->execute();
    }
    $query = $connection->select($table_name, 'n')
      ->fields('n', ['entity_id', 'delta', 'layout_builder__layout_section'])
      ->condition('layout_builder__layout_section', '%section_margin_%', 'NOT LIKE');

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage($table_name . ' records found (after): ' . $count);
  }

  // If the key_value_expire table doesn't exist, we're done.
  if (!$connection->schema()->tableExists('key_value_expire')) {
    return;
  }

  // Update sections w/no section_margin_ that might be in the temp store.
  $query = $connection->select('key_value_expire', 'kve')
    ->fields('kve', ['name', 'value', 'expire'])
    ->condition('collection', 'tempstore.shared.layout_builder.section_storage.overrides', '=');
  $records = $query->execute()->fetchAll();

  // Create a helper for regex later.
  $nid_matcher = '(' . implode('|', array_keys($nids)) . ')';

  foreach ($records as $record) {
    $replaced = FALSE;

    // If it's not in our list of updated nodes, skip it.
    if (!preg_match("@node\." . $nid_matcher . "\.default\.en@", $record->name)) {
      continue;
    }
    // Unserialize and replace the section in question with our updated one.
    // Allowed classes were set to FALSE for PHPCS after the update had
    // already run.
    $stored_data = unserialize($record->value, [
      'allowed_classes' => FALSE,
    ]);

    /** @var \Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage $section_storage */
    $section_storage = $stored_data->data['section_storage'];
    // Loop through sections in the storage.
    foreach ($section_storage->getSections() as &$section) {
      $layout_settings = $section->getLayoutSettings();
      // Check if we have any section_margin_ layout builder styles,
      // and skip if we do.
      if (preg_match('@section_margin_@', implode(',', array_keys($layout_settings['layout_builder_styles_style'])))) {
        continue;
      }
      $layout_settings['layout_builder_styles_style']['section_margin_fixed_width_container'] = 'section_margin_fixed_width_container';
      $section->setLayoutSettings($layout_settings);
      $replaced = TRUE;
    }
    // If we didn't update any sections,
    // let's continue without touching the DB.
    if (!$replaced) {
      continue;
    }

    $stored_data->data['section_storage'] = $section_storage;

    // Insert the updated tempstore.
    $connection->update('key_value_expire')
      ->condition('name', $record->name, '=')
      ->condition('expire', $record->expire, '=')
      ->fields([
        'value' => serialize($stored_data),
      ])
      ->execute();
  }
}

/**
 * Redo 9009.
 */
function sitenow_update_9011() {
  sitenow_update_9009();

  // Delete remaining orphans?
  $result = \Drupal::entityQuery('block_content')
    ->condition('type', 'uiowa_people')
    ->execute();
  if ($result) {
    $storage_handler = \Drupal::entityTypeManager()->getStorage('block_content');
    $entities = $storage_handler->loadMultiple($result);
    $storage_handler->delete($entities);
  }
}

/**
 * Update existing uiowa_banner blocks to have a default headline_size style.
 */
function sitenow_update_9012() {
  $db = \Drupal::database();

  $section_column = 'layout_builder__layout_section';
  $tables = [
    'node__layout_builder__layout',
    'node_revision__layout_builder__layout',
  ];

  foreach ($tables as $table_name) {
    // Select instances where the section contains a uiowa_banner block.
    $query = $db->select($table_name, 'n')
      ->condition($section_column, '%uiowa_banner%', 'LIKE')
      ->fields('n', ['entity_id', 'revision_id', 'delta', $section_column]);

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage('Banner block records found: ' . $count);

    $results = $query->execute();

    // Loop through the results.
    foreach ($results as $record) {
      // Unserialize the section field into it's class object. Allowed classes
      // were set to FALSE for PHPCS after the update had already run.
      /** @var \Drupal\layout_builder\Section $section */
      $section = unserialize($record->layout_builder__layout_section, [
        'allowed_classes' => FALSE,
      ]);

      // Loop through the components in the section.
      foreach ($section->getComponents() as &$component) {

        // Limit this to only the uiowa_people block component.
        if ($component->getPluginId() !== 'inline_block:uiowa_banner') {
          continue;
        }

        // Pull the layout builder styles from the component.
        // @phpstan-ignore-next-line
        $styles = $component->get('layout_builder_styles_style');

        // Add key for new layout builder style.
        $styles[] = 'headline_large';

        // Set the layout builder styles on the component.
        // @phpstan-ignore-next-line
        $component->set('layout_builder_styles_style', $styles);

      }
      // Serialize section component and update section component db record.
      // Replace the old section with our newly created one.
      $db->update($table_name)
        ->condition('revision_id', $record->revision_id)
        ->condition('delta', $record->delta)
        ->fields([
          $section_column => serialize($section),
        ])
        ->execute();
    }

    // Only continue with this section if we have a key_value_expire
    // table to work with.
    if ($db->schema()->tableExists('key_value_expire')) {
      // Check if we have a tempstore of this node.
      // Temp store is saved in the db in the key_value_expire,
      // And holds a serialized blob with the unsaved changes.
      // Might be a better method of accessing this through the Layout
      // Builder API and layoutTempstoreRepository, but have not found it yet.
      $query = $db->select('key_value_expire', 'kve')
        ->fields('kve', ['name', 'value', 'expire'])
        ->condition('collection', 'tempstore.shared.layout_builder.section_storage.overrides', '=')
        ->condition('value', '%uiowa_banner%', 'LIKE');

      $count = $query->countQuery()->execute()->fetchField();

      \Drupal::messenger()
        ->addMessage('Tempstore records found: ' . $count);

      $results = $query
        ->execute();

      foreach ($results as $record) {
        // Unserialize and replace the section in question with our updated one.
        // Allowed classes were set to FALSE for PHPCS after the update had
        // already run.
        $stored_data = unserialize($record->value, [
          'allowed_classes' => FALSE,
        ]);

        /** @var \Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage $section_storage */
        $section_storage = $stored_data->data['section_storage'];

        // Loop through sections in the storage.
        foreach ($section_storage->getSections() as &$section) {
          // Loop through the components in the section.
          foreach ($section->getComponents() as &$component) {

            // Limit this to only the uiowa_banner block component.
            if ($component->getPluginId() !== 'inline_block:uiowa_banner') {
              continue;
            }

            // Pull the layout builder styles from the component.
            // @phpstan-ignore-next-line
            $styles = $component->get('layout_builder_styles_style');

            // Add key for new layout builder style.
            $styles[] = 'headline_large';

            // Set the layout builder styles on the component.
            // @phpstan-ignore-next-line
            $component->set('layout_builder_styles_style', $styles);
          }
        }
        $stored_data->data['section_storage'] = $section_storage;

        // Insert the updated tempstore.
        $db->update('key_value_expire')
          ->condition('name', $record->name, '=')
          ->condition('expire', $record->expire, '=')
          ->fields([
            'value' => serialize($stored_data),
          ])
          ->execute();
      }
    }
  }
}

/**
 * Rebuilding permissions after https://github.com/uiowa/uiowa/pull/3776.
 */
function sitenow_update_9013() {
  // Batch it.
  node_access_rebuild(TRUE);
}

/**
 * Redo 9009.
 */
function sitenow_update_9014() {
  sitenow_update_9009();

  // Delete remaining orphans?
  $result = \Drupal::entityQuery('block_content')
    ->condition('type', 'uiowa_people')
    ->execute();

  \Drupal::messenger()
    ->addMessage('Orphaned records found: ' . count($result));

  if ($result) {
    $storage_handler = \Drupal::entityTypeManager()->getStorage('block_content');
    $entities = $storage_handler->loadMultiple($result);
    $storage_handler->delete($entities);
  }
}

/**
 * Clear cache for lazy update and update engineering migrated files metadata.
 */
function sitenow_update_9015() {
  drupal_flush_all_caches();

  $site_path = \Drupal::getContainer()->getParameter('site.path');

  if ($site_path == 'sites/engineering.uiowa.edu') {
    $query = \Drupal::entityTypeManager()->getStorage('media')->getQuery();

    $ids = $query
      ->condition('bundle', 'image')
      ->condition('name', 'title')
      ->execute();

    if ($ids) {
      $controller = \Drupal::entityTypeManager()->getStorage('media');
      $entities = $controller->loadMultiple($ids);

      /** @var \Drupal\media\Entity\Media $media */
      foreach ($entities as $media) {
        $file = File::load($media->get('field_media_image')->target_id);

        if ($file && $filename = $file->getFilename()) {
          $no_ext = pathinfo($filename, PATHINFO_FILENAME);
          $media->field_media_image->alt = $no_ext;
          $media->setName($no_ext);
          $media->save();
        }
      }
    }
  }
}

/**
 * Uninstall node_view_permissions, import role configs, rebuild permissions.
 */
function sitenow_update_9016() {
  // Uninstall node_view_permissions module.
  \Drupal::service('module_installer')->uninstall(['node_view_permissions']);

  // Import role configs.
  $config_storage = \Drupal::service('config.storage');
  $config_path = DRUPAL_ROOT . '/../config/default';
  $source = new FileStorage($config_path);
  $config_names = $source->listAll('user.role');

  foreach ($config_names as $config_name) {
    $config = $source->read($config_name);

    if ($config) {
      $config_storage->write($config_name, $config);
    }
  }

  // Loop through filters to find all the config splits that are
  // in use.
  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();

  foreach ($filters as $filter) {
    if ($filter['status'] && isset($filter['config_name'])) {
      $config_split = $source->read($filter['config_name']);
      if (isset($config_split['folder'])) {
        $source = new FileStorage($config_split['folder']);
        // Loop through user.role.* config in the split folder and import them.
        $config_names = $source->listAll('user.role');
        foreach ($config_names as $config_name) {
          $config_storage->write($config_name, $source->read($config_name));
        }
      }
    }
  }

  // Rebuild node permissions.
  node_access_rebuild(TRUE);
}

/**
 * Activate new site splits prior to import so config remains constant.
 */
function sitenow_update_9017() {
  $splits = [
    'sites/admissions.uiowa.edu' => 'admissions.uiowa.edu',
    'sites/brand.uiowa.edu' => 'brand.uiowa.edu',
    'sites/coronavirus.uiowa.edu' => 'coronavirus.uiowa.edu',
    'sites/genetics.grad.uiowa.edu' => 'genetics.grad.uiowa.edu',
    'sites/grad.uiowa.edu' => 'grad.uiowa.edu',
    'sites/hr.uiowa.edu' => 'hr.uiowa.edu',
    'sites/icsa.uiowa.edu' => 'icsa.uiowa.edu',
    'sites/ighn.international.uiowa.edu' => 'ighn.international.uiowa.edu',
    'sites/immuno.grad.uiowa.edu' => 'immuno.grad.uiowa.edu',
    'sites/iowasuperfund.uiowa.edu' => 'iowasuperfund.uiowa.edu',
    'sites/pharmacy.uiowa.edu' => 'pharmacy.uiowa.edu',
    'sites/policy.clas.uiowa.edu' => 'policy.clas.uiowa.edu',
    'sites/presidentialsearch.uiowa.edu' => 'presidentialsearch.uiowa.edu',
    'sites/sitenow.uiowa.edu' => 'sitenow.uiowa.edu',
    'sites/sppa.uiowa.edu' => 'sppa.uiowa.edu',
    'sites/tippie.uiowa.edu' => 'tippie.uiowa.edu',
    'sites/transportation.uiowa.edu' => 'transportation.uiowa.edu',
    'sites/uiowa.edu' => 'uiowa.edu',
  ];

  $path = \Drupal::getContainer()->getParameter('site.path');

  if (isset($splits[$path])) {
    $source = new FileStorage('../config/sites/' . $splits[$path]);
    $config_storage = \Drupal::service('config.storage');
    $config_storage->write('config_split.config_split.site', $source->read('config_split.config_split.site'));
  }
}

/**
 * Add allowed replicate content entities.
 */
function sitenow_update_9020() {
  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
  $sitenow_v2_split = 'config_split:sitenow_v2';

  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uiowa_core.settings');

  // This site has the 'sitenow_v2' split in config,
  // and it is enabled.
  if (isset($filters[$sitenow_v2_split]) && $filters[$sitenow_v2_split]['status']) {
    // Don't allow for any content types to be replicated.
    $config
      ->set('uiowa_core.replicate_allowed', [])
      ->save();
  }
  else {
    // If it's not v2, then allow page and article.
    $config
      ->set('uiowa_core.replicate_allowed', ['page', 'article'])
      ->save();
  }
}

/**
 * Shut down replicate for now.
 */
function sitenow_update_9021() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uiowa_core.settings');
  $config
    ->set('uiowa_core.replicate_allowed', [])
    ->save();
}

/**
 * Re-activate replicate functionality for v3 sites.
 */
function sitenow_update_9022() {
  sitenow_update_9020();
}

/**
 * Run again for any sites that were installed without this config.
 */
function sitenow_update_9023() {
  sitenow_update_9020();
}

/**
 * Remove headline content from footer block before setting perms.
 */
function sitenow_update_9024() {
  $block = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', '0c0c1f36-3804-48b0-b384-6284eed8c67e');
  if (!empty($block->get('field_uiowa_headline')->getValue())) {
    $block->set('field_uiowa_headline', '')
      ->save();
  }
}

/**
 * Convert uiowa_articles to article_list_block.
 */
function sitenow_update_9025() {
  _update_all_blocks_by_plugin_id('inline_block:uiowa_articles', function (&$component, $block) {
    $styles = $component->get('layout_builder_styles_style');

    // Default LB styles for new block.
    $new_styles = [
      'card_media_position_right',
      'media_format_widescreen',
      'content_alignment_left',
      'card_image_medium',
      'list_format_list',
      'block_grid_threecol_33_34_33',
    ];

    if (is_array($styles)) {

      $style_update_map = [
        'block_hide_descriptions' => 'delete',
        'block_hide_details' => 'delete',
        'block_hide_images' => 'delete',
        'block_grid_twocol_50_50' => 'block_grid_threecol_33_34_33',
        'list_format_grid' => 'list_format_list',
      ];

      foreach ($styles as $style) {
        if (isset($style_update_map[$style])) {
          if ($style_update_map[$style] === 'delete') {
            continue;
          }
          if ($key = array_search($style_update_map[$style], $new_styles)) {
            $new_styles[$key] = $style;
          }
        }
      }

      $new_styles = array_unique($new_styles);
    }

    // Build out the new view block configuration.
    $config = [
      'id' => 'views_block:article_list_block-list_article',
      'label' => NULL,
      'provider' => 'views',
      'label_display' => NULL,
      'views_label' => '',
      'items_per_page' => $block->field_collection_results->value ?: 50,
      'headline' => $block->get('field_uiowa_headline')
        ->getValue()[0],
      'pager' => $block->field_collection_pager->value ? 'full' : 'some',
      'pager_offset' => 0,
      'use_more' => $block->field_collection_more->value,
      'use_more_link_url' => $block->field_collection_more_path->uri,
      'sort' => [
        'sticky' => [
          'order' => 'DESC',
          'weight' => 0,
        ],
        'created' => [
          'order' => 'DESC',
          'weight' => 0,
        ],
      ],
      'exposed_filter_values' => [
        'field_tags_target_id' => [],
      ],
      'layout_builder_styles' => $new_styles,
      'context_mapping' => [],
    ];

    // Process tags.
    if (isset($block->get('field_collection_reference')
      ->getValue()[0])) {
      foreach ($block->get('field_collection_reference')
        ->getValue()[0] as $target) {
        $config['exposed_filter_values']['field_tags_target_id'][] = ['target_id' => $target];
      }
    }

    $fields = [
      'field_image',
      'created',
      'field_article_author',
      'field_article_source_org',
      'field_article_source_link',
      'field_teaser',
    ];

    // Process field visibility settings.
    foreach ($fields as $field) {
      $hide = 0;
      if (isset($styles)) {
        switch ($field) {
          case 'field_image':
            if (in_array('block_hide_images', $styles)) {
              $hide = 1;
            }
            break;

          case 'field_teaser':
            if (in_array('block_hide_descriptions', $styles)) {
              $hide = 1;
            }
            break;

          case 'field_article_author':
          case 'field_article_source_org':
            if (in_array('block_hide_details', $styles)) {
              $hide = 1;
            }
            break;

          // Hide by default due to functionality changes.
          case 'field_article_source_link':
            $hide = 1;
            break;
        }
      }

      $config['fields'][$field]['hide'] = $hide;
    }

    // Repurpose the existing component and set new styles.
    $component->setConfiguration($config);
    $component->set('layout_builder_styles_style', $new_styles);
  });

  // Delete uiowa_articles orphans.
  $result = \Drupal::entityQuery('block_content')
    ->condition('type', 'uiowa_articles')
    ->execute();
  if ($result) {
    $storage_handler = \Drupal::entityTypeManager()->getStorage('block_content');
    $entities = $storage_handler->loadMultiple($result);
    $storage_handler->delete($entities);
  }
}

/**
 * Update views list blocks with use_more_text option.
 */
function sitenow_update_9026() {
  foreach ([
    'views_block:people_list_block-list_card',
    'views_block:article_list_block-list_article',
  ] as $block_plugin_id) {
    _update_all_blocks_by_plugin_id($block_plugin_id, function (&$component, $block) {
      $config = $component->get('configuration');
      $config['use_more_text'] = '';
      $component->setConfiguration($config);
    });
  }
}

/**
 * Clear all the caches.
 */
function sitenow_update_9027() {
  drupal_flush_all_caches();
}

/**
 * Change footer content block to minimal format.
 */
function sitenow_update_9028() {
  $format = 'minimal';
  $block = \Drupal::service('entity.repository')
    ->loadEntityByUuid('block_content', '0c0c1f36-3804-48b0-b384-6284eed8c67e');

  if ($block) {
    $block->field_uiowa_text_area->format = $format;
    $block->save();
  }
}

/**
 * Flush all caches so drupal finds uiowa_auth module.
 */
function sitenow_update_9029() {
  drupal_flush_all_caches();
}

/**
 * Flush all caches after swapping colorbox with the photoswipe module.
 */
function sitenow_update_9030() {
  drupal_flush_all_caches();
}

/**
 * Clear plugin cache for photoswipe config import.
 */
function sitenow_update_9031() {
  /** @var \Drupal\Core\Plugin\CachedDiscoveryClearerInterface $plugin_cache_clearer */
  $plugin_cache_clearer = \Drupal::service('plugin.cache_clearer');
  $plugin_cache_clearer->clearCachedDefinitions();
}

/**
 * Clear caches to regenerate image styles.
 */
function sitenow_update_9032() {
  drupal_flush_all_caches();
}

/**
 * Create new headline field for headline alignment.
 */
function sitenow_update_9033() {
  $headline_alignment = [
    'type' => 'varchar',
    'description' => 'Alignment for the heading.',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ];
  $schema = Database::getConnection()->schema();
  $schema->addField('block_content__field_uiowa_headline', 'field_uiowa_headline_headline_alignment', $headline_alignment);
  $schema->addField('block_content_revision__field_uiowa_headline', 'field_uiowa_headline_headline_alignment', $headline_alignment);
}

/**
 * Set the newly created footer.login_link theme setting to TRUE.
 */
function sitenow_update_9034() {
  $config = \Drupal::configFactory()->getEditable('uids_base.settings');

  if (!$config->get('footer.login_link')) {
    $config->set('footer.login_link', TRUE)
      ->save();
  }
}

/**
 * Clean up media revisions.
 */
function sitenow_update_9035() {
  $db = \Drupal::database();
  $entity_manager = \Drupal::service('entity_type.manager')
    ->getStorage('media');
  // Get a vid->mid mapping from the media table.
  // This table holds a one-to-one mapping of the current
  // revision for each media id, so we know the associated
  // vid is the most current revision for each given mid.
  $vid_to_mid_map = $db->select('media')
    ->fields('media', ['vid', 'mid'])
    ->execute()
    ->fetchAllKeyed();
  // Now grab all the vids from the media_revision table
  // which were not present in the media table
  // as a current revision.
  $vids = $db->select('media_revision', 'mr')
    ->fields('mr', ['vid'])
    ->condition('vid', array_keys($vid_to_mid_map), 'NOT IN')
    ->execute()
    ->fetchCol();
  // Loop through the non-current vids
  // and delete them.
  foreach ($vids as $vid) {
    $entity_manager->deleteRevision($vid);
  }
}

/**
 * Set previously unset menu item styles to vertical.
 */
function sitenow_update_9036() {
  _update_all_blocks_by_plugin_id('menu_block:main', function (&$component, $block) {
    $styles = $component->get('layout_builder_styles_style');
    if (!isset($styles['block_menu_vertical']) && !isset($styles['block_menu_horizontal'])) {
      $styles['block_menu_vertical'] = 'block_menu_vertical';
    }

    $component->set('layout_builder_styles_style', $styles);
  });
}

/**
 * Flush all caches.
 */
function sitenow_update_9037() {
  drupal_flush_all_caches();
}

/**
 * Set existing blocks with a grid columns value.
 */
function sitenow_update_9038() {
  foreach ([
    'inline_block:uiowa_articles',
    'inline_block:uiowa_events',
    'inline_block:uiowa_people',
    'inline_block:uiowa_aggregator',
    'views_block:article_list_block-list_article',
    'views_block:people_list_block-list_card',
  ] as $block_plugin_id) {

    _update_all_blocks_by_plugin_id($block_plugin_id, function (&$component, $block) {

      $styles = $component->get('layout_builder_styles_style');
      if (in_array('list_format_list', $styles)) {
        if (!array_search('block_grid_threecol_33_34_33', $styles)) {
          $styles[] = 'block_grid_threecol_33_34_33';
        }

        if ($fifty_fifty = array_search('block_grid_twocol_50_50', $styles)) {
          unset($styles[$fifty_fifty]);
        }
      }
      $component->set('layout_builder_styles_style', $styles);

    });

  }
}

/**
 * Flush all caches for dependency updates.
 */
function sitenow_update_9039() {
  drupal_flush_all_caches();
}

/**
 * Flush all caches for dependency update signature changes.
 */
function sitenow_update_9040() {
  drupal_flush_all_caches();
}

/**
 * Set existing banner blocks with a default button style value.
 */
function sitenow_update_9041() {
  // Loop through our newly updated banner blocks.
  foreach ([
    'inline_block:uiowa_banner',
  ] as $block_plugin_id) {
    _update_all_blocks_by_plugin_id($block_plugin_id, function (&$component, $block) {

      $styles = $component->get('layout_builder_styles_style');
      // We shouldn't, but check if we have a button style already set.
      // If we do, we shouldn't make any changes.
      $style_exists = FALSE;
      foreach ($styles as $style) {
        if (str_starts_with($style, 'button_')) {
          $style_exists = TRUE;
        }
      }
      // If no button style was set, then add our new
      // default style and re-set the new complete styles.
      if (!$style_exists) {
        $styles[] = 'button_primary';
        $component->set('layout_builder_styles_style', $styles);
      }

    });

  }
}
