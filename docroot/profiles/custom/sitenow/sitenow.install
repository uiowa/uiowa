<?php

/**
 * @file
 * The sitenow profile cannot contain a hook_install() implementation.
 * @see: https://www.drupal.org/project/drupal/issues/2982052
 */

use Drupal\block\Entity\Block;
use Drupal\block_content\BlockContentInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
use Drupal\Core\Entity\Sql\SqlContentEntityStorageException;
use Drupal\Core\Site\Settings;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\filter\Plugin\Filter\FilterHtmlCorrector;
use Drupal\layout_builder\InlineBlockUsage;
use Drupal\layout_builder\Section;
use Drupal\layout_builder\SectionComponent;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Update some uiowa_footer settings which are ignored.
 */
function sitenow_update_8001() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uiowa_footer.settings');

  $config
    ->set('login_link', TRUE)
    ->set('custom_menu_2', 'footer-second')
    ->save();
}

/**
 * Delete user login block for uiowa_bootstrap theme.
 */
function sitenow_update_8002() {
  /** @var \Drupal\Core\Entity\EntityStorageInterface $block_storage */
  $block_storage = \Drupal::service('entity_type.manager')->getStorage('block');

  /** @var \Drupal\block\Entity\Block[] $blocks */
  $block = $block_storage->load('uiowa_bootstrap_login');

  if ($block) {
    $block->delete();
  }
}

/**
 * Delete entities related to uievents.
 */
function sitenow_update_8003() {
  $paragraphs = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->loadByProperties(['type' => 'events']);

  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }

  $ids = Drupal::entityQuery('uievents')
    ->execute();
  if (!empty($ids)) {
    $controller = \Drupal::entityManager()->getStorage('uievents');
    $entities = $controller->loadMultiple($ids);
    $controller->delete($entities);
  }
}

/**
 * Delete config_ignore key_value entry.
 */
function sitenow_update_8004() {
  \Drupal::database()->delete('key_value')
    ->condition('collection', 'system.schema')
    ->condition('name', 'config_ignore')
    ->execute();
}

/**
 * Flush all caches so sites pick up the new theme location.
 */
function sitenow_update_8005() {
  drupal_flush_all_caches();
}

/**
 * Deleted.
 */
function sitenow_update_8006() {

}

/**
 * Update existing sites with user 1 info.
 */
function sitenow_update_8007() {
  $user = User::load(1);
  $user->setUsername(uniqid('admin_'));
  $user->setEmail(base64_decode('aXRzLXdlYkB1aW93YS5lZHU='));
  $user->addRole('administrator');
  $user->save();
}

/**
 * Flush all caches so sites pick asset location changes.
 */
function sitenow_update_8008() {
  drupal_flush_all_caches();
}

/**
 * Update sitenow_seo schema version to match uiowa_seo.
 */
function sitenow_update_8009() {
  $schema = Drupal::keyValue('system.schema')->get('uiowa_seo');
  Drupal::keyValue('system.schema')->delete('uiowa_seo');
  Drupal::keyValue('system.schema')->set('sitenow_seo', $schema);
  drupal_flush_all_caches();
}

/**
 * Import config_ignore and split settings so GA is handled correctly.
 */
function sitenow_update_8010() {
  $config_path = DRUPAL_ROOT . '/profiles/custom/sitenow/config/sync/';
  $source = new FileStorage($config_path);

  $config_storage = \Drupal::service('config.storage');
  $config_storage->write('config_ignore.settings', $source->read('config_ignore.settings'));
  $config_storage->write('config_split.config_split.prod', $source->read('config_split.config_split.prod'));
  $config_storage->write('config_split.config_split.stage', $source->read('config_split.config_split.stage'));
  $config_storage->write('config_split.config_split.dev', $source->read('config_split.config_split.dev'));
}

/**
 * Deleted.
 */
function sitenow_update_8011() {

}

/**
 * Update acquia_connector settings.
 */
function sitenow_update_8012() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('acquia_connector.settings');

  if (empty($config->get())) {
    $config_path = DRUPAL_ROOT . '/profiles/custom/sitenow/config/sync/';
    $source = new FileStorage($config_path);

    $config_storage = \Drupal::service('config.storage');
    $config_storage->write('acquia_connector.settings', $source->read('acquia_connector.settings'));
  }
  else {
    $config
      ->set('cron_interval', 180)
      ->set('hide_signup_messages', 1)
      ->save();
  }
}

/**
 * Clear all caches for uiowa_auth legacy redirects to take effect.
 */
function sitenow_update_8013() {
  drupal_flush_all_caches();
}

/**
 * Move all tags values to field_tags.
 */
function sitenow_update_8014(&$sandbox) {
  // Process all nodes that have a filled field_reference.
  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('node')
      ->condition('field_reference', NULL, 'IS NOT NULL')
      ->execute();
    $sandbox['total'] = count($query);
    $sandbox['current'] = 0;
    $sandbox['query'] = $query;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Loop through the same nodes in batches.
  $nodes_per_batch = 25;
  $batch = array_slice($sandbox['query'], $sandbox['current'], $sandbox['current'] + $nodes_per_batch);
  if (empty($batch)) {
    $sandbox['#finished'] = 1;
    return;
  }

  foreach ($batch as $nid) {
    $node = Node::load($nid);
    // Get and load taxonomy values from field_reference.
    $terms = $node->get('field_reference')->getValue();
    $tags = [];
    $other_terms = [];
    foreach ($terms as $tid) {
      $term = Term::load($tid['target_id']);
      $bundle = $term->bundle();
      // Split values into tags and others.
      if ($bundle == 'tags') {
        $tags[] = $tid['target_id'];
      }
      else {
        $other_terms[] = $tid['target_id'];
      }
    }
    // Only save if something is changing.
    if (!empty($tags)) {
      // Save field_reference with any remaining terms.
      $node->set('field_reference', $other_terms);
      // Move the tags to field_tags.
      $node->set('field_tags', $tags);
      // Set revision message and save.
      $node->setRevisionLogMessage('Automated Save: Moved terms.');
      $node->save();
    }
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' nodes processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Re-save all person nodes.
 */
function sitenow_update_8015(&$sandbox) {
  // Process all nodes that have a filled person.
  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'person')
      ->execute();
    $sandbox['total'] = count($query);
    $sandbox['current'] = 0;
    $sandbox['query'] = $query;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Loop through the same nodes in batches.
  $nodes_per_batch = 25;
  $batch = array_slice($sandbox['query'], $sandbox['current'], $sandbox['current'] + $nodes_per_batch);
  if (empty($batch)) {
    $sandbox['#finished'] = 1;
    return;
  }

  foreach ($batch as $nid) {
    $node = Node::load($nid);
    if (is_null($node->get('field_person_hide')->value)) {
      $node->set('field_person_hide', FALSE);
      // Set revision message and save.
      $node->setRevisionLogMessage('Automated save');
      $node->save();
    }
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' nodes processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Remove administrator role from existing user 1 account.
 */
function sitenow_update_8016() {
  /** @var \Drupal\user\UserInterface $user */
  $user = User::load(1);
  $user->removeRole('administrator');
  $user->save();
}

/**
 * Add default version of contact info block to every site.
 */
function sitenow_update_8017() {
  if (NULL === $block = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', '0c0c1f36-3804-48b0-b384-6284eed8c67e')) {
    $block_value = <<<EOD
<p>Iowa City, Iowa 52242<br />
<a href="tel:319-335-3500"><span class="fas fa-phone"></span> 319-335-3500</a></p>
EOD;
    $block = \Drupal::entityTypeManager()
      ->getStorage('block_content')
      ->create([
        'type' => 'uiowa_text_area',
        'uuid' => '0c0c1f36-3804-48b0-b384-6284eed8c67e',
        'info' => [
          'value' => 'Footer Contact Info',
          'lang' => 'en',
        ],
        'field_uiowa_text_area' => [
          'value' => $block_value,
          'format' => 'filtered_html',
          'processed' => '<p>Iowa City, Iowa 52242<br /><a href="tel:319-335-3500"><span class="fas fa-phone"></span> 319-335-3500</a></p>',
        ],
      ]);

    $block->save();
  }
}

/**
 * Force regeneration of twig cache.
 */
function sitenow_update_8018() {
  /** @var \Drupal\Core\Theme\ActiveTheme $active_theme */
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme();

  // Limit to just sites running uids_base.
  if ($active_theme->getName() === 'uids_base') {
    \Drupal::service('twig')->invalidate();
  }
}

/**
 * Update several fields from plain text to formatted minimal text.
 */
function sitenow_update_8019() {

  // Statically defining our fields to be updated. More can be added here.
  $fields = [
    'field_uiowa_banner_excerpt' => [
      'format_col' => 'field_uiowa_banner_excerpt_format',
    ],
    'field_uiowa_card_excerpt' => [
      'format_col' => 'field_uiowa_card_excerpt_format',
    ],
  ];
  // Get the field and revision storage table names for each field.
  $table_mapping = \Drupal::service('entity_type.manager')
    ->getStorage('block_content')
    ->getTableMapping();
  $storage_definitions = \Drupal::service('entity_field.manager')
    ->getActiveFieldStorageDefinitions('block_content');
  foreach ($fields as $field_name => &$field) {
    $field_definition = $storage_definitions[$field_name];
    if ($field_definition) {
      $field['table'] = $table_mapping->getDedicatedDataTableName($field_definition);
      $field['revision_table'] = $table_mapping->getDedicatedRevisionTableName($field_definition);
    }
  }

  $database = \Drupal::database();

  foreach ($fields as $field_name => &$field) {
    $table = $field['table'];
    $revision_table = $field['revision_table'];
    $entity_type = 'block_content';

    $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);
    if (is_null($field_storage)) {
      continue;
    }

    // Fetch data currently stored in the field and save for later.
    $rows = NULL;
    $revision_rows = NULL;
    if ($database->schema()->tableExists($table)) {
      $rows = $database
        ->select($table, 't')
        ->fields('t')
        ->execute()
        ->fetchAll();
      if ($database->schema()->tableExists($revision_table)) {
        $revision_rows = $database
          ->select($revision_table, 'r')
          ->fields('r')
          ->execute()
          ->fetchAll();
      }
    }

    $new_fields = [];
    $weights = [];
    foreach ($field_storage->getBundles() as $bundle => $label) {
      $old_field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
      $new_field = $old_field->toArray();
      $new_field['field_type'] = 'text_long';
      $new_field['settings'] = [];
      $new_fields[] = $new_field;
      // Get the view display weights so we can re-set them later.
      $entity_view = $entity_type . '.' . $bundle . '.default';
      $view_display = \Drupal::entityTypeManager()
        ->getStorage('entity_view_display')
        ->load($entity_view)
        ->getComponent($field_name);
      $weights['entity_view_display'][$entity_view] = $view_display['weight'];
      // Get the form display weights so we can re-set them later.
      $form_display = \Drupal::entityTypeManager()
        ->getStorage('entity_form_display')
        ->load($entity_type . '.' . $bundle . '.default')
        ->getComponent($field_name);
      $weights['entity_form_display'][$entity_type . '.' . $bundle . '.default'] = $form_display['weight'];
    }

    // Store the old field settings and update to text_long.
    $new_field_storage = $field_storage->toArray();
    $new_field_storage['type'] = 'text_long';
    $new_field_storage['settings'] = [];
    // Deleting at the field_storage level takes care of the bundles as well.
    $field_storage->delete();

    // Purge in order for new field to be created after deleting the old.
    field_purge_batch(100);

    // Save our new, updated field storage.
    $new_field_storage = FieldStorageConfig::create($new_field_storage);
    $new_field_storage->save();

    // Create our new fields to match the field storages.
    foreach ($new_fields as $new_field) {
      $new_field_config = FieldConfig::create($new_field);
      $new_field_config->save();
    }

    // Replace into the new fields data we saved from the old fields.
    if (!is_null($rows)) {
      foreach ($rows as $row) {
        $row = (array) $row;
        $row[$field['format_col']] = 'minimal';
        $database
          ->insert($table)
          ->fields($row)
          ->execute();
      }
    }
    if (!is_null($revision_rows)) {
      foreach ($revision_rows as $row) {
        $row = (array) $row;
        $row[$field['format_col']] = 'minimal';
        $database
          ->insert($revision_table)
          ->fields($row)
          ->execute();
      }
    }

    // Update the view and form display weights, which enables the new fields.
    foreach ($weights as $display_mode => $view_modes) {
      foreach ($view_modes as $view_mode => $weight) {
        if ($weight) {
          \Drupal::entityTypeManager()
            ->getStorage($display_mode)
            ->load($view_mode)
            ->setComponent($field_name, [
              'weight' => $weight,
            ])
            ->save();
        }
      }
    }
  }
}

/**
 * Set new theme setting.
 */
function sitenow_update_8020() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uids_base.settings');
  $config->set('header.top_links_limit', 2);
  $config->save();
}

/**
 * Move SiteNow footer menus to the UIDS footer naming scheme.
 */
function sitenow_update_8021() {
  \Drupal::state()->set('system.maintenance_mode', TRUE);

  $linkController = \Drupal::entityTypeManager()->getStorage('menu_link_content');

  $primaryMids = \Drupal::entityQuery('menu_link_content')
    ->condition('menu_name', 'footer')
    ->execute();

  $secondaryMids = \Drupal::entityQuery('menu_link_content')
    ->condition('menu_name', 'footer-second')
    ->execute();

  $menuMids = [
    'footer-primary' => $primaryMids,
    'footer-secondary' => $secondaryMids,
  ];

  foreach ($menuMids as $menuName => $mids) {
    $linkEntities = $linkController->loadMultiple($mids);
    foreach ($linkEntities as $link) {
      $link->set('menu_name', $menuName);
      $link->save();
    }
  }

  // Delete old menus.
  $menuController = \Drupal::entityTypeManager()->getStorage('menu');
  $toDelete = ['footer', 'footer-second'];
  $oldMenus = $menuController->loadMultiple($toDelete);
  $menuController->delete($oldMenus);

  // Update footer menu config settings.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uiowa_footer.settings');

  $config
    ->set('custom_menu', 'footer-primary')
    ->set('custom_menu_2', 'footer-secondary')
    ->save();

  // Update footer menu access perms.
  $config = $config_factory->getEditable('user.role.webmaster');
  $perms = $config->get('permissions');

  $permUpdates = [
    'administer footer menu items' => 'administer footer-primary menu items',
    'administer footer-second menu items' => 'administer footer-secondary menu items',
  ];

  foreach ($permUpdates as $oldPerm => $newPerm) {
    if (($index = array_search($oldPerm, $perms))) {
      $perms[$index] = $newPerm;
    }
  }

  $config
    ->set('permissions', $perms)
    ->save();

  // Update basic page available menus.
  $config = $config_factory->getEditable('node.type.page');
  $menus = $config->get('third_party_settings.menu_ui.available_menus');
  $menuUpdates = [
    'footer' => 'footer-primary',
    'footer-second' => 'footer-secondary',
  ];

  foreach ($menuUpdates as $oldMenu => $newMenu) {
    if (($index = array_search($oldMenu, $menus))) {
      $menus[$index] = $newMenu;
    }
  }

  $config
    ->set('third_party_settings.menu_ui.available_menus', $menus)
    ->save();

  // Remove footer and footer-second from breadcrumb config.
  $config = $config_factory->getEditable('menu_breadcrumb.settings');

  $config
    ->clear('menu_breadcrumb_menus.footer')
    ->clear('menu_breadcrumb_menus.footer-second')
    ->save();

  // Update tours links to footer-primary and footer-secondary.
  $config = $config_factory->getEditable('tour.tour.menus');

  $footerTip = '<p>Depending on your role within the site, there are currently four available menus for this site:' .
    '</p><p><a href="/admin/structure/menu/manage/main?tour" class="button button--primary">Main Navigation</a></p>' .
    '<p><a href="/admin/structure/menu/manage/social?tour" class="button button--primary">Social Media</a></p>' .
    '<p><a href="/admin/structure/menu/manage/footer-primary?tour" class="button button--primary">Footer Primary</a></p>' .
    '<p><a href="/admin/structure/menu/manage/footer-secondary?tour" class="button button--primary">Footer Secondary</a></p>';

  $config
    ->set('tips.menus.body', $footerTip)
    ->save();

  $config = $config_factory->getEditable('tour.tour.site-settings');

  $footerLinkText = '<p>The footer region also provides three separate menus for social media links' .
    ' and for other custom footer links. You can add/manage links for those by clicking one of the following:' .
    ' <a href="/admin/structure/menu/manage/social?tour">Social Media</a>,' .
    ' <a href="/admin/structure/menu/manage/footer-primary?tour">Footer Primary</a>,' .
    ' <a href="/admin/structure/menu/manage/footer-secondary?tour">Footer Secondary</a></p>';

  $config
    ->set('tips.footer-links.body', $footerLinkText)
    ->save();

  \Drupal::state()->set('system.maintenance_mode', FALSE);
}

/**
 * Migrate image_background to image and set image styles.
 */
function sitenow_update_8022() {
  $database = \Drupal::database();
  $image_background_mids = $database->select('media', 'm')
    ->fields('m', ['mid'])
    ->condition('bundle', 'image_background', '=')
    ->execute()
    ->fetchCol();
  if ($image_background_mids) {
    $media_manager = \Drupal::entityTypeManager()
      ->getStorage('media');
    $from_field = 'field_media_image_1';
    $to_field = 'field_media_image';
    $table_prefixes = [
      'media__',
      'media_revision__',
    ];
    foreach ($table_prefixes as $prefix) {
      $from_table = $prefix . $from_field;
      $to_table = $prefix . $to_field;
      if ($database->schema()->tableExists($from_table)) {
        $rows = $database
          ->select($from_table, 't')
          ->fields('t')
          ->execute()
          ->fetchAll();
      }
      $column_suffixes = [
        '_target_id', '_alt', '_title', '_width', '_height',
      ];
      if (!is_null($rows)) {
        foreach ($rows as $row) {
          $row = (array) $row;
          $row['bundle'] = 'image';
          foreach ($column_suffixes as $suffix) {
            $row[$to_field . $suffix] = $row[$from_field . $suffix];
            unset($row[$from_field . $suffix]);
          }
          $database
            ->insert($to_table)
            ->fields($row)
            ->execute();
        }
      }
    }
    foreach ($image_background_mids as $mid) {
      $media = $media_manager->load($mid);
      $media_array = $media->toArray();
      $media_array['bundle'] = 'image';
      $media_array[$to_field] = $media_array[$from_field];
      unset($media_array[$from_field]);
      $media->delete();
      $media_manager->create($media_array)
        ->save();
    }
  }
  // Set the section config to use image and not image_background.
  $section_config = \Drupal::configFactory()
    ->getEditable('field.field.paragraph.section.field_section_image');
  $section_config
    ->set('settings.handler_settings.target_bundles', [
      'image' => 'image',
    ])
    ->save();
}

/**
 * Prepare uiowa_bootstrap sites with default theme settings for uids_base.
 */
function sitenow_update_8023() {
  $linkController = \Drupal::entityTypeManager()->getStorage('menu_link_content');
  $primaryMids = \Drupal::entityQuery('menu_link_content')
    ->condition('menu_name', 'footer')
    ->execute();
  $secondaryMids = \Drupal::entityQuery('menu_link_content')
    ->condition('menu_name', 'footer-second')
    ->execute();

  $menuMids = [
    'footer-primary' => $primaryMids,
    'footer-secondary' => $secondaryMids,
  ];

  foreach ($menuMids as $menuName => $mids) {
    $linkEntities = $linkController->loadMultiple($mids);
    foreach ($linkEntities as $link) {
      $link->set('menu_name', $menuName);
      $link->save();
    }
  }

  // Delete old menus.
  $menuController = \Drupal::entityTypeManager()->getStorage('menu');
  $toDelete = ['footer', 'footer-second'];
  $oldMenus = $menuController->loadMultiple($toDelete);
  $menuController->delete($oldMenus);

  // Update footer menu config settings.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uiowa_footer.settings');
  $config
    ->set('custom_menu', 'footer-primary')
    ->set('custom_menu_2', 'footer-secondary')
    ->save();

  // Update footer menu access perms.
  $config = $config_factory->getEditable('user.role.webmaster');
  $perms = $config->get('permissions');
  $permUpdates = [
    'administer footer menu items' => 'administer footer-primary menu items',
    'administer footer-second menu items' => 'administer footer-secondary menu items',
  ];
  foreach ($permUpdates as $oldPerm => $newPerm) {
    if (($index = array_search($oldPerm, $perms))) {
      $perms[$index] = $newPerm;
    }
  }
  $config
    ->set('permissions', $perms)
    ->save();

  // Update basic page available menus.
  $config = $config_factory->getEditable('node.type.page');
  $menus = $config->get('third_party_settings.menu_ui.available_menus');
  $menuUpdates = [
    'footer' => 'footer-primary',
    'footer-second' => 'footer-secondary',
  ];
  foreach ($menuUpdates as $oldMenu => $newMenu) {
    if (($index = array_search($oldMenu, $menus))) {
      $menus[$index] = $newMenu;
    }
  }
  $config
    ->set('third_party_settings.menu_ui.available_menus', $menus)
    ->save();

  // Remove footer and footer-second from breadcrumb config.
  $config = $config_factory->getEditable('menu_breadcrumb.settings');
  $config
    ->clear('menu_breadcrumb_menus.footer')
    ->clear('menu_breadcrumb_menus.footer-second')
    ->save();

  // Update tours links to footer-primary and footer-secondary.
  $config = $config_factory->getEditable('tour.tour.menus');
  $footerTip = '<p>Depending on your role within the site, there are currently four available menus for this site:' .
    '</p><p><a href="/admin/structure/menu/manage/main?tour" class="button button--primary">Main Navigation</a></p>' .
    '<p><a href="/admin/structure/menu/manage/social?tour" class="button button--primary">Social Media</a></p>' .
    '<p><a href="/admin/structure/menu/manage/footer-primary?tour" class="button button--primary">Footer Primary</a></p>' .
    '<p><a href="/admin/structure/menu/manage/footer-secondary?tour" class="button button--primary">Footer Secondary</a></p>';
  $config
    ->set('tips.menus.body', $footerTip)
    ->save();
  $config = $config_factory->getEditable('tour.tour.site-settings');
  $footerLinkText = '<p>The footer region also provides three separate menus for social media links' .
    ' and for other custom footer links. You can add/manage links for those by clicking one of the following:' .
    ' <a href="/admin/structure/menu/manage/social?tour">Social Media</a>,' .
    ' <a href="/admin/structure/menu/manage/footer-primary?tour">Footer Primary</a>,' .
    ' <a href="/admin/structure/menu/manage/footer-secondary?tour">Footer Secondary</a></p>';
  $config
    ->set('tips.footer-links.body', $footerLinkText)
    ->save();
}

/**
 * Prepare uiowa_bootstrap sites with a horizontal nav default in uids_base.
 */
function sitenow_update_8024() {
  /** @var \Drupal\Core\Theme\ActiveTheme $active_theme */
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme();

  // Limit to just sites running uids_base.
  if ($active_theme->getName() === 'uiowa_bootstrap') {
    $nav_style = 'horizontal';

    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('uids_base.settings');

    $site_path = \Drupal::service('site.path');

    if ($site_path == 'sites/coronavirus.uiowa.edu') {
      $config->set('header.type', 'inline');
    }
    else {
      $config->set('header.type', 'below');
    }

    $config->set('header.nav_style', $nav_style);
    $config->save();

    $ids = \Drupal::entityQuery('block')
      ->condition('plugin', 'superfish:main')
      ->execute();

    foreach ($ids as $id) {
      // Skip 'mainnavigation' block.
      if (strpos($id, 'superfish') === FALSE) {
        continue;
      }
      $status = 0;
      $block = Block::load($id);
      if (strpos($id, $nav_style) !== FALSE) {
        $status = 1;
      }
      if ($block->status() != $status) {
        $block->setStatus($status);
        $block->save();
      }
    }
  }
}

/**
 * Import alert settings if they do not already exist since they are ignored.
 */
function sitenow_update_8025() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uiowa_alerts.settings');

  if (empty($config->get())) {
    $config_path = DRUPAL_ROOT . '/../config/default';
    $source = new FileStorage($config_path);

    $config_storage = \Drupal::service('config.storage');
    $config_storage->write('uiowa_alerts.settings', $source->read('uiowa_alerts.settings'));
  }
}

/**
 * Move quick links into top links to prepare for uids_base.
 */
function sitenow_update_8026() {
  $config = \Drupal::configFactory()
    ->get('uiowa_bar.settings');
  $links = [
    'link_1' => [
      'title' => $config->get('uiowa_bar.link_1_title'),
      'url' => $config->get('uiowa_bar.link_1_url'),
    ],
    'link_2' => [
      'title' => $config->get('uiowa_bar.link_2_title'),
      'url' => $config->get('uiowa_bar.link_2_url'),
    ],
  ];

  foreach ($links as $link) {
    if ($link['title'] && $link['url']) {
      MenuLinkContent::create([
        'title' => $link['title'],
        'link' => ['uri' => $link['url']],
        'menu_name' => 'top-links',
        'status' => TRUE,
      ])
        ->save();
    }
  }
}

/**
 * Move Additional Info content into a new footer block for uids_base.
 */
function sitenow_update_8027() {
  $config = \Drupal::configFactory()
    ->get('uiowa_footer.settings');
  $title = $config->get('additional_info.title');
  $content = $config->get('additional_info.content');
  $site_title = \Drupal::configFactory()
    ->get('system.site')
    ->get('name');
  // If there is a title, check that it isn't just the site name repeated.
  if ($title && $title != $site_title) {
    $content['value'] = '<h2>' . $title . '</h2>' . $content['value'];
  }
  // Only update if there is new content.
  if ($content) {
    $text = $content['value'];
    // Check/remove lone instances of the site title to avoid repetition.
    $text = preg_replace("@(<[^<]+>)(" . preg_quote($site_title, '@') . ")((<\/.*?>)|(<br />))@",
      '',
      $text);
    // Check for a nonlinked phone number, and add additional formatting.
    $text = preg_replace("|(?<!tel:) ?([0-9]{3}-[0-9]{3}-[0-9]{4})(?!<\/a>)|i",
      '<p><a href="tel:$1"><span class="fas fa-phone"></span>$1</a></p>',
      $text);
    $text = FilterHtmlCorrector::process($text, 'en')
      ->getProcessedText();
    // Add styling class for any <h#> tags which do not have any class.
    $text = preg_replace("|(<h[0-9])>|", '$1 class="footer__site--name">', $text);
    $content['value'] = $text;
    $block = \Drupal::service('entity.repository')
      ->loadEntityByUuid('block_content', '0c0c1f36-3804-48b0-b384-6284eed8c67e');
    $block->set('field_uiowa_text_area', $content)
      ->save();
  }
}

/**
 * Create brand lockup media entity.
 */
function sitenow_update_8028() {
  $config = \Drupal::configFactory()
    ->get('uiowa_footer.settings');
  $lockup_fids = $config->get('lockup.fid');
  $lockup_alt = $config->get('lockup.alt');
  // Lockup IDs are stored in an array format; alts are not.
  foreach ($lockup_fids as $fid) {
    $file = \Drupal::entityTypeManager()
      ->getStorage('file')
      ->load($fid);
    if ($file) {
      // Updated date of 2000/01/01 00:00:00.
      $old_date = 946684800;
      // Grab the filename minus extension for the title.
      $title = explode('.', $file->getFilename())[0];
      // Create a media entity, date it to appear at end of media list.
      $media = \Drupal::entityTypeManager()
        ->getStorage('media')
        ->create([
          'bundle' => 'image',
          'field_media_image' => [
            'target_id' => $fid,
            'alt' => $lockup_alt,
            'title' => $title,
          ],
          'created' => $old_date,
          'changed' => $old_date,
          'langcode' => 'en',
          'uid' => 1,
        ]);
      $media->setName($title);
      $media->save();
    }
  }
}

/**
 * Prepare to remove uiowa_footer module.
 */
function sitenow_update_8029() {
  $site_path = \Drupal::service('site.path');

  if ($site_path != 'sites/hr.uiowa.edu') {
    \Drupal::configFactory()
      ->getEditable('system.theme')
      ->set('default', 'uids_base')
      ->save();

    \Drupal::configFactory()
      ->getEditable('uiowa_footer.settings')
      ->delete();

    $config_path = DRUPAL_ROOT . '/../config/default';
    $source = new FileStorage($config_path);

    $config_storage = \Drupal::service('config.storage');
    $config_storage->write('responsive_image.styles.sitenow_16_9', $source->read('responsive_image.styles.sitenow_16_9'));
    $config_storage->write('responsive_image.styles.ui_edgy_no_crop', $source->read('responsive_image.styles.ui_edgy_no_crop'));

  }
}

/**
 * Roll back contact block revision on collegiate sites.
 */
function sitenow_update_8030() {
  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
  $collegiate_split = 'config_split:collegiate';
  // This site has the 'collegiate' split enabled.
  if (isset($filters[$collegiate_split]) && $filters[$collegiate_split]['status']) {
    $block = \Drupal::service('entity.repository')
      ->loadEntityByUuid('block_content', '0c0c1f36-3804-48b0-b384-6284eed8c67e');
    // Check that there aren't filled-in content fields.
    if (empty($block->get('field_uiowa_text_area')->getValue())) {
      $id = $block->get('id')->getValue()[0]['value'];
      $database = \Drupal::database();
      // Get the last revision. AddInfo migrate didn't create a revision id.
      $rev_id = $database->select('block_content_revision__field_uiowa_text_area', 'r')
        ->fields('r', ['revision_id'])
        ->condition('entity_id', $id, '=')
        ->orderBy('revision_id', 'DESC')
        ->range(0, 1)
        ->execute()
        ->fetchCol()[0];
      if ($rev_id) {
        // Set last revision as the new default and save.
        $reverted_block = \Drupal::entityTypeManager()->getStorage('block_content')->loadRevision($rev_id);
        $reverted_block->isDefaultRevision(TRUE);
        $reverted_block->save();
        $block->isDefaultRevision(FALSE);
        $block->save();
      }
    }
  }
}

/**
 * Transition existing sites to 'sitenow_v2' split.
 *
 * Update to add the 'sitenow_v2' split to all sites that
 * currently don't have the 'collegiate' split enabled.
 * Also removes all Paragraph entity instances from sites
 * that have the 'collegiate' split enabled.
 */
function sitenow_update_8031() {

  // @todo Possibly add checks for sites who have not updated
  //   content since the site was provisioned.
  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
  $collegiate_split = 'config_split:collegiate';

  // This site has the 'collegiate' split enabled.
  if (isset($filters[$collegiate_split]) && $filters[$collegiate_split]['status']) {
    // Delete all paragraph instances to allow related config to be deleted.
    $ids = \Drupal::entityQuery('paragraph')->execute();
    foreach ($ids as $id) {
      $paragraph = Paragraph::load($id);
      if ($paragraph instanceof ParagraphInterface) {
        $paragraph->delete();
      }
    }
  }
  else {
    // This site does not have the 'collegiate' split enabled.
    $config_path = DRUPAL_ROOT . '/../config/default';
    $source = new FileStorage($config_path);

    // Create the split in active config and import config_ignore settings
    // otherwise the status will be imported as false (and everything will be
    // deleted on cim) since that is what exists in the default split config.
    $config_storage = \Drupal::service('config.storage');
    $config_storage->write('config_split.config_split.sitenow_v2', $source->read('config_split.config_split.sitenow_v2'));
    $config_storage->write('config_ignore.settings', $source->read('config_ignore.settings'));

    // Enable the 'sitenow_v2' split.
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('config_split.config_split.sitenow_v2');
    $config->set('status', TRUE);
    $config->save(TRUE);
  }

  // Activating/deactivating splits sometimes requires a cache rebuild.
  drupal_flush_all_caches();
}

/**
 * Move all managed unused files to temporary status.
 */
function sitenow_update_8032() {
  $query_force_temp_on_unused_managed_files = "
  UPDATE
    {file_managed} AS b1,
    (
      SELECT
        DISTINCT {file_managed}.fid AS file_managed_fid
      FROM
        {file_managed}
      LEFT JOIN
        {file_usage} file_usage_file_managed
        ON {file_managed}.fid = {file_usage_file_managed}.fid
      GROUP BY
        {file_managed}.fid
      HAVING
        (COUNT(file_usage_file_managed.count) = 0)
    ) AS b2
  SET
    b1.status = 0
  WHERE
    b1.fid = b2.file_managed_fid;";

  $database = \Drupal::database();
  $query = $database->query($query_force_temp_on_unused_managed_files);

  // Attempt to execute query, throw error if it failed.
  if ($query->execute()) {
    return t('Successfully flagged all file entities with no value in table file_usage for removal after 6 hours on cron run.');
  }
  else {
    throw new UpdateException('Query failed to execute.');
  }
}

/**
 * Update legacy banners to use new default styles.
 */
function sitenow_update_8033() {
  $connection = Database::getConnection();

  // Grab nids and section deltas for existing banners.
  $query = $connection->select('node__layout_builder__layout', 'n');
  $query->fields('n', ['entity_id', 'delta'])
    ->condition('layout_builder__layout_section', '%uiowa_banner%', 'LIKE');
  $results = $query->execute();

  // Node storage controller.
  $node_storage = \Drupal::service('entity_type.manager')
    ->getStorage('node');

  foreach ($results as $record) {
    $updated = FALSE;
    $nid = $record->entity_id;
    $section_delta = $record->delta;

    // Grab the referenced node, its layout, and the section.
    $node = $node_storage->load($nid);
    $layout = $node->get('layout_builder__layout');
    $section = $layout->get($section_delta)->getValue()['section'];

    // Get components and section array for later.
    $components = $section->getComponents();
    $section_arr = $section->toArray();

    foreach ($components as $component) {
      $component_arr = $component->toArray();
      // Check that it is a banner.
      if ($component_arr['configuration']['id'] === 'inline_block:uiowa_banner') {
        $updated = TRUE;
        // Set the default styles.
        $component_arr['additional']['layout_builder_styles_style'] = [
          'image',
          'banner_centered_left',
          'banner_medium',
          'headline_bold_serif',
        ];

        // Replace the component in the section.
        $section_arr['components'][$component_arr['uuid']] = $component_arr;
      }
    }

    // Replace with updated section, and save the node.
    if ($updated) {
      $layout_arr = $layout->getSections();
      $layout_arr[$section_delta] = Section::fromArray($section_arr);
      $node->set('layout_builder__layout', $layout_arr)
        ->save();
    }
  }
}

/**
 * Create banner blocks out of existing hero blocks.
 */
function sitenow_update_8034() {
  $connection = Database::getConnection();

  // Grab nids and section deltas for all nodes w/hero.
  $query = $connection->select('node__layout_builder__layout', 'n');
  $query->fields('n', ['entity_id', 'delta'])
    ->condition('layout_builder__layout_section', '%uiowa_hero%', 'LIKE');
  $results = $query->execute();

  // Create some controllers for later.
  $block_storage = \Drupal::service('entity_type.manager')
    ->getStorage('block_content');
  $node_storage = \Drupal::service('entity_type.manager')
    ->getStorage('node');
  $database = \Drupal::database();
  $use_controller = new InlineBlockUsage($database);

  // UUIDs of two homepage hero components not to be updated.
  $no_updates = [
    'fe6bc0f1-7fcd-4802-922e-08c60eff58c6',
    'a3f324a0-53ea-4336-9f68-224f358a74fd',
  ];
  // @todo Batch the work.
  foreach ($results as $record) {
    $nid = $record->entity_id;
    $section_delta = $record->delta;

    // Grab the referenced node, its layout, and the section.
    $node = $node_storage->load($nid);
    $layout = $node->get('layout_builder__layout');
    $section = $layout->get($section_delta)->getValue()['section'];

    // Should be only one, but iterate in case there are more.
    // Also easier to grab this way without knowing the comp uuid.
    $components = $section->getComponents();
    foreach ($components as $component) {
      $component_arr = $component->toArray();
      // Check that it's a hero, and not in our no-update list.
      if (!in_array($component_arr['uuid'], $no_updates) &&
        $component_arr['configuration']['id'] === 'inline_block:uiowa_hero') {

        // Load the currently associated hero block revision.
        $rev_id = $component_arr['configuration']['block_revision_id'];
        $hero_block = $block_storage->loadRevision($rev_id);

        // Continue only if there is no video associated w/the block.
        if ($hero_block->get('field_uiowa_hero_video')->isEmpty()) {
          // Remove the old component by its uuid.
          $section->removeComponent($component_arr['uuid']);

          // Grab field values relavent to the new banner.
          $excerpt = $hero_block->get('field_uiowa_hero_excerpt')->getValue()[0];
          $image = $hero_block->get('field_uiowa_hero_image')->getValue()[0];
          $title = $hero_block->get('field_uiowa_hero_title')->getValue()[0];
          $link = NULL;

          // Grab and process component styles.
          $comp_styles = $component_arr['additional']['layout_builder_styles_style'];
          // Set the desired default styles, and override if necessary.
          $new_styles = [
            'image',
            'banner_centered',
            'banner_medium',
            'headline_bold_serif',
          ];
          // Can add to this if more style transfers are needed.
          foreach ($comp_styles as $style) {
            switch ($style) {
              // Replace default centered with left aligned.
              case 'block_style_hero_left_aligned':
                $new_styles[1] = 'banner_lower_left';
                break;

            }
          }

          // Hero allowed for filtered_html text format.
          // Banner only allows up to minimal. Change if needed.
          $excerpt['format'] = ($excerpt['format'] === 'filtered_html') ?
            'minimal' : $excerpt['format'];

          // Check if a link is present, and extract info.
          // (Content)(Full link content (HREF))(Other content).
          // Assumes only one button or link is present.
          // Any more links will remain in the body.
          if (preg_match('|(.*?)(<a.*?href="(.*?)".*?>(.*?)<\/a>)(.*)|is', $excerpt['value'], $matches)) {
            // Attach the bookended content into a single value.
            $excerpt['value'] = $matches[1] . $matches[5];
            // Set URI based on link being absolute or relative.
            $uri = (substr($matches[3], 0, 4) === 'http') ?
              $matches[3] : \Drupal::request()->getSchemeAndHttpHost() . $matches[3];
            // Construct an appropriate link field.
            $link = [
              'uri' => $uri,
              'title' => strip_tags($matches[4]),
              'options' => [],
            ];
          }

          // Create banner block.
          $banner_block = $block_storage->create([
            'type' => 'uiowa_banner',
            'info' => 'Banner',
            'langcode' => 'en',
            'status' => TRUE,
            'reusable' => FALSE,
            'default_langcode' => TRUE,
            'field_uiowa_banner_excerpt' => $excerpt,
            'field_uiowa_banner_image' => $image,
            'field_uiowa_banner_link' => $link,
            'field_uiowa_banner_title' => $title,
          ]);

          // Check that the block saves, grab its uuid, and create config array.
          if (isset($banner_block) && $banner_block->save()) {
            $config = [
              'id' => 'inline_block:uiowa_banner',
              'label' => 'Banner',
              'provider' => 'layout_builder',
              'label_display' => NULL,
              'block_revision_id' => $banner_block->getRevisionId(),
              'view_mode' => 'full',
              'block_serialized' => NULL,
              'context_mapping' => [],
            ];
          }

          // Create a new component, set styles, and append to section.
          $new_component = new SectionComponent($node->uuid(), 'content', $config);
          $new_component->set('layout_builder_styles_style', $new_styles);
          $section->appendComponent($new_component);

          // Update the inline block entity usage to the node.
          $use_controller->addUsage($banner_block->id(), $node);
        }
      }
    }

    // Replace the old section with our newly created one.
    $layout_arr = $layout->getSections();
    $layout_arr[$section_delta] = $section;
    $node->set('layout_builder__layout', $layout_arr)
      ->save();
  }
}

/**
 * Set new headline fields from previous heading size fields.
 */
function sitenow_update_8035() {
  // Create new field storage for the uiowa headline.
  $config_path = Settings::get('config_sync_directory');
  $source = new FileStorage($config_path);
  \Drupal::entityManager()
    ->getStorage('field_storage_config')
    ->create($source->read('field.storage.block_content.field_uiowa_headline'))
    ->save();

  // Manually pull in the new block configs attaching the new field.
  $config_names = [
    'field.field.block_content.uiowa_text_area.field_uiowa_headline',
    'field.field.block_content.uiowa_slider.field_uiowa_headline',
    'field.field.block_content.uiowa_people.field_uiowa_headline',
    'field.field.block_content.uiowa_image_gallery.field_uiowa_headline',
    'field.field.block_content.uiowa_events.field_uiowa_headline',
    'field.field.block_content.uiowa_collection.field_uiowa_headline',
    'field.field.block_content.uiowa_articles.field_uiowa_headline',
  ];
  $config_storage = \Drupal::service('config.storage');
  foreach ($config_names as $config_name) {
    $config_storage->write($config_name, $source->read($config_name));
  }

  // Grab info on the current heading_size fields in place.
  $database = \Drupal::database();
  $heading_size_results = $database->select('block_content__field_collection_heading_size', 't')
    ->fields('t', [
      'bundle',
      'entity_id',
      'field_collection_heading_size_value',
    ])
    ->execute();

  $controller = \Drupal::service('entity_type.manager')
    ->getStorage('block_content');

  foreach ($heading_size_results as $record) {
    switch ($record->bundle) {

      // Bundles with existing 'heading size' field.
      case 'uiowa_articles':
      case 'uiowa_events':
      case 'uiowa_people':
      case 'uiowa_collection':
      case 'uiowa_slider':
        $block = $controller->load($record->entity_id);
        $heading_size = $record->field_collection_heading_size_value;

        $block->set('field_uiowa_headline', [
          'headline' => '',
          'child_heading_size' => $heading_size,
        ])
          ->save();
        break;
    }
  }
}

/**
 * Remove deprecated layout options config.
 */
function sitenow_update_8036() {
  \Drupal::configFactory()
    ->getEditable('uids_base.settings')
    ->clear('layout')
    ->clear('uids_base.layout')
    ->save();
}

/**
 * Deactivate the grad site split from every site except grad.uiowa.edu.
 */
function sitenow_update_8037() {
  if (\Drupal::service('site.path') != 'sites/grad.uiowa.edu') {
    \Drupal::configFactory()
      ->getEditable('config_split.config_split.site_grad_uiowa_edu')
      ->set('status', FALSE)
      ->save();
  }

  drupal_flush_all_caches();
}

/**
 * Set defaults for new LB styles on card blocks.
 */
function sitenow_update_8038() {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'page')
    ->condition('layout_builder__layout', '%uiowa_card%', 'LIKE');

  $results = $query->execute();

  $new_style_defaults = [
    'vertical' => [
      'card_image_large',
      'card_media_position_stacked',
      'content_alignment_left',
      'media_format_widescreen',
    ],
    'horizontal' => [
      'card_image_small',
      'card_media_position_left',
      'content_alignment_left',
      'media_format_widescreen',
    ],
  ];

  foreach ($results as $nid) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    $layout = $node->get('layout_builder__layout');

    // Grab the sections. We'll set updated ones back in below.
    $layout_sections = $layout->getSections();

    /**
     * @var integer $delta_s
     * @var \Drupal\layout_builder\Section $section
     */
    foreach ($layout_sections as $delta_s => $section) {
      $section_is_updated = FALSE;

      // insertComponent() uses delta and region
      // which makes it more difficult to re-set components.
      // With an array and iterator we can set it directly.
      $section_arr = $section->toArray();
      $i = 0;

      /**
       * @var \Drupal\layout_builder\SectionComponent $component
       */
      foreach ($section->getComponents() as $component) {
        if ($component->getPluginId() === 'inline_block:uiowa_card') {
          $existing_styles_clean = [];
          $existing_styles = $component->get('layout_builder_styles_style');
          $card_type = 'vertical';
          foreach ($existing_styles as $style) {
            // If the style isn't an empty string.
            if (!empty($style)) {
              if ($style === 'block_card_style_horizontal') {
                $card_type = 'horizontal';
              }
              else {
                // If the style isn't in either new list of defaults
                // we need to re-add it.
                if (!in_array($style, $new_style_defaults['vertical']) && !in_array($style, $new_style_defaults['horizontal'])) {
                  $existing_styles_clean[] = $style;
                }
              }
            }
          }

          $component->set('layout_builder_styles_style', array_merge($existing_styles_clean, $new_style_defaults[$card_type]));

          $section_arr['components'][$i] = $component->toArray();
          $section_is_updated = TRUE;
        }
        $i++;
      }

      if ($section_is_updated) {
        // Create a section from array, set, and save.
        $layout_sections[$delta_s] = Section::fromArray($section_arr);
        $node->set('layout_builder__layout', $layout_sections)
          ->save();
      }
    }
  }
}

/**
 * Set white background as default for existing card blocks.
 */
function sitenow_update_8039() {
  // Find NIDs for all nodes with at least one card block.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'page')
    ->condition('layout_builder__layout', '%uiowa_card%', 'LIKE');

  $results = $query->execute();

  foreach ($results as $nid) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    $layout = $node->get('layout_builder__layout');

    // Grab the sections. We'll set updated ones back in below.
    $layout_sections = $layout->getSections();

    /**
     * @var integer $delta_s
     * @var \Drupal\layout_builder\Section $section
     */
    foreach ($layout_sections as $delta_s => $section) {
      $section_is_updated = FALSE;

      // insertComponent() uses delta and region
      // which makes it more difficult to re-set components.
      // With an array and iterator we can set it directly.
      $section_arr = $section->toArray();
      $i = 0;

      /**
       * @var \Drupal\layout_builder\SectionComponent $component
       */
      foreach ($section->getComponents() as $component) {
        if ($component->getPluginId() === 'inline_block:uiowa_card') {
          $styles = $component->get('layout_builder_styles_style');
          // If card was bg--gray, keep it.
          if (!in_array('block_background_style_gray', $styles)) {
            $styles[] = 'block_background_style_light';
            $component->set('layout_builder_styles_style', $styles);

            $section_arr['components'][$i] = $component->toArray();
            $section_is_updated = TRUE;
          }
        }
        $i++;
      }

      if ($section_is_updated) {
        // Create a section from array, set, and save.
        $layout_sections[$delta_s] = Section::fromArray($section_arr);
        $node->set('layout_builder__layout', $layout_sections)
          ->save();
      }
    }
  }
}

/**
 * Install person type configuration entity (existing module).
 */
function sitenow_update_8040() {
  $type_manager = \Drupal::entityTypeManager();
  $type_manager->clearCachedDefinitions();
  $entity_type = $type_manager->getDefinition('person_type');
  \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);

  return t('Installed the person_type entity type');
}

/**
 * Move uiowa_bar config to uiowa_search.
 */
function sitenow_update_8041() {
  \Drupal::service('module_installer')->install(['uiowa_search']);

  $old_config = \Drupal::configFactory()->get('uiowa_bar.settings');
  $new_config = \Drupal::configFactory()->getEditable('uiowa_search.settings');

  $changes = [
    'uiowa_bar.cse_engine_id' => 'uiowa_search.cse_engine_id',
    'uiowa_bar.cse_scope' => 'uiowa_search.cse_scope',
    'uiowa_bar.display_search' => 'uiowa_search.display_search',
  ];

  foreach ($changes as $old => $new) {
    $value = $old_config->get($old);
    $new_config->set($new, $value);
  }

  $new_config->save();
}

/**
 * Import new config_ignore.settings before config import uninstalls uiowa_bar.
 */
function sitenow_update_8042() {
  $site_path = \Drupal::service('site.path');

  if ($site_path != 'sites/hr.uiowa.edu') {
    $config_path = Settings::get('config_sync_directory');
    $source = new FileStorage($config_path);
    $config_storage = \Drupal::service('config.storage');
    $config_storage->write('config_ignore.settings', $source->read('config_ignore.settings'));
  }
}

/**
 * De-activate the collegiate split on sites where it is active.
 */
function sitenow_update_8043() {
  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
  $collegiate_split = 'config_split:collegiate';

  // This site has the 'collegiate' split in config.
  if (isset($filters[$collegiate_split])) {
    $config_factory = \Drupal::configFactory();
    $config_factory->getEditable('config_split.config_split.collegiate')->delete();
  }
}

/**
 * Fix any outstanding issues with uids_base theme configuration.
 */
function sitenow_update_8044() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uids_base.settings');

  // Only run this if config exists.
  if ($config) {
    $changed = FALSE;

    foreach (['branding', 'uids_base'] as $key) {
      // Check if the key exists and delete it if so.
      if ($config->get($key)) {
        $config->clear($key);
        $changed = TRUE;
      }
    }

    // Save the config if we've updated it.
    if ($changed) {
      $config->save();
    }
  }
}

/**
 * Set new style defaults for existing aggregator blocks.
 */
function sitenow_update_8045() {
  // Find NIDs for all nodes with at least one aggregator block.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'page')
    ->condition('layout_builder__layout', '%uiowa_aggregator%', 'LIKE');

  $results = $query->execute();

  foreach ($results as $nid) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    $layout = $node->get('layout_builder__layout');

    // Grab the sections. We'll set updated ones back in below.
    $layout_sections = $layout->getSections();

    /**
     * @var integer $delta_s
     * @var \Drupal\layout_builder\Section $section
     */
    foreach ($layout_sections as $delta_s => $section) {
      $section_is_updated = FALSE;

      // insertComponent() uses delta and region
      // which makes it more difficult to re-set components.
      // With an array and iterator we can set it directly.
      $section_arr = $section->toArray();
      $i = 0;

      /**
       * @var \Drupal\layout_builder\SectionComponent $component
       */
      foreach ($section->getComponents() as $component) {
        if ($component->getPluginId() === 'inline_block:uiowa_aggregator') {
          $styles = $component->get('layout_builder_styles_style');
          $styles[] = 'card_media_position_left';
          $styles[] = 'media_format_circle';
          $styles[] = 'card_image_small';
          $component->set('layout_builder_styles_style', $styles);

          $section_arr['components'][$i] = $component->toArray();
          $section_is_updated = TRUE;
        }
        $i++;
      }

      if ($section_is_updated) {
        // Create a section from array, set, and save.
        $layout_sections[$delta_s] = Section::fromArray($section_arr);
        $node->set('layout_builder__layout', $layout_sections)
          ->save();
      }
    }
  }
}

/**
 * Update CTA summary from plain text to formatted plain text.
 */
function sitenow_update_8046() {
  // Statically defining our field to be updated.
  $field_name = 'field_uiowa_cta_summary';
  // Get the field and revision storage table name for the field.
  $table_mapping = \Drupal::service('entity_type.manager')
    ->getStorage('block_content')
    ->getTableMapping();
  $storage_definitions = \Drupal::service('entity_field.manager')
    ->getActiveFieldStorageDefinitions('block_content');
  $field_definition = $storage_definitions[$field_name];
  $table = $table_mapping->getDedicatedDataTableName($field_definition);
  $revision_table = $table_mapping->getDedicatedRevisionTableName($field_definition);

  $database = \Drupal::database();
  $field_storage = FieldStorageConfig::loadByName('block_content', $field_name);
  // Fetch data currently stored in the field and save for later.
  $rows = NULL;
  $revision_rows = NULL;
  if ($database->schema()->tableExists($table)) {
    $rows = $database
      ->select($table, 't')
      ->fields('t')
      ->execute()
      ->fetchAll();
    if ($database->schema()->tableExists($revision_table)) {
      $revision_rows = $database
        ->select($revision_table, 'r')
        ->fields('r')
        ->execute()
        ->fetchAll();
    }
  }

  $new_fields = [];
  $weights = [];
  foreach ($field_storage->getBundles() as $bundle => $label) {
    $old_field = FieldConfig::loadByName('block_content', $bundle, $field_name);
    $new_field = $old_field->toArray();
    $new_field['field_type'] = 'text_long';
    $new_field['settings'] = [];
    $new_fields[] = $new_field;
    // Get the view display weights so we can re-set them later.
    $entity_view = 'block_content.' . $bundle . '.default';
    $view_display = \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load($entity_view)
      ->getComponent($field_name);
    $weights['entity_view_display'][$entity_view] = $view_display['weight'];
    // Get the form display weights so we can re-set them later.
    $form_display = \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('block_content.' . $bundle . '.default')
      ->getComponent($field_name);
    $weights['entity_form_display']['block_content.' . $bundle . '.default'] = $form_display['weight'];
  }

  // Store the old field settings and update to text_long.
  $new_field_storage = $field_storage->toArray();
  $new_field_storage['type'] = 'text_long';
  $new_field_storage['settings'] = [];
  $new_field_storage['module'] = 'text';
  // Deleting at the field_storage level takes care of the bundles as well.
  $field_storage->delete();

  // Purge in order for new field to be created after deleting the old.
  field_purge_batch(100);

  // Save our new, updated field storage.
  $new_field_storage = FieldStorageConfig::create($new_field_storage);
  $new_field_storage->save();

  // Create our new fields to match the field storages.
  foreach ($new_fields as $new_field) {
    $new_field_config = FieldConfig::create($new_field);
    $new_field_config->save();
  }

  // Replace into the new fields data we saved from the old fields.
  if (!is_null($rows)) {
    foreach ($rows as $row) {
      $row = (array) $row;
      $row[$field_name . '_format'] = 'plain_text';
      $database
        ->insert($table)
        ->fields($row)
        ->execute();
    }
  }
  if (!is_null($revision_rows)) {
    foreach ($revision_rows as $row) {
      $row = (array) $row;
      $row[$field_name . '_format'] = 'plain_text';
      $database
        ->insert($revision_table)
        ->fields($row)
        ->execute();
    }
  }

  // Update the view and form display weights, which enables the new fields.
  foreach ($weights as $display_mode => $view_modes) {
    foreach ($view_modes as $view_mode => $weight) {
      if ($weight) {
        \Drupal::entityTypeManager()
          ->getStorage($display_mode)
          ->load($view_mode)
          ->setComponent($field_name, [
            'weight' => $weight,
          ])
          ->save();
      }
    }
  }
}

/**
 * Restricts existing layout header sections.
 */
function sitenow_update_8047() {
  $connection = Database::getConnection();

  // Get layout instances.
  $query = $connection->select('node__layout_builder__layout', 'n');
  $query->fields('n', ['entity_id', 'delta']);
  $results = $query->execute();

  if (empty($results)) {
    return;
  }

  // Node storage controller.
  $node_storage = \Drupal::service('entity_type.manager')
    ->getStorage('node');

  // Assemble list of nids and eliminate duplicates.
  $nids = [];
  foreach ($results as $record) {
    $nids[] = $record->entity_id;
  }
  $nids = array_unique($nids);

  // Loop through nodes.
  foreach ($nids as $nid) {
    $node = $node_storage->load($nid);
    $layout = $node->get('layout_builder__layout');
    $layout_sections = $layout->getSections();

    // Loop through sections.
    foreach ($layout_sections as $section) {
      // Is this a header section?
      if ($section->getLayoutId() == 'layout_header') {
        // Get lock settings.
        $lock_settings = $section->getThirdPartySetting('layout_builder_lock', 'lock');
        // Check for the missing key, add it if it doesn't exist already.
        if (isset($lock_settings)) {
          if (!array_key_exists(5, $lock_settings)) {
            $lock_settings[5] = 5;
            ksort($lock_settings);
            // Save changes.
            $section->setThirdPartySetting('layout_builder_lock', 'lock', $lock_settings);
            $node->set('layout_builder__layout', $layout_sections)
              ->save();
          }
        }
      }
    }
  }
}

/**
 * Set new style defaults for existing events blocks.
 */
function sitenow_update_8048() {
  // Find NIDs for all nodes with at least one events block.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'page')
    ->condition('layout_builder__layout', '%uiowa_events%', 'LIKE');

  $results = $query->execute();

  foreach ($results as $nid) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    $layout = $node->get('layout_builder__layout');

    // Grab the sections. We'll set updated ones back in below.
    $layout_sections = $layout->getSections();

    /**
     * @var integer $delta_s
     * @var \Drupal\layout_builder\Section $section
     */
    foreach ($layout_sections as $delta_s => $section) {
      $section_is_updated = FALSE;

      // insertComponent() uses delta and region
      // which makes it more difficult to re-set components.
      // With an array and iterator we can set it directly.
      $section_arr = $section->toArray();
      $i = 0;

      /**
       * @var \Drupal\layout_builder\SectionComponent $component
       */
      foreach ($section->getComponents() as $component) {
        if ($component->getPluginId() === 'inline_block:uiowa_events') {
          $styles = $component->get('layout_builder_styles_style');
          // Events - Small circle left-aligned,
          // left align content, transparent.
          $styles[] = 'card_media_position_left';
          $styles[] = 'media_format_circle';
          $styles[] = 'card_image_small';
          $styles[] = 'content_alignment_left';
          $component->set('layout_builder_styles_style', $styles);

          $section_arr['components'][$i] = $component->toArray();
          $section_is_updated = TRUE;
        }
        $i++;
      }

      if ($section_is_updated) {
        // Create a section from array, set, and save.
        $layout_sections[$delta_s] = Section::fromArray($section_arr);
        $node->set('layout_builder__layout', $layout_sections)
          ->save();
      }
    }
  }
}

/**
 * Sometimes config ignore needs a little push.
 */
function sitenow_update_8049() {
  $site_path = \Drupal::service('site.path');

  if ($site_path != 'sites/hr.uiowa.edu') {
    $config_path = Settings::get('config_sync_directory');
  }
  else {
    $config_path = DRUPAL_ROOT . '/../config/hr.uiowa.edu/';
  }
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write('config_ignore.settings', $source->read('config_ignore.settings'));
}

/**
 * Update instances of <drupal-entity> to <drupal-media> in textareas.
 */
function sitenow_update_8050() {
  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
  $sitenow_v2_split = 'config_split:sitenow_v2';

  // This site has the 'sitenow_v2' split in config.
  if (isset($filters[$sitenow_v2_split])) {
    $entity_types = [
      'block_content',
      'media',
      'node',
      'paragraph',
    ];

    foreach ($entity_types as $entity_type) {
      $bundles = \Drupal::service('entity_type.bundle.info')
        ->getBundleInfo($entity_type);

      // @todo Handle case where no bundles exist?
      foreach ($bundles as $bundle => $bundle_label) {
        /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
        $entityFieldManager = \Drupal::service('entity_field.manager');
        $fields = $entityFieldManager->getFieldDefinitions($entity_type, $bundle);
        $field_check = [];
        /**
         * @var string $field_name
         * @var \Drupal\field\Entity\FieldConfig $definition
         */
        foreach ($fields as $field_name => $definition) {
          if (in_array($definition->getType(), [
            'text_long',
            'text_with_summary',
          ])) {
            $field_check[$field_name] = $definition;
          }
        }

        // Only need to run the following if we found fields to check against.
        if (!empty($field_check)) {

          // Retrieve all entities of this bundle type;.
          // Media is listed as 'bundle,' but other entity types
          // are listed as 'type'.
          $type = $entity_type == 'media' ? 'bundle' : 'type';
          $entities = \Drupal::entityTypeManager()->getStorage($entity_type)
            ->loadByProperties([$type => $bundle]);

          // Loop through the loaded entities.
          foreach ($entities as $entity) {
            $needs_save = FALSE;

            // Loop through the fields we defined before.
            foreach ($field_check as $name => $definition) {
              // If the field has a value (or values).
              if (!$entity->get($name)->isEmpty()) {
                $updated_values = [];
                $field_values = $entity->{$name}->getValue();

                foreach ($field_values as $field_value) {

                  $document = Html::load($field_value['value']);

                  // Get all <drupal-entity> instances.
                  $de_instances = $document->getElementsByTagName('drupal-entity');

                  // DE Example: <drupal-entity data-align="center" data-embed-button="media_entity_embed" data-entity-embed-display="view_mode:media.full" data-entity-embed-display-settings="" data-entity-type="media" data-entity-uuid="463f699b-e367-48b1-9a30-5df1fbe88762"></drupal-entity>.
                  // DM Example: <drupal-media data-align="center" data-entity-type="media" data-entity-uuid="10e236e2-b20c-4b6c-9c60-f5f1ad1e316d" data-view-mode="large__no_crop"></drupal-media>.
                  // As we replace the inline images, they are actually
                  // removed in the DOMNodeList $images, so we have to
                  // use a regressive loop to count through them.
                  // See https://www.php.net/manual/en/domnode.replacechild.php#50500.
                  $i = $de_instances->length - 1;

                  while ($i >= 0) {
                    // The current inline image element.
                    $de_instance = $de_instances->item($i);
                    $dm_instance = $document->createElement('drupal-media');

                    // Loop through attributes that are the same for both formats.
                    foreach ([
                      'data-align',
                      'data-entity-type',
                      'data-entity-uuid',
                    ] as $attr_name) {
                      $attribute = $de_instance->getAttribute($attr_name);

                      // Set the attribute on the new instance if it has a value set.
                      if (!empty($attribute)) {
                        $dm_instance->setAttribute($attr_name, $attribute);
                      }
                    }

                    $old_view_mode = $de_instance->getAttribute('data-entity-embed-display');
                    if (!empty($old_view_mode)) {
                      // @todo Parse out the view mode from the existing embed attribute.
                      $old_view_mode = str_replace('view_mode:media.', '', $old_view_mode);
                      $old_view_mode = str_replace('image_', '', $old_view_mode);
                      $dm_instance->setAttribute('data-view-mode', $old_view_mode);
                    }

                    $de_instance->parentNode->replaceChild($dm_instance, $de_instance);

                    $i--;
                  }

                  $updated_values[] = [
                    'value' => Html::serialize($document),
                    'format' => $field_value['format'],
                  ];
                }

                // Only make updates if there are updated values.
                if (!empty($updated_values)) {
                  if (count($updated_values) === 1) {
                    $updated_values = $updated_values[0];
                  }

                  $entity->{$name} = $updated_values;
                  $needs_save = TRUE;
                }
              }
            }
            if ($needs_save) {
              $entity->save();
            }
          }
        }
      }
    }
  }
}

/**
 * Convert coronavirus.uiowa.edu to V3.
 */
function sitenow_update_8051() {
  $site_path = \Drupal::service('site.path');
  if ($site_path == 'sites/coronavirus.uiowa.edu') {
    // Disable splits.
    $config_factory = \Drupal::configFactory();
    $sitenow_v2 = $config_factory->getEditable('config_split.config_split.sitenow_v2');
    $sitenow_v2->set('status', FALSE);
    $sitenow_v2->save(TRUE);

    $coronavirus = $config_factory->getEditable('config_split.config_split.coronavirus_uiowa_edu');
    $coronavirus->set('status', FALSE);
    $coronavirus->save(TRUE);
  }
}

/**
 * Set list grid defaults for existing list blocks.
 */
function sitenow_update_9001() {
  $block_types = [
    'uiowa_aggregator',
    'uiowa_events',
    'uiowa_articles',
    'uiowa_people',
  ];
  foreach ($block_types as $block_type) {
    // Find NIDs for all nodes with at least one aggregator block.
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'page')
      ->condition('layout_builder__layout', '%' . $block_type . '%', 'LIKE');

    $results = $query->execute();

    foreach ($results as $nid) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      $layout = $node->get('layout_builder__layout');

      // Grab the sections. We'll set updated ones back in below.
      $layout_sections = $layout->getSections();

      /**
       * @var integer $delta_s
       * @var \Drupal\layout_builder\Section $section
       */
      foreach ($layout_sections as $delta_s => $section) {
        $section_is_updated = FALSE;

        // insertComponent() uses delta and region
        // which makes it more difficult to re-set components.
        // With an array and iterator we can set it directly.
        $section_arr = $section->toArray();
        $i = 0;

        /**
         * @var \Drupal\layout_builder\SectionComponent $component
         */
        foreach ($section->getComponents() as $component) {
          if ($component->getPluginId() === 'inline_block:' . $block_type) {
            $styles = $component->get('layout_builder_styles_style');
            $styles[] = 'list_format_list';
            $styles[] = 'block_grid_threecol_33_34_33';
            $component->set('layout_builder_styles_style', $styles);
            $section_arr['components'][$i] = $component->toArray();
            $section_is_updated = TRUE;
          }
          $i++;
        }

        if ($section_is_updated) {
          // Create a section from array, set, and save.
          $layout_sections[$delta_s] = Section::fromArray($section_arr);
          $node->set('layout_builder__layout', $layout_sections)
            ->save();
        }
      }
    }
  }
}

/**
 * Set new font-family theme setting.
 */
function sitenow_update_9002() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uids_base.settings');
  $config->set('fonts.font-family', 'sans-serif');
  $config->save();
}

/**
 * Set menu links to expanded by default.
 */
function sitenow_update_9003(&$sandbox) {// Process all nodes that have a filled field_reference.
  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('menu_link_content')
      ->condition('expanded', 0, '=')
      ->execute();
    $sandbox['total'] = count($query);
    $sandbox['current'] = 0;
    $sandbox['query'] = $query;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Loop through menu links in batches.
  $per_batch = 100;
  $batch = array_slice($sandbox['query'], $sandbox['current'], $sandbox['current'] + $per_batch);
  if (empty($batch)) {
    $sandbox['#finished'] = 1;
    \Drupal::service('router.builder')->rebuild();
    return;
  }

  foreach ($batch as $mcid) {
    $menu_item = MenuLinkContent::load($mcid);
    $menu_item->expanded = 1;
    $menu_item->save();
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' menu items processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Update menu block instance settings to show 1 level of menu.
 */
function sitenow_update_9004(&$sandbox) {
  $connection = Database::getConnection();

  // We need to adjust the records for the current node
  // version and previous revisions.
  foreach (['node_revision__layout_builder__layout', 'node__layout_builder__layout'] as $table_name) {
    $query = $connection->select($table_name, 'n');
    $orGroup = $query->orConditionGroup()
      ->condition('layout_builder__layout_section', '%s:5:"depth";i:0;%', 'LIKE')
      ->condition('layout_builder__layout_section', '%s:5:"depth";s:1:"0"%', 'LIKE');

    $query->fields('n', ['entity_id'])
      ->condition($orGroup);
    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage($table_name . ' records found (before): ' . $count);

    // For reasons I can't quite understand,
    // the depth config in the menu block settings
    // get serialized as an integer in some cases
    // and as a string in others. We have to handle
    // both.
    // Handle integer case.
    $connection->update($table_name)
      ->condition('layout_builder__layout_section', '%menu_block:main%', 'LIKE')
      ->expression('layout_builder__layout_section', 'REPLACE(layout_builder__layout_section, :old, :new)', [
        ':old' => 's:5:"depth";i:0;',
        ':new' => 's:5:"depth";i:1;',
      ])
      ->execute();
    // Handle string case.
    $connection->update($table_name)
      ->condition('layout_builder__layout_section', '%menu_block:main%', 'LIKE')
      ->expression('layout_builder__layout_section', 'REPLACE(layout_builder__layout_section, :old, :new)', [
        ':old' => 's:5:"depth";s:1:"0"',
        ':new' => 's:5:"depth";s:1:"1"',
      ])
      ->execute();

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage($table_name . ' records found (after): ' . $count);
  }
}

/**
 * Enable grad_person_extended split.
 *
 * In cases where the person_extended split was being used,
 * enable the grad_person_extended split to take its place.
 */
function sitenow_update_9005() {

  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
  $split = 'config_split:person_extended';

  // If person_extended split isn't registered or
  // isn't active, return early.
  if (!isset($filters[$split]) || !$filters[$split]['status']) {
    return t('person_extended split is not active, so no update to run.');
  }

  $config_path = DRUPAL_ROOT . '/../config/default';
  $source = new FileStorage($config_path);

  // Create field storage for new person type status field.
  \Drupal::entityTypeManager()
    ->getStorage('field_storage_config')
    ->create($source->read('field.storage.node.field_person_type_status'))
    ->save();

  // Create field instance for 'field_person_type_status'.
  \Drupal::entityTypeManager()->getStorage('field_config')
    ->create($source->read('field.field.node.person.field_person_type_status'))
    ->save();

  // The following config is needed for the next update.
  $config_names = [
    'config_ignore.settings',
    'config_split.config_split.grad_person_extended',
  ];
  $config_storage = \Drupal::service('config.storage');
  foreach ($config_names as $config_name) {
    $config_storage->write($config_name, $source->read($config_name));
  }

  // Enable the 'person_extended' split.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('config_split.config_split.grad_person_extended');
  $config->set('status', TRUE);
  $config->save(TRUE);
}

/**
 * Update sites using the person_extended to reflect changes to that split.
 */
function sitenow_update_9006(&$sandbox) {
  /** @var \Drupal\Core\Plugin\DefaultPluginManager $filters */
  $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
  $split = 'config_split:person_extended';

  // If person_extended split isn't registered or
  // isn't active, return early.
  if (!isset($filters[$split]) || !$filters[$split]['status']) {
    return t('person_extended split is not active, so no update to run.');
  }

  // @todo Remove when debugging is removed.
  define('CHECK_NID', 616);

  // Process all nodes that have a filled person.
  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'person')
      ->execute();

    $sandbox['total'] = count($query);
    $sandbox['current'] = 0;
    $sandbox['query'] = $query;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Loop through the same nodes in batches.
  $nodes_per_batch = 25;
  $batch = array_slice($sandbox['query'], $sandbox['current'], $sandbox['current'] + $nodes_per_batch);
  if (empty($batch)) {
    $sandbox['#finished'] = 1;
    return;
  }

  foreach ($batch as $nid) {
    // Load the node, set a flag for whether we need to save the node.
    $node = Node::load($nid);
    // Unset any gremlins.
    $node->set('field_person_contact_information', NULL);
    $save_node = FALSE;
    $field_fragments = [
      'room',
      'building',
      'phone',
    ];
    foreach ([
      'lab',
      'office',
    ] as $location_type) {
      $location = [];
      foreach ($field_fragments as $fragment_name) {
        $field_name = "field_person_{$location_type}_{$fragment_name}";
        if ($node->hasField($field_name) && $node->{$field_name}->value) {
          $location[$fragment_name] = $node->{$field_name}->value;
          // Remove field instances from node.
          $node->set($field_name, NULL);
          // Now we need to save the node.
          $save_node = TRUE;
        }
      }

      if (!empty($location)) {
        // Create a Contact Info paragraph instance.
        // and populate with location info.
        $contact_info = Paragraph::create([
          'type' => 'uiowa_contact',
          'field_uiowa_contact_label' => [
            'value' => ucfirst($location_type),
          ],
        ]);

        // If a phone number is present, pop it off the array
        // and add it.
        if (isset($location['phone'])) {
          $contact_info->field_uiowa_contact_phone = array_pop($location);
        }

        // Create the address_line1 string.
        $address = implode(' ', $location);

        // If there is an address_line1, build the address object.
        if ($address !== '') {
          $field_uiowa_contact_address = [
            'country_code' => 'US',
            'address_line1' => $address,
          ];
          $contact_info->set('field_uiowa_contact_address', $field_uiowa_contact_address);
        }
        // Save the contact info.
        $contact_info->save();

        // Attach the contact info to the node.
        $node->field_person_contact_information[] = [
          'target_id' => $contact_info->id(),
          'target_revision_id' => $contact_info->getRevisionId(),
        ];
        $save_node = TRUE;
      }
    }

    // Check if we have the current student field and
    // the person types field.
    if ($node->hasField('field_pt_student_current') && $node->hasField('field_person_types')) {
      // If the person type includes 'student' and
      // current student is FALSE, set the person type status.
      $existing_types = array_column($node->field_person_types->getValue(), 'target_id');
      if (in_array('student', $existing_types) && !$node->field_pt_student_current->value) {
        $node->field_person_type_status->setValue(['value' => 'student']);
        $save_node = TRUE;
      }
    }

    // Save node if there were changes.
    if ($save_node) {
      // Set revision message and save.
      $node->setRevisionLogMessage('Automated save.');
      $node->save();
    }
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' nodes processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Update button classes.
 */
function sitenow_update_9007() {
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme();

  // Limit to just sites running uids_base.
  if ($active_theme->getName() === 'uids_base') {

    $secondary = 'bttn--secondary bttn--caps';
    $search_replace = [
      'btn-primary' => 'bttn--primary bttn--caps',
      'btn-secondary' => $secondary,
      'btn-success' => $secondary,
      'btn-danger' => $secondary,
      'btn-info' => $secondary,
      'btn-warning' => $secondary,
      'btn-light' => $secondary,
      'btn-dark' => $secondary,
      'btn-link' => '',
      'btn-lg' => '',
      'btn-sm' => '',
      'btn-block' => '',
      'btn' => 'bttn',
    ];
    // Table classes to remove.
    $table_search = [
      'table--static',
      'table--is-striped',
      'is-striped',
      'table',
    ];
    $entity_type_manager = \Drupal::entityTypeManager();
    $entity_field_manager = \Drupal::service('entity_field.manager');
    $text_long = $entity_field_manager->getFieldMapByFieldType('text_long');
    $text_with_summary = $entity_field_manager->getFieldMapByFieldType('text_with_summary');
    $entity_field_map = array_merge($text_long, $text_with_summary);

    foreach ($entity_field_map as $entity_type_id => $field_map) {
      $entity_storage = $entity_type_manager->getStorage($entity_type_id);
      if (!($entity_storage instanceof SqlContentEntityStorage)) {
        continue;
      }

      $entity_type = $entity_type_manager->getDefinition($entity_type_id);
      $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
      $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);
      foreach (array_intersect_key($field_storage_definitions, $field_map) as $field_storage_definition) {
        $tables = [];
        $field_name = $field_storage_definition->getName();
        try {
          $tables[] = $table_mapping->getFieldTableName($field_name);
          $value_column = $table_mapping->getFieldColumnName($field_storage_definition, 'value');
        } catch (SqlContentEntityStorageException $e) {
          continue;
        }
        // See if the field has a revision table.
        $revision_table = NULL;
        if ($entity_type->isRevisionable() && $field_storage_definition->isRevisionable()) {
          if ($table_mapping->requiresDedicatedTableStorage($field_storage_definition)) {
            $revision_table = $table_mapping->getDedicatedRevisionTableName($field_storage_definition);
          }
          elseif ($table_mapping->allowsSharedTableStorage($field_storage_definition)) {
            $revision_table = $entity_type->getRevisionDataTable() ?: $entity_type->getRevisionTable();
          }
          $tables[] = $revision_table;
        }
        if (!empty($tables)) {
          $db = \Drupal::database();

          foreach ($tables as $table) {
            $update_count = 0;
            $query = $db->select($table, 't')
            ->fields('t');

            $or_group = $query->orConditionGroup();

            foreach ($search_replace as $needle => $string) {
              $or_group->condition($value_column, '%' . $db->escapeLike($needle) . '%', 'LIKE');
            }

            foreach ($table_search as $needle) {
              $or_group->condition($value_column, '%' . $db->escapeLike($needle) . '%', 'LIKE');
            }

            $results = $query->condition($or_group)
            ->execute();

            foreach ($results as $record) {

              $document = Html::load($record->{$value_column});

              foreach (['a', 'table'] as $tag) {
                $instances = $document->getElementsByTagName($tag);

                // We don't actually need the regressive loop
                // here, but its copied/pasted.
                $i = $instances->length - 1;

                while ($i >= 0) {
                  // The current inline image element.
                  $dom_element = $instances->item($i);

                  $class = $dom_element->getAttribute('class');

                  switch ($tag) {
                    case 'a':
                      foreach ($search_replace as $needle => $replace) {
                        $class = str_replace($needle, $replace, $class);
                      }
                      break;
                    case 'table':
                      foreach ($table_search as $needle) {
                        $class = str_replace($needle, '', $class);
                      }
                      break;
                  }

                  if (trim($class)) {
                    $dom_element->setAttribute('class', $class);
                  }
                  else {
                    $dom_element->removeAttribute('class');
                  }

                  $i--;
                }
              }

              // Run database update to store updated $value_column as Html::serialize($document)
              $db->update($table)
                ->fields([
                  $value_column => Html::serialize($document),
                ])
                ->condition('entity_id', $record->entity_id)
                ->condition('revision_id', $record->revision_id)
                ->execute();

              $update_count++;
            }

            if ($update_count) {
              \Drupal::messenger()
                ->addMessage('Processed ' . $update_count . ' update(s) for ' . $table . ' table ' . $value_column . ' column.');
            }
          }
        }
      }
    }

    // Loop through SiteNow config ignored views.
    $views = ['articles', 'people'];
    foreach ($views as $view) {
      $view = \Drupal::entityTypeManager()->getStorage('view')->load('people');
      $default =& $view->getDisplay('default');
      $header_content = $default["display_options"]["header"]["area"]["content"]["value"];
      foreach ($search_replace as $needle => $string) {
        $header_content = str_replace($needle, $string, $header_content);
      }
      $default["display_options"]["header"]["area"]["content"]["value"] = $header_content;
      $view->save();
    }

  }
}

/**
 * Fix table classes that were inadvertently broken.
 */
function sitenow_update_9008() {
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme();

  // Limit to just sites running uids_base.
  if ($active_theme->getName() === 'uids_base') {

    $table_search = [
      '--gray-borders' => 'table--gray-borders',
      '--hover-highlight' => 'table--hover-highlight',
      '--width-default' => 'table--width-default',
    ];
    $entity_type_manager = \Drupal::entityTypeManager();
    $entity_field_manager = \Drupal::service('entity_field.manager');
    $text_long = $entity_field_manager->getFieldMapByFieldType('text_long');
    $text_with_summary = $entity_field_manager->getFieldMapByFieldType('text_with_summary');
    $entity_field_map = array_merge($text_long, $text_with_summary);

    foreach ($entity_field_map as $entity_type_id => $field_map) {
      $entity_storage = $entity_type_manager->getStorage($entity_type_id);
      if (!($entity_storage instanceof SqlContentEntityStorage)) {
        continue;
      }

      $entity_type = $entity_type_manager->getDefinition($entity_type_id);
      $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
      $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);
      foreach (array_intersect_key($field_storage_definitions, $field_map) as $field_storage_definition) {
        $tables = [];
        $field_name = $field_storage_definition->getName();
        try {
          $tables[] = $table_mapping->getFieldTableName($field_name);
          $value_column = $table_mapping->getFieldColumnName($field_storage_definition, 'value');
        } catch (SqlContentEntityStorageException $e) {
          continue;
        }
        // See if the field has a revision table.
        $revision_table = NULL;
        if ($entity_type->isRevisionable() && $field_storage_definition->isRevisionable()) {
          if ($table_mapping->requiresDedicatedTableStorage($field_storage_definition)) {
            $revision_table = $table_mapping->getDedicatedRevisionTableName($field_storage_definition);
          }
          elseif ($table_mapping->allowsSharedTableStorage($field_storage_definition)) {
            $revision_table = $entity_type->getRevisionDataTable() ?: $entity_type->getRevisionTable();
          }
          $tables[] = $revision_table;
        }
        if (!empty($tables)) {
          $db = \Drupal::database();

          foreach ($tables as $table) {
            $update_count = 0;

            foreach ($table_search as $needle => $replace) {
              $update_count += $db->update($table)
                ->condition($value_column, '%' . $db->escapeLike($needle) . '%', 'LIKE')
                ->expression($value_column, "REPLACE($value_column, :old, :new)", [
                  ':old' => $needle,
                  ':new' => $replace,
                ])
                ->execute();
            }

            if ($update_count) {
              \Drupal::messenger()
                ->addMessage(t('Processed @update_count update(s) for @table table @value_column column.', [
                  '@update_count' => $update_count,
                  '@table' => $table,
                  '@value_column' => $value_column,
                ]));

              $fix_count = $db->update($table)
                ->condition($value_column, '%' . $db->escapeLike('tabletable--') . '%', 'LIKE')
                ->expression($value_column, "REPLACE($value_column, :old, :new)", [
                  ':old' => 'tabletable--',
                  ':new' => 'table--',
                ])
                ->execute();

              \Drupal::messenger()
                ->addMessage(t('Fixed @fix_count instance(s) where the customer had manually changed the table class in @table table @value_column column.', [
                  '@fix_count' => $fix_count,
                  '@table' => $table,
                  '@value_column' => $value_column,
                ]));
            }
          }
        }
      }
    }
  }
}

/**
 * Helper function to convert an existing people block
 * component into a people list view block.
 */
function _convert_people_block_component(SectionComponent &$component, BlockContentInterface $block) {

  $styles = $component->get('layout_builder_styles_style');

  // Default LB styles for new block.
  $new_styles = [
    'card_media_position_right',
    'media_format_circle',
    'content_alignment_left',
    'card_image_small',
    'list_format_list',
    'block_grid_threecol_33_34_33',
  ];

  if (is_array($styles)) {

    $style_update_map = [
      'block_hide_descriptions' => 'delete',
      'block_hide_details' => 'delete',
      'block_hide_image' => 'delete',
      'block_grid_twocol_50_50' => 'block_grid_threecol_33_34_33',
      'list_format_grid' => 'list_format_list',
    ];

    foreach ($styles as $style) {
      if (isset($style_update_map[$style])) {
        if ($style_update_map[$style] === 'delete') {
          continue;
        }
        if ($key = array_search($style_update_map[$style], $new_styles)) {
          $new_styles[$key] = $style;
        }
      }
    }

    $new_styles = array_unique($new_styles);
  }

  // Build out the new view block configuration.
  $config = [
    'id' => 'views_block:people_list_block-list_card',
    'label' => NULL,
    'provider' => 'views',
    'label_display' => NULL,
    'views_label' => '',
    'items_per_page' => $block->field_collection_results->value ?: 'none',
    'headline' => $block->get('field_uiowa_headline')
      ->getValue()[0],
    'pager' => $block->field_collection_pager->value ? 'full' : 'some',
    'pager_offset' => 0,
    'use_more' => $block->field_collection_more->value,
    'use_more_link_url' => $block->field_collection_more_path->value,
    'sort' => [
      'sticky' => [
        'order' => 'DESC',
        'weight' => 0,
      ],
      'field_person_last_name_value' => [
        'order' => 'ASC',
        'weight' => 0,
      ],
      'field_person_first_name_value' => [
        'order' => 'ASC',
        'weight' => 0,
      ],
    ],
    'exposed_filter_values' => [
      'field_tags_target_id' => [],
    ],
    'layout_builder_styles' => $new_styles,
    'context_mapping' => [],
  ];

  // Process tags.
  if (isset($block->get('field_collection_reference')
      ->getValue()[0])) {
    foreach ($block->get('field_collection_reference')
               ->getValue()[0] as $target) {
      $config['exposed_filter_values']['field_tags_target_id'][] = ['target_id' => $target];
    }
  }

  $fields = [
    'field_person_credential',
    'title',
    'field_teaser',
    'field_person_email',
    'field_image',
    'field_person_phone',
    'field_person_position',
  ];

  // Process field visibility settings
  foreach ($fields as $field) {
    $hide = 0;
    if (isset($styles)) {
      switch ($field) {
        case 'field_image':
          if (in_array('block_hide_image', $styles)) {
            $hide = 1;
          }
          break;
        case 'field_teaser':
          if (in_array('block_hide_descriptions', $styles)) {
            $hide = 1;
          }
          break;
        case 'field_person_email':
        case 'field_person_phone':
        if (in_array('block_hide_details', $styles)) {
          $hide = 1;
        }
        break;
      }
    }

    $config['fields'][$field]['hide'] = $hide;
  }

  // Process sorting defaults.
  $current_sort = $block->field_collection_sort->value;
  if ($current_sort == 'block_people_sfl') {
    $last_name_sort = $config['sort']['field_person_last_name_value'];
    unset($config['sort']['field_person_last_name_value']);
    $config['sort']['field_person_last_name_value'] = $last_name_sort;
  }

  // Repurpose the existing component and set new styles.
  $component->setConfiguration($config);
  $component->set('layout_builder_styles_style', $new_styles);
}

/**
 * Update all LB people blocks to views block.
 */
function sitenow_update_9009() {
  $db = \Drupal::database();
  $block_storage = \Drupal::entityTypeManager()
    ->getStorage('block_content');

  $section_column = 'layout_builder__layout_section';
  $tables = [
    'node__layout_builder__layout',
    'node_revision__layout_builder__layout',
  ];

  // Collect all the block instances so we can delete them at the end.
  $blocks = [];

  foreach ($tables as $table_name) {
    // Select instances where the section contains a uiowa_people block.
    $query = $db->select($table_name, 'n')
      ->condition($section_column, '%uiowa_people%', 'LIKE')
      ->fields('n', ['entity_id', 'revision_id', 'delta', $section_column]);

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage('People block records found: ' . $count);

    $results = $query->execute();

    // Loop through the results.
    foreach ($results as $record) {

      // Unserialize the section field into it's class object.
      /** @var Section $section */
      $section = unserialize($record->layout_builder__layout_section);

      // Loop through the components in the section.
      foreach ($section->getComponents() as &$component) {

        // Limit this to only the uiowa_people block component.
        if ($component->getPluginId() !== 'inline_block:uiowa_people') {
          continue;
        }

        $component_arr = $component->toArray();
        $revision_id = $component_arr['configuration']['block_revision_id'];

        if (!$revision_id) {
          continue;
        }

        if (empty($blocks[$revision_id])) {
          $blocks[$revision_id] = $block_storage->loadRevision($revision_id);
        }

        if (is_null($blocks[$revision_id])) {
          continue;
        }

        _convert_people_block_component($component, $blocks[$revision_id]);
      }

      // Replace the old section with our newly created one.
      $db->update($table_name)
        ->condition('revision_id', $record->revision_id)
        ->condition('delta', $record->delta)
        ->fields([
          $section_column => serialize($section),
        ])
        ->execute();
    }
  }

  // Only continue with this section if we have a key_value_expire
  // table to work with.
  if ($db->schema()->tableExists('key_value_expire')) {
    // Check if we have a tempstore of this node.
    // Temp store is saved in the db in the key_value_expire,
    // And holds a serialized blob with the unsaved changes.
    // Might be a better method of accessing this through the Layout Builder API
    // and layoutTempstoreRepository, but have not found it yet.
    $query = $db->select('key_value_expire', 'kve')
      ->fields('kve', ['name', 'value', 'expire'])
      ->condition('value', '%uiowa_people%', 'LIKE');

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage('Tempstore records found: ' . $count);

    $results = $query
      ->execute();

    foreach ($results as $record) {
      // Unserialize and replace the section in question with our updated one.
      $stored_data = unserialize($record->value);
      /** @var \Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage $section_storage */
      $section_storage = $stored_data->data['section_storage'];

      // Loop through sections in the storage.
      foreach ($section_storage->getSections() as $delta => &$section) {
        // Loop through the components in the section.
        foreach ($section->getComponents() as &$component) {

          // Limit this to only the uiowa_people block component.
          if ($component->getPluginId() !== 'inline_block:uiowa_people') {
            continue;
          }

          $component_arr = $component->toArray();
          $revision_id = $component_arr['configuration']['block_revision_id'];

          if ($revision_id) {
            if (empty($blocks[$revision_id])) {
              $blocks[$revision_id] = $block_storage->loadRevision($revision_id);
            }
            $block = $blocks[$revision_id];
          }
          else {
            $block = unserialize($component_arr['configuration']['block_serialized']);
          }

          if (!$block instanceof BlockContentInterface) {
            continue;
          }

          _convert_people_block_component($component, $block);
        }
      }
      $stored_data->data['section_storage'] = $section_storage;

      // Insert the updated tempstore.
      $db->update('key_value_expire')
        ->condition('name', $record->name, '=')
        ->condition('expire', $record->expire, '=')
        ->fields([
          'value' => serialize($stored_data),
        ])
        ->execute();
    }
  }
  // Delete all the blocks.
  foreach ($blocks as $block) {
    if (!is_null($block)) {
      $block->delete();
    }
  }
}

/**
 * Set - None - section container options to Normal.
 */
function sitenow_update_9010() {
  $connection = Database::getConnection();

  // We need to adjust the records for the current node
  // version and previous revisions.
  foreach (['node_revision__layout_builder__layout', 'node__layout_builder__layout'] as $table_name) {
    // If the section has a "section_margin_*" style, we can ignore it.
    // It already has a container style selected.
    $query = $connection->select($table_name, 'n')
      ->fields('n', ['entity_id', 'delta', 'layout_builder__layout_section'])
      ->condition('layout_builder__layout_section', '%section_margin_%', 'NOT LIKE');

    $records = $query->execute()->fetchAll();

    \Drupal::messenger()
      ->addMessage($table_name . ' records found (before): ' . count($records));

    // We'll want to collect NIDs for pages we're updating
    // to check against the temp store later.
    $nids = [];

    // @todo Batch this.
    foreach ($records as $record) {
      // Add the entity ID to our update list.
      $nids[$record->entity_id] = $record->entity_id;

      // Unserialize the record and extract the layout settings.
      $stored_data = unserialize($record->layout_builder__layout_section);
      $layout_settings = $stored_data->getLayoutSettings();
      // Add in the 'Normal' container style.
      // We only pulled records that didn't have a container style,
      // so this can simply be appended.
      $layout_settings['layout_builder_styles_style']['section_margin_fixed_width_container'] = 'section_margin_fixed_width_container';
      $stored_data->setLayoutSettings($layout_settings);

      // Insert the updated settings back into the DB.
      $connection->update($table_name)
        ->condition('entity_id', $record->entity_id, '=')
        ->condition('delta', $record->delta, '=')
        ->fields([
          'layout_builder__layout_section' => serialize($stored_data),
        ])
        ->execute();
    }
    $query = $connection->select($table_name, 'n')
      ->fields('n', ['entity_id', 'delta', 'layout_builder__layout_section'])
      ->condition('layout_builder__layout_section', '%section_margin_%', 'NOT LIKE');

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage($table_name . ' records found (after): ' . $count);
  }

  // If the key_value_expire table doesn't exist, we're done.
  if (!$connection->schema()->tableExists('key_value_expire')) {
    return;
  }

  // Update sections w/no section_margin_ that might be in the temp store.
  $query = $connection->select('key_value_expire', 'kve')
    ->fields('kve', ['name', 'value', 'expire'])
    ->condition('collection', 'tempstore.shared.layout_builder.section_storage.overrides', '=');
  $records = $query->execute()->fetchAll();

  // Create a helper for regex later.
  $nid_matcher = '(' . implode('|', array_keys($nids)) . ')';

  foreach ($records as $record) {
    $replaced = FALSE;

    // If it's not in our list of updated nodes, skip it.
    if (!preg_match("@node\." . $nid_matcher . "\.default\.en@", $record->name)) {
      continue;
    }
    // Unserialize and replace the section in question with our updated one.
    $stored_data = unserialize($record->value);
    /** @var \Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage $section_storage */
    $section_storage = $stored_data->data['section_storage'];
    // Loop through sections in the storage.
    foreach ($section_storage->getSections() as $delta => &$section) {
      $layout_settings = $section->getLayoutSettings();
      // Check if we have any section_margin_ layout builder styles,
      // and skip if we do.
      if (preg_match('@section_margin_@', implode(',', array_keys($layout_settings['layout_builder_styles_style'])))) {
        continue;
      }
      $layout_settings['layout_builder_styles_style']['section_margin_fixed_width_container'] = 'section_margin_fixed_width_container';
      $section->setLayoutSettings($layout_settings);
      $replaced = TRUE;
    }
    // If we didn't update any sections,
    // let's continue without touching the DB.
    if (!$replaced) {
      continue;
    }

    $stored_data->data['section_storage'] = $section_storage;

    // Insert the updated tempstore.
    $connection->update('key_value_expire')
      ->condition('name', $record->name, '=')
      ->condition('expire', $record->expire, '=')
      ->fields([
        'value' => serialize($stored_data),
      ])
      ->execute();
  }
}

/**
 * Redo 9009.
 */
function sitenow_update_9011() {
  sitenow_update_9009();

  // Delete remaining orphans?
  $result = \Drupal::entityQuery('block_content')
    ->condition('type', 'uiowa_people')
    ->execute();
  if ($result) {
    $storage_handler = \Drupal::entityTypeManager()->getStorage('block_content');
    $entities = $storage_handler->loadMultiple($result);
    $storage_handler->delete($entities);
  }
}

/**
 * Update existing uiowa_banner blocks to have a default headline_size style.
 */
function sitenow_update_9012() {
  // @todo check the temp storage
  $db = \Drupal::database();
  $block_storage = \Drupal::entityTypeManager()
    ->getStorage('block_content');

  $section_column = 'layout_builder__layout_section';
  $tables = [
    'node__layout_builder__layout',
    'node_revision__layout_builder__layout',
  ];

  foreach ($tables as $table_name) {
    // Select instances where the section contains a uiowa_banner block.
    $query = $db->select($table_name, 'n')
      ->condition($section_column, '%uiowa_banner%', 'LIKE')
      ->fields('n', ['entity_id', 'revision_id', 'delta', $section_column]);

    $count = $query->countQuery()->execute()->fetchField();

    \Drupal::messenger()
      ->addMessage('Banner block records found: ' . $count);

    $results = $query->execute();

    // Loop through the results.
    foreach ($results as $record) {
      // Unserialize the section field into it's class object.
      /** @var Section $section */
      $section = unserialize($record->layout_builder__layout_section);

      // Loop through the components in the section.
      foreach ($section->getComponents() as &$component) {

        // Limit this to only the uiowa_people block component.
        if ($component->getPluginId() !== 'inline_block:uiowa_banner') {
          continue;
        }

        // Pull the layout builder styles from the component.
        $styles = $component->get('layout_builder_styles_style');
        // Add key for new layout builder style.
        $styles[] = 'headline_large';
        // Set the layout builder styles on the component.
        $component->set('layout_builder_styles_style', $styles);

      }
      // Serialize section component and update section component db record.
      // Replace the old section with our newly created one.
      $db->update($table_name)
        ->condition('revision_id', $record->revision_id)
        ->condition('delta', $record->delta)
        ->fields([
          $section_column => serialize($section),
        ])
        ->execute();
    }

    // Only continue with this section if we have a key_value_expire
    // table to work with.
    if ($db->schema()->tableExists('key_value_expire')) {
      // Check if we have a tempstore of this node.
      // Temp store is saved in the db in the key_value_expire,
      // And holds a serialized blob with the unsaved changes.
      // Might be a better method of accessing this through the Layout Builder API
      // and layoutTempstoreRepository, but have not found it yet.
      $query = $db->select('key_value_expire', 'kve')
        ->fields('kve', ['name', 'value', 'expire'])
        ->condition('collection', 'tempstore.shared.layout_builder.section_storage.overrides', '=')
        ->condition('value', '%uiowa_banner%', 'LIKE');

      $count = $query->countQuery()->execute()->fetchField();

      \Drupal::messenger()
        ->addMessage('Tempstore records found: ' . $count);

      $results = $query
        ->execute();

      foreach ($results as $record) {
        // Unserialize and replace the section in question with our updated one.
        $stored_data = unserialize($record->value);
        /** @var \Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage $section_storage */
        $section_storage = $stored_data->data['section_storage'];

        // Loop through sections in the storage.
        foreach ($section_storage->getSections() as $delta => &$section) {
          // Loop through the components in the section.
          foreach ($section->getComponents() as &$component) {

            // Limit this to only the uiowa_banner block component.
            if ($component->getPluginId() !== 'inline_block:uiowa_banner') {
              continue;
            }

            // Pull the layout builder styles from the component.
            $styles = $component->get('layout_builder_styles_style');
            // Add key for new layout builder style.
            $styles[] = 'headline_large';
            // Set the layout builder styles on the component.
            $component->set('layout_builder_styles_style', $styles);
          }
        }
        $stored_data->data['section_storage'] = $section_storage;

        // Insert the updated tempstore.
        $db->update('key_value_expire')
          ->condition('name', $record->name, '=')
          ->condition('expire', $record->expire, '=')
          ->fields([
            'value' => serialize($stored_data),
          ])
          ->execute();
      }
    }
  }
}

/**
 * Rebuilding permissions after https://github.com/uiowa/uiowa/pull/3776 deployed.
 */
function sitenow_update_9013() {
  // Batch it.
  node_access_rebuild(TRUE);
}

/**
 * Redo 9009.
 */
function sitenow_update_9014() {
  sitenow_update_9009();

  // Delete remaining orphans?
  $result = \Drupal::entityQuery('block_content')
    ->condition('type', 'uiowa_people')
    ->execute();
  if ($result) {
    $storage_handler = \Drupal::entityTypeManager()->getStorage('block_content');
    $entities = $storage_handler->loadMultiple($result);
    $storage_handler->delete($entities);
  }
}
