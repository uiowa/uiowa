<?php

/**
 * @file
 * The sitenow profile cannot contain a hook_install() implementation.
 * @see: https://www.drupal.org/project/drupal/issues/2982052
 */

use Drupal\Core\Config\FileStorage;
use Drupal\user\Entity\User;

/**
 * Update some uiowa_footer settings which are ignored.
 */
function sitenow_update_8001() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uiowa_footer.settings');

  $config
    ->set('login_link', TRUE)
    ->set('custom_menu_2', 'footer-second')
    ->save();
}

/**
 * Delete user login block for uiowa_bootstrap theme.
 */
function sitenow_update_8002() {
  /** @var \Drupal\Core\Entity\EntityStorageInterface $block_storage */
  $block_storage = \Drupal::service('entity_type.manager')->getStorage('block');

  /** @var \Drupal\block\Entity\Block[] $blocks */
  $block = $block_storage->load('uiowa_bootstrap_login');

  if ($block) {
    $block->delete();
  }
}

/**
 * Delete entities related to uievents.
 */
function sitenow_update_8003() {
  $paragraphs = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->loadByProperties(['type' => 'events']);

  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }

  $ids = Drupal::entityQuery('uievents')
    ->execute();
  if (!empty($ids)) {
    $controller = \Drupal::entityManager()->getStorage('uievents');
    $entities = $controller->loadMultiple($ids);
    $controller->delete($entities);
  }
}

/**
 * Delete config_ignore key_value entry.
 */
function sitenow_update_8004() {
  \Drupal::database()->delete('key_value')
    ->condition('collection', 'system.schema')
    ->condition('name', 'config_ignore')
    ->execute();
}

/**
 * Flush all caches so sites pick up the new theme location.
 */
function sitenow_update_8005() {
  drupal_flush_all_caches();
}

/**
 * Deleted.
 */
function sitenow_update_8006() {

}

/**
 * Update existing sites with user 1 info.
 */
function sitenow_update_8007() {
  $user = User::load(1);
  $user->setUsername(uniqid('admin_'));
  $user->setEmail(base64_decode('aXRzLXdlYkB1aW93YS5lZHU='));
  $user->addRole('administrator');
  $user->save();
}

/**
 * Flush all caches so sites pick asset location changes.
 */
function sitenow_update_8008() {
  drupal_flush_all_caches();
}

/**
 * Update sitenow_seo schema version to match uiowa_seo.
 */
function sitenow_update_8009() {
  $schema = Drupal::keyValue('system.schema')->get('uiowa_seo');
  Drupal::keyValue('system.schema')->delete('uiowa_seo');
  Drupal::keyValue('system.schema')->set('sitenow_seo', $schema);
  drupal_flush_all_caches();
}

/**
 * Import config_ignore and split settings so GA is handled correctly.
 */
function sitenow_update_8010() {
  $config_path = DRUPAL_ROOT . '/profiles/custom/sitenow/config/sync/';
  $source = new FileStorage($config_path);

  $config_storage = \Drupal::service('config.storage');
  $config_storage->write('config_ignore.settings', $source->read('config_ignore.settings'));
  $config_storage->write('config_split.config_split.prod', $source->read('config_split.config_split.prod'));
  $config_storage->write('config_split.config_split.stage', $source->read('config_split.config_split.stage'));
  $config_storage->write('config_split.config_split.dev', $source->read('config_split.config_split.dev'));
}

/**
 * Deleted.
 */
function sitenow_update_8011() {

}

/**
 * Update acquia_connector settings.
 */
function sitenow_update_8012() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('acquia_connector.settings');

  if (empty($config->get())) {
    $config_path = DRUPAL_ROOT . '/profiles/custom/sitenow/config/sync/';
    $source = new FileStorage($config_path);

    $config_storage = \Drupal::service('config.storage');
    $config_storage->write('acquia_connector.settings', $source->read('acquia_connector.settings'));
  }
  else {
    $config
      ->set('cron_interval', 180)
      ->set('hide_signup_messages', 1)
      ->save();
  }
}

/**
 * Clear all caches for uiowa_auth legacy redirects to take effect.
 */
function sitenow_update_8013() {
  drupal_flush_all_caches();
}

/**
 * Move all tags values to field_tags.
 */
function sitenow_update_8014(&$sandbox) {
  // Process all nodes that have a filled field_reference.
  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('node')
      ->condition('field_reference', NULL, 'IS NOT NULL')
      ->execute();
    $sandbox['total'] = count($query);
    $sandbox['current'] = 0;
    $sandbox['query'] = $query;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Loop through the same nodes in batches.
  $nodes_per_batch = 25;
  $batch = array_slice($sandbox['query'], $sandbox['current'], $sandbox['current'] + $nodes_per_batch);
  if (empty($batch)) {
    $sandbox['#finished'] = 1;
    return;
  }

  foreach($batch as $nid) {
    $node = \Drupal\node\Entity\Node::load($nid);
    // Get and load taxonomy values from field_reference.
    $terms = $node->get('field_reference')->getValue();
    $tags = [];
    $other_terms = [];
    foreach($terms as $tid) {
      $term = \Drupal\taxonomy\Entity\Term::load($tid['target_id']);
      $bundle = $term->bundle();
      // Split values into tags and others.
      if ($bundle == 'tags') {
        $tags[] = $tid['target_id'];
      }
      else {
        $other_terms[] = $tid['target_id'];
      }
    }
    // Only save if something is changing.
    if (!empty($tags)) {
      // Save field_reference with any remaining terms. Should be hr.uiowa.edu only.
      $node->set('field_reference', $other_terms);
      // Move the tags to field_tags.
      $node->set('field_tags', $tags);
      // Set revision message and save.
      $node->setRevisionLogMessage('Automated Save: Moved terms.');
      $node->save();
    }
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' nodes processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  } else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}


/**
 * Re-save all person nodes.
 */
function sitenow_update_8015(&$sandbox) {
  // Process all nodes that have a filled person.
  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('node')
      ->condition('type','person')
      ->execute();
    $sandbox['total'] = count($query);
    $sandbox['current'] = 0;
    $sandbox['query'] = $query;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Loop through the same nodes in batches.
  $nodes_per_batch = 25;
  $batch = array_slice($sandbox['query'], $sandbox['current'], $sandbox['current'] + $nodes_per_batch);
  if (empty($batch)) {
    $sandbox['#finished'] = 1;
    return;
  }

  foreach($batch as $nid) {
    $node = \Drupal\node\Entity\Node::load($nid);
    if (is_null($node->get('field_person_hide')->value)) {
      $node->set('field_person_hide', FALSE);
      // Set revision message and save.
      $node->setRevisionLogMessage('Automated save');
      $node->save();
    }
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' nodes processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  } else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}
