<?php

/**
 * @file
 * Primary module hooks for Admissions Core module.
 */

use Drupal\admissions_core\AdmissionsCoreInterface;
use Drupal\admissions_core\Entity\AcademicGroups;
use Drupal\admissions_core\Entity\AdmissionsAreaOfStudy;
use Drupal\admissions_core\Entity\AdmissionsCard;
use Drupal\admissions_core\Entity\AdmissionsPerson;
use Drupal\admissions_core\Entity\AdmissionsRequirement;
use Drupal\admissions_core\Entity\StudentProfile;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function admissions_core_entity_bundle_info_alter(array &$bundles) {
  if (isset($bundles['node']['person'])) {
    $bundles['node']['person']['class'] = AdmissionsPerson::class;
  }
  if (isset($bundles['node']['student_profile'])) {
    $bundles['node']['student_profile']['class'] = StudentProfile::class;
  }
  if (isset($bundles['node']['area_of_study'])) {
    $bundles['node']['area_of_study']['class'] = AdmissionsAreaOfStudy::class;
  }
  if (isset($bundles['paragraph']['admissions_requirement'])) {
    $bundles['paragraph']['admissions_requirement']['class'] = AdmissionsRequirement::class;
  }
  if (isset($bundles['paragraph']['admissions_card'])) {
    $bundles['paragraph']['admissions_card']['class'] = AdmissionsCard::class;
  }
  if (isset($bundles['taxonomy_term']['academic_groups'])) {
    $bundles['taxonomy_term']['academic_groups']['class'] = AcademicGroups::class;
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function admissions_core_entity_extra_field_info() {
  $extra = [];

  $extra['taxonomy_term']['community_colleges']['display']['majors_by_tid'] = [
    'label' => t('Majors'),
    'description' => t('Displays majors by taxonomy term'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  $extra['node']['major']['display']['pre_title'] = [
    'label' => t('2plus2 pre-title'),
    'description' => t('Major 2plus2 pre-title'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function admissions_core_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('pre_title')) {
    $build['pre_title'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => [
        'class' => [
          'headline',
          'headline--highlight',
          'headline--uppercase',
          'h5',
        ],
      ],
    ];
    $build['pre_title']['content'] = [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#value' => AdmissionsCoreInterface::TWO_PLUS_TWO_TITLE,
      '#attributes' => [
        'class' => ['headline__heading'],
      ],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function admissions_core_taxonomy_term_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Render view as a field within term's display settings.
  if ($display->getComponent('majors_by_tid')) {
    $build['majors_by_tid'] = [
      '#type' => 'container',
    ];
    $build['majors_by_tid']['headline'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t('Iowa majors available to @name students in 2 Plus 2:', ['@name' => $entity->getName()]),
      '#attributes' => [
        'class' => ['field__label'],
      ],
    ];
    $build['majors_by_tid']['view'] = [
      '#type' => 'view',
      '#name' => 'majors',
      '#display_id' => 'block_majors_by_tid',
      '#embed' => TRUE,
    ];
  }
}

/**
 * Implements hook_entity_presave().
 */
function admissions_core_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'student_profile':
      // Setting the student profile title with the first/last name values.
      $output = $entity->get('field_person_first_name')->value . " " . $entity->get('field_person_last_name')->value;
      $entity->setTitle($output);
      break;

    case 'transfer_tips':
      // Assumes this stays a required field.
      $area_of_study = $entity->field_transfer_tips_aos->entity->title->value;
      // Setting the transfer tips title with the aos field value +
      // transfer tip verbiate.
      $output = $area_of_study . " Transfer Tips";
      $entity->setTitle($output);
      break;

    case 'major':
      // Setting the major title with the Area of Study and Community
      // College field values. Both fields are required.
      $major_aos = $entity->field_major_area_of_study->entity->title->value;
      $major_cc = $entity->field_major_community_college->entity->name->value;
      $output = $major_aos . " at " . $major_cc;
      $entity->setTitle($output);
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function admissions_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_event_series_form':
    case 'node_event_series_edit_form':
    case 'node_major_form':
    case 'node_major_edit_form':
      // Set form defaults if they exist.
      _sitenow_node_form_defaults($form, $form_state);
      break;

    case 'node_student_profile_form':
    case 'node_student_profile_edit_form':
      // Set form defaults if they exist.
      _sitenow_node_form_defaults($form, $form_state);

      if (isset($form['field_student_profile_image'])) {
        // Create node_student_profile_image group in the advanced container.
        $form['node_student_profile_image'] = [
          '#type' => 'details',
          '#title' => $form["field_student_profile_image"]["widget"]["#title"],
          '#group' => 'advanced',
          '#attributes' => [
            'class' => ['node-form-image'],
          ],
          '#attached' => [
            'library' => ['node/drupal.node'],
          ],
          '#weight' => -10,
          '#optional' => TRUE,
          '#open' => FALSE,
        ];
        // Set field_student_profile_image to node_student_profile_image group.
        $form['field_student_profile_image']['#group'] = 'node_student_profile_image';
      }
      break;

    case 'fragment_stat_edit_form':
    case 'fragment_stat_add_form':
      $form['#attached']['library'][] = 'admissions_core/admin';
      break;

    case 'node_area_of_study_form':
    case 'node_area_of_study_edit_form':
      _sitenow_node_form_defaults($form, $form_state);
      if (isset($form['field_area_of_study_link_direct'])) {
        $form['field_area_of_study_link_direct']['#states'] = [
          'visible' => [
            ':input[name="field_area_of_study_source_link[0][uri]"]' => ['filled' => TRUE],
          ],
        ];
      }
      $form['field_area_of_study_majors']['#states'] = [
        'visible' => [
          'input[name="field_area_of_study_program_type[major]"]' => ['checked' => TRUE],
        ],
      ];
      $form["field_area_of_study_certificates"]['#states'] = [
        'visible' => [
          'input[name="field_area_of_study_program_type[certificate]"]' => ['checked' => TRUE],
        ],
      ];
      $form["field_area_of_study_minors"]['#states'] = [
        'visible' => [
          'input[name="field_area_of_study_program_type[minor]"]' => ['checked' => TRUE],
        ],
      ];
      $form["field_area_of_study_preprof"]['#states'] = [
        'visible' => [
          'input[name="field_area_of_study_program_type[preprofessional_program]"]' => ['checked' => TRUE],
        ],
      ];
      $form["field_area_of_study_online"]['#states'] = [
        'visible' => [
          'input[name="field_area_of_study_program_type[online_offcampus_program]"]' => ['checked' => TRUE],
        ],
      ];
      $form['field_area_of_study_teaching_txt']['#states'] = [
        'visible' => [
          'input[name="field_area_of_study_teaching[teaching_licensure]"]' => ['checked' => TRUE],
        ],
      ];
      $form['field_area_of_study_select_txt']['#states'] = [
        'visible' => [
          'input[name="field_area_of_study_selective[selective_admission]"]' => ['checked' => TRUE],
        ],
      ];
      $form['field_area_of_study_four_txt']['#states'] = [
        'visible' => [
          'input[name="field_area_of_study_four_year[four_year_graduate_plan]"]' => ['checked' => TRUE],
        ],
      ];
      $form['field_area_of_study_comp_txt']['#states'] = [
        'visible' => [
          'input[name="field_area_of_study_competitive[competitive_admission]"]' => ['checked' => TRUE],
        ],
      ];
      break;

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function admissions_core_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->get('view');
  if ($view->id() === 'counselors') {
    if ($view->current_display === 'block_counselors') {
      $form["territory"]["#options"]["All"] = t("- All -");
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function admissions_core_node_delete(Node $node) {
  // Used on Admissions counselors map and event series blocks.
  if ($node->getType() === 'person' || $node->getType() === 'event') {
    $tags = ['node_type:' . $node->getType()];
    Cache::invalidateTags($tags);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function admissions_core_node_presave(Node $node) {
  // Used on Admissions counselors map and event series blocks.
  if ($node->getType() === 'person' || $node->getType() === 'event') {
    $tags = ['node_type:' . $node->getType()];
    Cache::invalidateTags($tags);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function admissions_core_preprocess_entity_print(&$variables) {
  // Change the default PDF title from "View PDF" to the node title.
  if ($variables['theme_hook_original'] === 'entity_print__node__area_of_study'
    || $variables['theme_hook_original'] === 'entity_print__node__page') {
    $node = $variables['content'][0]['#node'] ?? $variables['content'][0][0]['#node'] ?? NULL;

    if ($node) {
      $variables['title'] = t('@title', [
        '@title' => $node->getTitle(),
      ]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function admissions_core_preprocess_field(&$variables) {
  switch ($variables['element']['#field_name']) {
    case 'field_area_of_study_subprogram':
      $node = $variables["element"]["#object"];
      // If Subprogram Type is selected, use as label.
      if (!$node->get('field_area_of_study_sub_type')->isEmpty()) {
        $field_name = 'field_area_of_study_sub_type';
        $field_definition = $node->getFieldDefinition($field_name)->getFieldStorageDefinition();
        $field_allowed_options = options_allowed_values($field_definition, $node);
        $field_value_label = $field_allowed_options[$node->{$field_name}->value];
        $variables['label'] = $field_value_label;
      }
      break;

    case 'field_area_of_study_link':
      uiowa_core_set_field_label_icon($variables, 'fa-link');
      uiowa_core_set_title_attributes($variables, [
        'h4',
        'headline',
        'headline--serif',
        'headline--underline',
      ]);
      $node = $variables['element']['#object'];
      // Add field_area_of_study_college to the end of field_area_of_study_link.
      if ($node->hasField('field_area_of_study_college') && !$node->get('field_area_of_study_college')->isEmpty()) {
        $existing_links = [];
        foreach (Element::children($variables['items']) as $delta) {
          $existing_links[$delta] = $variables['items'][$delta];
          unset($variables['items'][$delta]);
        }
        $colleges = $node->field_area_of_study_college->view();
        $college_count = count(Element::children($colleges));
        foreach (Element::children($colleges) as $college_delta) {
          $variables['items'][$college_delta]['content'] = $colleges[$college_delta];
          $variables['items'][$college_delta]['attributes'] = !empty($colleges['#items'][$college_delta]->_attributes) ? new Attribute($colleges['#items'][$college_delta]->_attributes) : new Attribute();
        }
        foreach ($existing_links as $delta => $link) {
          $variables['items'][$delta + $college_count] = $link;
        }
      }
      break;

    case 'field_area_of_study_why':
      $variables['label'] = t('Why Iowa?');
      break;

    case 'field_area_of_study_scholarship':
      uiowa_core_set_field_label_icon($variables, 'fa-link');
      uiowa_core_set_title_attributes($variables, [
        'h4',
        'headline',
        'headline--serif',
        'headline--underline',
      ]);
      break;

    case 'field_cc_contact_info':
      // Prepend community college term name to contact info field label.
      $term = $variables['element']['#object'];
      $name = $term->getName();
      $variables['label'] = t('@name Contact Information', ['@name' => $name]);
      break;

    case 'field_event_series_button_link':
      uiowa_core_set_attributes($variables, [
        'bttn',
        'bttn--primary',
        'bttn--full',
      ]);
      break;

    case 'field_event_series_summary':
      uiowa_core_set_field_label_icon($variables, 'fa-clock');
      break;

    case 'field_area_of_study_stories':
      uiowa_core_set_attributes($variables, [
        'list-container__inner',
      ]);
      break;

    case 'field_event_series_button_link':
      uiowa_core_set_attributes($variables, [
        'bttn',
        'bttn--primary',
        'bttn--full',
      ]);
      break;

    case 'field_event_series_summary':
      uiowa_core_set_field_label_icon($variables, 'fa-clock');
      break;

    case 'field_major_cc_checkpoints':
      $term = $variables['element']['#object'];
      $name = $term->field_major_community_college->entity->name->value;
      $variables['label'] = t('@name checkpoints', ['@name' => $name]);

      uiowa_core_set_title_attributes($variables, [
        'h4',
        'headline',
        'headline--serif',
      ]);
      break;

    case 'field_major_responsibilities':
    case 'field_major_uiowa_checkpoints':
      uiowa_core_set_title_attributes($variables, [
        'h4',
        'headline',
        'headline--serif',
      ]);
      break;

    case 'field_student_profile_major':
      uiowa_core_set_field_icon($variables, 'fa-book');
      break;

    case 'field_college_website':
      uiowa_core_set_field_icon($variables, 'fa-desktop fas');
      break;

    case 'field_person_hometown':
      if ($variables['element']['#bundle'] === 'student_profile') {
        // Check if this is the 'field_person_hometown' field.
        // Get the raw field values.
        $hometown = $variables['element']['#object']->field_person_hometown->getValue();
        $state = $variables['element']['#object']->field_student_profile_state->getValue();
        $country = $variables['element']['#object']->field_student_profile_country->getValue();

        $home_location = [];

        // Add hometown, if it exists.
        if (!empty($hometown)) {
          $home_location[] = $hometown[0]['value'];
        }

        // Check the country.
        // Add the state if it exists and the country is the US.
        // Otherwise, add the country.
        $countryManager = \Drupal::service('country_manager');
        if (!empty($country)) {
          $country_code = $country[0]['value'] ?? NULL;
          if ($country_code === 'US' && !empty($state)) {
            $home_location[] = $state[0]['value'];
          }
          else {
            $country_value = NULL;
            $country_list = $countryManager->getList();
            if ($country_code !== NULL && isset($country_list[$country_code])) {
              $country_value = $country_list[$country_code]->__toString();
            }
            if ($country_value !== NULL) {
              $home_location[] = $country_value;
            }
          }
        }
        elseif (!empty($state)) {
          $home_location[] = $state[0]['value'];
        }

        // Update the field value with the new location.
        if (!empty($home_location)) {
          $variables['items'][0]['content'] = implode(', ', $home_location);
        }
      }
      if ($variables['element']['#entity_type'] == 'node' && $variables['element']['#bundle'] == 'student_profile') {
        uiowa_core_set_field_icon($variables, 'fa-map-marker-alt');
      }
      break;

    case 'title':

      break;
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function admissions_core_preprocess_field__node__title(&$variables) {
  if ($variables['element']['#bundle'] === 'major') {
    $variables['pre_title'] = AdmissionsCoreInterface::TWO_PLUS_TWO_TITLE;
    // Remove existing page title classes.
    $variables['attributes']['class'] = [];
    // Add new page title classes.
    uiowa_core_set_attributes($variables, [
      'headline--uppercase',
      'headline--negative',
    ]);
  }
  if ($variables['element']['#bundle'] === 'area_of_study') {
    // Remove existing page title classes.
    $variables['attributes']['class'] = [];
    // Add new page title classes.
    uiowa_core_set_attributes($variables, [
      'headline--uppercase',
      'headline--negative',
      'headline--highlight',
    ]);
  }
  if ($variables['element']['#bundle'] === 'student_profile') {
    // Remove existing page title classes.
    $variables['attributes']['class'] = [];
    // Add new page title classes.
    uiowa_core_set_attributes($variables, [
      'text-align-center',
      'headline headline--serif',
      'headline--highlight',
    ]);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function admissions_core_preprocess_block(&$variables) {
  switch ($variables['plugin_id']) {
    case 'views_block:student_card-block_student_grid':
      $variables['#attached']['library'][] = 'admissions_core/student-profile';
      uiowa_core_set_attributes($variables, [
        'grid--threecol--33-34-33',
        'bg--gray',
        'block-padding--all',
      ]);
      break;

    case 'admissions_core_event_series_events':
      uiowa_core_set_title_attributes($variables, [
        'h4',
        'headline',
        'headline--serif',
        'headline--underline',
      ]);
      break;

    case 'field_block:node:student_profile:field_person_hometown':
      uiowa_core_set_attributes($variables, ['block-margin__default--removed']);
      break;

    case 'field_block:node:area_of_study:field_area_of_study_stories':
      uiowa_core_set_attributes($variables, ['list-container']);
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function admissions_core_preprocess_layout(&$variables) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
  $layout = $variables['layout'];

  // Process the header layout.
  if ($layout->id() === 'layout_header') {
    $node = \Drupal::routeMatch()->getParameter('node') ?? \Drupal::routeMatch()->getParameter('node_preview');
    if ($node instanceof NodeInterface) {
      if (in_array($node->getType(), [
        'area_of_study',
        'student_profile',
        'event_series',
      ])) {
        if (!isset($variables['banner_attributes'])) {
          $variables['banner_settings'] = [];
        }
      }
      switch ($node->getType()) {
        case 'area_of_study':

          if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {

            // Set the featured image display.
            $variables['featured_image_display'] = 'small';

            // Set banner defaults.
            $variables['banner_settings']['transparent'] = TRUE;
            $variables['banner_settings']['horizontal_align'] = 'center';
            $variables['banner_settings']['vertical_align'] = 'center';
          }
          break;

        case 'event_series':
          if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {

            // Set the featured image display.
            $variables['featured_image_display'] = 'medium';
          }
          break;

        case 'major':
          if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {

            // Set the featured image display.
            $variables['featured_image_display'] = 'small';

            // Set banner defaults.
            $variables['banner_settings']['horizontal_align'] = 'center';
            $variables['banner_settings']['vertical_align'] = 'center';
          }
          break;

        case 'student_profile':
          if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {

            // Set the featured image display.
            $variables['featured_image_display'] = 'large';

            // Set banner defaults.
            $variables['banner_settings']['transparent'] = TRUE;
            $variables['banner_settings']['horizontal_align'] = 'center';
            $variables['banner_settings']['vertical_align'] = 'bottom';
          }
          break;

      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function admissions_core_theme($existing, $type, $theme, $path) {
  return [
    'block__views_block__areas_of_study_block_block_information' => [
      'template' => 'block--views-block--areas-of-study-block-block-information',
      'base hook' => 'block',
    ],
    'block__views_block__student_card_block_student_grid' => [
      'template' => 'block--views-block--student-card-block-student-grid',
      'base hook' => 'block',
    ],
    'node__major__teaser' => [
      'template' => 'node--major--teaser',
      'base hook' => 'node',
    ],
    'node__scholarship__teaser' => [
      'template' => 'node--scholarship--teaser',
      'base hook' => 'node',
    ],
    'node__transfer_tips__full' => [
      'template' => 'node--transfer-tips--full',
      'base hook' => 'node',
    ],
    'node__transfer_tips__teaser' => [
      'template' => 'node--transfer-tips--teaser',
      'base hook' => 'node',
    ],
    'views_view_unformatted__scholarships__block_scholarships' => [
      'template' => 'views-view-unformatted--scholarships--block-scholarships',
      'base hook' => 'view',
    ],
    'views_view_unformatted__transfer_tips_list__block_transfer_tips' => [
      'template' => 'views-view-unformatted--transfer-tips-list--block-transfer-tips',
      'base hook' => 'view',
    ],
    'field__node__field_area_of_study_stat' => [
      'template' => 'field--node--field-area-of-study-stat',
      'base hook' => 'field',
    ],
    'field__node__field_area_of_study_subtitle__area_of_study__default' => [
      'template' => 'field--node--field-area-of-study-subtitle--area-of-study--default',
      'base hook' => 'field',
    ],
    'field__node__field_major_area_of_study__major' => [
      'template' => 'field--node--field-major-area-of-study--major',
      'base hook' => 'field',
    ],
    'field__node__field_transfer_tips_aos__transfer_tips' => [
      'template' => 'field--node--field-transfer-tips-aos--transfer-tips',
      'base hook' => 'field',
    ],
    'field__node__field_student_profile_blurb__student_profile__default' => [
      'template' => 'field--node--field-student-profile-blurb--student-profile--default',
      'base hook' => 'field',
    ],
    'fragment__stat' => [
      'template' => 'fragment--stat',
      'base hook' => 'fragment',
    ],
    'paragraph__admissions_card__default' => [
      'template' => 'paragraph--admissions-card--default',
      'base hook' => 'paragraph',
    ],
    'entity_print__node__area_of_study' => [
      'template' => 'entity-print--node--area-of-study',
      'base hook' => 'entity_print',
    ],
    'node__area_of_study__pdf' => [
      'template' => 'node--area-of-study--pdf',
      'base hook' => 'node',
    ],
    'node__page__pdf' => [
      'template' => 'node--page--pdf',
      'base hook' => 'node',
    ],
    'entity_print__node__page' => [
      'template' => 'entity-print--node--page',
      'base hook' => 'entity_print',
    ],
    'page__kiosk' => [
      'template' => 'page--kiosk',
      'base hook' => 'page',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function admissions_core_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  switch ($variables["element"]["#field_name"]) {
    case 'field_area_of_study_career':
    case 'field_area_of_study_opportunity':
    case 'field_area_of_study_why':
    case 'field_area_of_study_requirement':
    case 'field_area_of_study_course_work':
      $suggestions[] = 'field__bold_headline_label';
      break;

    case 'field_person_territory':
      $suggestions[] = 'field__comma_separated';
      break;
  }
}

/**
 * Implements hook_views_pre_view().
 */
function admissions_core_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Prevent taxonomy term view from executing on community colleges vocabulary.
  // Results are instead rendered in an extra field in
  // admissions_core_taxonomy_term_view().
  if ($view->id() === 'taxonomy_term') {
    if (\Drupal::routeMatch()
      ->getRouteName() === 'entity.taxonomy_term.canonical' &&
      $page_term_id = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
      $term = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($page_term_id);
      if ($term->bundle() === 'community_colleges') {
        // Trick Views into not executing the view.
        $view->executed = TRUE;
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function admissions_core_views_pre_render(ViewExecutable $view) {
  if ($view->id() === 'student_card') {
    if (isset($view->element['headline']['#headline']) && !empty($view->element['headline']['#headline'])) {
      $headline_markup = [
        '#markup' => '<a href="/student-profiles">' . $view->element['headline']['#headline'] . '</a>',
      ];
      $view->element['headline']['#headline'] = $headline_markup;
    }
  }
  if ($view->id() === 'counselors') {
    switch ($view->current_display) {
      case 'block_counselors':
      case 'page_counselors':
        $view->element['#attached']['library'][] = 'admissions_core/person';
        break;
    }
  }
  if ($view->id() === 'areas_of_study') {
    $view->element['#attached']['library'][] = 'uids_base/stat';
    $view->element['#attached']['library'][] = 'uids_base/twocol';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function admissions_core_preprocess_node(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    $node = $variables["node"];
    switch ($node->getType()) {

      case 'area_of_study':
        $variables['#attached']['library'][] = 'admissions_core/area-of-study';
        break;

      case 'person':
        $variables['#attached']['library'][] = 'admissions_core/person';
        break;

      case 'major':

        switch ($variables['view_mode']) {
          case 'teaser':
            // Use AoS reference as title for 2plus2 major teasers.
            if ($node->hasField('field_major_area_of_study') && $major = $node->field_major_area_of_study->entity->title->value) {
              $variables['label'] = t('@major', [
                '@major' => $major,
              ]);
            }
            break;
        }
        break;

      case 'transfer_tips':
        // Check if we have any major (2 plus 2) content pieces
        // that reference the transfer tip's area of study.
        $area_of_study_id = $node->field_transfer_tips_aos->target_id;
        $query = \Drupal::entityQuery('node')
          ->condition('type', 'major')
          ->condition('status', 1)
          ->condition('field_major_area_of_study', $area_of_study_id, '=');
        // We only really need to know if there areas of study,
        // and not which or how many, because the link will just be
        // based on the aos id.
        $count = $query->count()->execute();
        if ($count > 0) {
          // Get the link to the 2 Plus 2 community college aggregator page
          // using area of study title.
          $area_of_study_title = Node::load($area_of_study_id)->getTitle();
          $slug = \Drupal::service('pathauto.alias_cleaner')->cleanString($area_of_study_title);
          $url = \Drupal::service('path_alias.manager')->getAliasByPath(AdmissionsCoreInterface::TWO_PLUS_TWO_PATH . $slug);
          // We have the Transfer Tips title, so let's just edit that
          // rather than needing to do more querying and loading.
          $title = $node->getTitle();
          $title = str_replace('Transfer Tips', '2 Plus 2 Plan', $title);
          $variables['two_plus_two'] = [
            'title' => $title,
            'url' => $url,
          ];
        }
        break;
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function admissions_core_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $id = $view->storage->id();
  switch ($id) {
    case 'academic_groups_block':
    case 'academic_groups_taxonomy_term':
      $variables['attributes']['class'][] = 'grid--threecol--33-34-33';
      break;

    case 'areas_of_study':
      $variables['#attached']['library'][] = 'admissions_core/area-of-study';
      $variables['#attached']['library'][] = 'uids_base/view-bef';
      break;

    case 'areas_of_study_kiosk':
      $variables['#attached']['library'][] = 'admissions_core/print_js';
      $variables['#attached']['library'][] = 'admissions_core/area_of_study_kiosk';
      break;

    case 'colleges_taxonomy_term':
      $variables['#attached']['library'][] = 'uids_base/view-taxonomy-term-colleges';
      break;

    case 'majors':
      if ($view->current_display === 'two_plus_two_majors') {
        // Set the page title meta using the view title, otherwise
        // the plaintext view token won't get replaced.
        $title = trim($view->getTitle());
        \Drupal::routeMatch()->getRouteObject()->setDefault('_title_callback', function () use ($title) {
          // Don't change the title if the page was not found.
          return ($title === 'Page not found') ? $title : '2 Plus 2 Plan in ' . $title;
        });
      }
      break;

    case 'taxonomy_term':
      unset($variables['feed_icons']);
      break;
  }
}

/**
 * Implements hook_views_query_alter().
 */
function admissions_core_views_query_alter($view, $query) {
  // @todo Remove after https://www.drupal.org/project/drupal/issues/672606
  //   is resolved. Certain queries need specific overrides.
  //   Core Views behavior fails when the parameters contain punctuation. This
  //   alters the query before it runs, fixing the known instances.
  if ($view->id() === 'majors' && $view->current_display === 'two_plus_two_majors') {
    $value = $query->where[0]['conditions'][0]['value'];
    // Check our overrides and update the query accordingly.
    if (in_array($value, array_keys(AdmissionsCoreInterface::AOS_QUERY_OVERRIDES))) {
      $query->where[0]['conditions'][0]['value'] = AdmissionsCoreInterface::AOS_QUERY_OVERRIDES[$value];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function admissions_core_preprocess_views_view_field(&$variables) {
  if (isset($variables['view'])) {
    $id = $variables['view']->id();
    switch ($id) {
      case 'areas_of_study':
        if ($variables['view']->current_display === 'areas_of_study') {
          if (isset($variables['view']->field) && $variables['field']->realField === 'nothing') {
            $nid = $variables['row']->_entity->get('nid')->value;
            $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
            $markup = '';
            // For each program type, load the value(s) and string them
            // together for the view result.
            $degrees = [];
            $degree_options = '';
            foreach ($node->get('field_area_of_study_majors') as $paragraph) {
              if ($paragraph->entity->getType() === 'degree') {
                $paragraph_item = $paragraph->entity;
                if (!empty($paragraph_item->field_degree_abbreviation)) {
                  $degrees[] = $paragraph_item->field_degree_abbreviation->value;
                }
              }
            }
            $degrees = array_unique($degrees);
            foreach ($degrees as $item) {
              $degree_options .= $item . ', ';
            }
            if (!empty($degree_options)) {
              $markup .= $degree_options;
            }
            // AoS Program Type text fields.
            $fields = [
              'Minor' => 'field_area_of_study_minors',
              'Certificate' => 'field_area_of_study_certificates',
              'Online Option' => 'field_area_of_study_online',
            ];
            foreach ($fields as $label => $field) {
              $value = $node->get($field)->value;
              if ($value) {
                $markup .= $label . ', ';
              }
            }
            $markup = trim($markup, ', ');
            $markup = '<div class="degree-options">' . $markup . '</div>';
            if (!empty($markup)) {
              $variables['output'] = [
                '#markup' => $markup,
              ];
            }
          }
        }
        break;

      case 'areas_of_study_kiosk':

        if (isset($variables['view']->field) && $variables['field']->realField === 'nothing' && $variables['field']->options['id'] === 'nothing_1') {
          $nid = $variables['row']->_entity->get('nid')->value;
          $variables['output'] = [
            '#type' => 'checkbox',
            '#attributes' => [
              'value' => $nid,
            ],
          ];
        }
        break;

      case 'majors':
        // If we're on our available majors views page,
        // wrap the displayed value in the relevant link.
        if ($variables['view']->current_display === 'available_majors' || $variables['view']->current_display === 'block_majors') {
          $title = $variables['row']->node_field_data_title;
          // Construct our path by removing slashes which will be handled
          // in our query override, and replacing spaces by dashes.
          $href = str_replace([',', ' '], ['', '-'], strtolower($title));
          $href = str_replace('/', '', $href);
          $href = AdmissionsCoreInterface::TWO_PLUS_TWO_PATH . $href;
          $variables['output'] = ['#markup' => "<a href='{$href}'>{$title}</a>"];
        }
        break;

    }
  }

  if (isset($variables['view']) && ($variables['view']->id() === 'areas_of_study') && ($variables['view']->current_display === 'areas_of_study')) {
    if (isset($variables['view']->field) && $variables['field']->realField === 'nothing') {
      $nid = $variables["row"]->_entity->get('nid')->value;
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      $markup = '';
      // For each program type, load the value(s) and string them
      // together for the view result.
      $degrees = [];
      $degree_options = '';
      foreach ($node->get('field_area_of_study_majors') as $paragraph) {
        if ($paragraph->entity->getType() === 'degree') {
          $paragraph_item = $paragraph->entity;
          if (!empty($paragraph_item->field_degree_abbreviation)) {
            $degrees[] = $paragraph_item->field_degree_abbreviation->value;
          }
        }
      }
      $degrees = array_unique($degrees);
      foreach ($degrees as $item) {
        $degree_options .= $item . ', ';
      }
      if (!empty($degree_options)) {
        $markup .= $degree_options;
      }
      // AoS Program Type text fields.
      $fields = [
        'Minor' => 'field_area_of_study_minors',
        'Certificate' => 'field_area_of_study_certificates',
        'Online Option' => 'field_area_of_study_online',
      ];
      foreach ($fields as $label => $field) {
        $value = $node->get($field)->value;
        if ($value) {
          $markup .= $label . ', ';
        }
      }
      $markup = trim($markup, ', ');
      $markup = '<div class="degree-options">' . $markup . '</div>';
      if (!empty($markup)) {
        $variables['output'] = [
          '#markup' => $markup,
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function admissions_core_preprocess_views_view_unformatted(&$variables) {
  $view = $variables['view'];
  if (in_array($view->current_display, [
    'block_student_card',
    'student_profile_page',
  ])) {
    $lb_styles = $view?->display_handler
      ?->getOption('layout_builder_styles') ?? [];

    foreach ($variables['rows'] as &$row_build) {
      if ($view->current_display === 'block_student_card') {
        if (!isset($row_build['content']['#hide_fields'])) {
          $row_build['content']['#hide_fields'] = [];
        }
        $row_build['content']['#hide_fields'][] = 'field_student_profile_blurb';

        if (!is_null($lb_styles) && in_array('list_format_list', $lb_styles)) {
          if (!isset($row_build['content']['#override_styles'])) {
            $row_build['content']['#overrides_styles'] = [];
          }
          $row_build['content']['#override_styles']['card_media_position'] = 'card--layout-left';
          $row_build['content']['#override_styles']['media_size'] = 'media--small';
          $row_build['content']['#override_styles']['border'] = 'borderless';
        }
      }
      elseif ($view->current_display === 'student_profile_page') {
        $row_build['content']['#content']['spacer'] = [
          '#markup' => '<hr class="element--spacer-gold">',
        ];
      }
    }
  }
}

/**
 * Implements hook_allowed_values_function().
 */
function admissions_core_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  // Available degree abbreviations.
  // Can be moved to store in a config file later.
  $options = [
    'AuD' => 'AuD',
    'BA' => 'BA',
    'BAS' => 'BAS',
    'BBA' => 'BBA',
    'BFA' => 'BFA',
    'BM' => 'BM',
    'BS' => 'BS',
    'BSE' => 'BSE',
    'BSN' => 'BSN',
    'DDS' => 'DDS',
    'DNP' => 'DNP',
    'EdD' => 'EdD',
    'JD' => 'JD',
    'LLM' => 'LLM',
    'MA' => 'MA',
    'MAc' => 'MAc',
    'MAT' => 'MAT',
    'MCA' => 'MCA',
    'MCS' => 'MCS',
    'MFA' => 'MFA',
    'MHA' => 'MHA',
    'MPH' => 'MPH',
    'MS' => 'MS',
    'MSL' => 'MSL',
    'PhD' => 'PhD',
    'PHR' => 'PHR',
    'SJD' => 'SJD',
  ];
  return $options;
}

/**
 * Added allowed values function for AoS Subprogram type.
 */
function admissions_core_subprogram_type_options(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [
    'areas_of_emphasis' => 'Areas of Emphasis',
    'areas_of_specialization' => 'Areas of Specialization',
    'focus_areas' => 'Focus Areas',
    'interest_areas' => 'Interest Areas',
    'tracks' => 'Tracks',
    'concentrations' => 'Concentrations',
  ];
  return $options;
}
