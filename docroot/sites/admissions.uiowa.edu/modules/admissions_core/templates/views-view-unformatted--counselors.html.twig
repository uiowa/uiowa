{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{#
/**
 * @file
 * Default theme implementation to display a view of unformatted rows.
 *
 * Available variables:
 * - title: The title of this group of rows. May be empty.
 * - rows: A list of the view's row items.
 *   - attributes: The row's HTML attributes.
 *   - content: The row's content.
 * - view: The view object.
 * - default_row_class: A flag indicating whether default classes should be
 *   used on rows.
 *
 * @see template_preprocess_views_view_unformatted()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('uids_base/person') }}
{% if title %}
  <h3>{{ title }}</h3>
{% endif %}
{% for key,row in rows %}
  {% set row_classes = [
    default_row_class ? 'views-row',
  ] %}
  <div{{ row.attributes.addClass(row_classes) }}>

    {% set media_attributes = media_attributes ?: create_attribute() %}

    {%
      set classes = [
      'card--list',
      'card--person-teaser',
      'card--media-left',
      'media--border',
      'card--centered-left',
      'card--alignment-left'
    ]
    %}

    {% set person_card_view = {
      'attributes': attributes.addClass(classes),
      'card_title': view.style_plugin.getField(key, 'title'),
      'card_image': view.style_plugin.getField(key, 'field_image'),
      'card_tag': view.style_plugin.getField(key, 'field_person_email'),
      'card_text': view.style_plugin.getField(key, 'field_person_territory'),
      'card_subtitle': view.style_plugin.getField(key, 'field_person_position'),
      'person_phone': view.style_plugin.getField(key, 'field_person_phone'),
      'person_website': view.style_plugin.getField(key, 'field_person_website'),
      'person_education': view.style_plugin.getField(key, 'field_person_education'),
      'person_hometown': view.style_plugin.getField(key, 'field_person_hometown'),
      'person_contact': view.style_plugin.getField(key, 'field_person_contact_information'),
      'media_attributes': media_attributes.addClass('media--circle card__media--small card__media'),
    } %}

    {% embed '@uids_base/uids/card.html.twig' with person_card_view only %}

      {% block card_img %}
        {% if card_image|striptags('<img><picture>')|trim is not empty %}
          {{ parent() }}
        {% endif %}
      {% endblock %}

      {% block card_subtitle %}
        {% if card_subtitle|striptags|trim is not empty %}
          <div class="card__subtitle">{{ card_subtitle }}</div>
        {% endif %}
      {% endblock %}

      {% block card_tag %}
        {% if card_tag|striptags|trim is not empty %}
           <div class="card__date"><span class="fas fa-envelope"></span> {{ card_tag }}</div>
        {% endif %}
        {% if person_phone|striptags|trim is not empty %}
          <div class="card__date"><span class="fas fa-phone"></span> {{ person_phone }}</div>
        {% endif %}
        {% if person_hometown|striptags|trim is not empty %}
          <div class="card__date"><span class="fas fa-globe-americas"></span> {{ person_hometown }}</div>
        {% endif %}
        {% if person_website|striptags|trim is not empty %}
          <div class="card__date"><span class="fas fa-desktop"></span> {{ person_website }}</div>
        {% endif %}
        {% if person_education|striptags|trim is not empty %}
          <div class="card__date"><span class="fas fa-university"></span> {{ person_education }}</div>
        {% endif %}
        {% if person_contact|striptags|trim is not empty %}
          <div class="card__date"><span class="fas fa-map-marker"></span> {{ person_contact }}</div>
        {% endif %}
      {% endblock %}

      {% block card_content %}
        {% if card_text is not empty %}
          <p class="card__description"><strong>Territory:</strong> {{ card_text }}</p>
        {% endif %}
      {% endblock %}

    {% endembed %}
  </div>
{% endfor %}




