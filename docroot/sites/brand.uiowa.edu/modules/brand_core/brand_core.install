<?php

/**
 * @file
 * Install, update and uninstall functions for the brand_core module.
 */

use Drupal\brand_core\Controller\LockupController;
use Drupal\Core\Config\FileStorage;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * Populate organization terms.
 */
function brand_core_update_8001() {
  // Obtain configuration from yaml files.
  $config_path = DRUPAL_ROOT . '/../config/brand.uiowa.edu/';
  $source = new FileStorage($config_path);

  // Obtain the storage manager for vocabularies.
  // Create a new vocabulary from the yaml configuration and save.
  \Drupal::entityManager()->getStorage('taxonomy_vocabulary')
    ->create($source->read('taxonomy.vocabulary.orgs'))
    ->save();

  $terms = [
    "Athletics",
    "Carver College of Medicine",
    "Center for Disabilities and Development",
    "College of Dentistry",
    "College of Education",
    "College of Engineering",
    "College of Law",
    "College of Liberal Arts and Sciences",
    "College of Nursing",
    "College of Pharmacy",
    "College of Public Health",
    "Dance Marathon",
    "Division of Continuing Education",
    "Division of Student Life",
    "Graduate College",
    "Human Resources",
    "Information Technology Services",
    "Institute of Clinical and Translational Sciences",
    "Office of the President",
    "Office of the Provost",
    "Tippie College of Business",
    "University College",
    "University Hygienic Lab",
    "University Libraries",
    "VP Finance and Operations",
    "VP General Counsel",
    "VP Medical Affairs",
    "VP Research",
    "VP Strategic Communication",
  ];
  foreach ($terms as $term) {
    $new_term = Term::create([
      'vid' => 'orgs',
      'name' => $term,
    ]);

    $new_term->enforceIsNew();
    $new_term->save();
  }
}

/**
 * Re-generate all approved lockups.
 */
function brand_core_update_8002(&$sandbox) {
  // Process all nodes that have a filled person.
  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'lockup')
      ->accessCheck()
      ->execute();
    $sandbox['total'] = count($query);
    $sandbox['current'] = 0;
    $sandbox['query'] = $query;

    if (empty($sandbox['total'])) {
      drupal_flush_all_caches();
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Loop through the same nodes in batches.
  $nodes_per_batch = 25;
  $batch = array_slice($sandbox['query'], $sandbox['current'], $sandbox['current'] + $nodes_per_batch);
  if (empty($batch)) {
    drupal_flush_all_caches();
    $sandbox['#finished'] = 1;
    return;
  }

  foreach ($batch as $nid) {
    $node = Node::load($nid);
    $moderation_state = $node->get('moderation_state')->value;
    if ($moderation_state === 'published') {
      $nid = $node->id();
      $lockup_controller = new LockupController(\Drupal::entityTypeManager(), \Drupal::service('file_system'));
      $lockup_controller->generate($nid);
    }
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' nodes processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    drupal_flush_all_caches();
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Flush all caches after changing service constructor.
 */
function brand_core_update_9001() {
  drupal_flush_all_caches();
}

/**
 * Enable symfony_mailer immediately.
 */
function brand_core_update_9002() {
  \Drupal::service('module_installer')->install(['symfony_mailer']);
}
