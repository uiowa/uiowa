<?php

/**
 * @file
 * Primary module hooks for brand_core module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\brand_core\Controller\LockupController;

/**
 * Implements hook_form_alter().
 */
function brand_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_lockup_edit_form':
    case 'node_lockup_form':
      // Attach lockup preview libraries.
      $form['#attached']['library'][] = 'brand_core/lockup-preview';

      // Pass relative module path for use in custom template.
      $module_handler = Drupal::service('module_handler');
      $form["#module_path"] = $module_handler->getModule('brand_core')->getPath();

      // Create node_fields group in the advanced container.
      $form['node_fields'] = [
        '#type' => 'details',
        '#title' => 'Lockup Details',
        '#group' => 'advanced',
        '#attributes' => [
          'class' => ['node-form-fields'],
        ],
        '#attached' => [
          'library' => ['node/drupal.node'],
        ],
        '#weight' => -99,
        '#optional' => FALSE,
        '#open' => TRUE,
      ];
      // Set fields to node_fields group.
      $form['title']['#group'] = 'node_fields';
      $form['title']['widget'][0]['value']['#description'] = FieldFilteredMarkup::create('Used for naming SVG files and lockup node identification.');
      $form['field_lockup_org']['#group'] = 'node_fields';
      $form['field_lockup_primary_unit']['#group'] = 'node_fields';
      $form['field_lockup_sub_unit']['#group'] = 'node_fields';
      $form['field_lockup_p_unit_stacked']['#group'] = 'node_fields';
      $form['field_lockup_s_unit_stacked']['#group'] = 'node_fields';

      $form_object = $form_state->getFormObject();
      $nid = $form_object->getEntity()->id();
      if (isset($nid)) {
        // Query database for relevant revision logs.
        $connection = \Drupal::database();
        $query = $connection->select('node_revision', 'r');
        $query->condition('r.nid', $nid, '=');
        $query->fields('r', [
          'revision_uid',
          'revision_timestamp',
          'revision_log',
        ]);
        $query->orderBy('revision_timestamp', 'DESC');
        $query->range(0, 5);
        $result = $query->execute();

        // Pull the latest revisions (5) together for display.
        $log_items = '';
        foreach ($result as $record) {
          $uid = $record->revision_uid;
          $user = User::load($uid);
          $email = $user->getEmail();
          $username = $user->getUsername();
          $timestamp = $record->revision_timestamp;
          $date = \Drupal::service('date.formatter')->format($timestamp, 'short');
          if (!empty($record->revision_log)) {
            $log_items .= '<strong>' . $date . '</strong> - ' . $username . ' (' . $email . ')<br /><em>' . $record->revision_log . '</em><br /><br />';
          }
          else {
            $log_items .= '<strong>' . $date . '</strong> - ' . $username . ' (' . $email . ')<br /><br />';
          }
        }

        // Render log entries in the revision_information group.
        $form['node_logs'] = [
          '#type' => 'details',
          '#title' => 'Latest Revisions',
          '#group' => 'revision_information',
          '#weight' => 26,
          '#optional' => FALSE,
          '#open' => FALSE,
          '#markup' => $log_items,
        ];
      }

      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = '_brand_core_lockup_submit';
        }
      }

      break;
  }
}

/**
 * Custom submit function for lockup.
 */
function _brand_core_lockup_submit(array $form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $state = $entity->get('moderation_state')->value;
  switch ($state) {
    case 'review':
      $status_text = t('Lockup submitted for approval.');
      break;

    case 'published':
      // Generate Lockup Files if approved/published.
      $nid = $entity->id();
      $lockup_controller = new LockupController();
      $lockup_controller->generate($nid);
      break;
  }
  if (!empty($status_text)) {
    $url = Url::fromRoute('view.lockups.page_lockups');
    $form_state->setRedirectUrl($url);
    \Drupal::messenger()->addStatus($status_text);
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function brand_core_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  // Suggest a template with placeholder lockup preview markup.
  if (isset($variables['form'])) {
    if ($variables["form"]["#form_id"] == 'node_lockup_form' || $variables['form']['#form_id'] == 'node_lockup_edit_form') {
      $suggestions[] = 'node_edit_form__lockup';
    }
  }
}

/**
 * Implements hook_theme().
 */
function brand_core_theme($existing, $type, $theme, $path) {
  return [
    'node_edit_form__lockup' => [
      'template' => 'node-edit-form--lockup',
      'base hook' => 'form',
    ],
    'node__lockup__full' => [
      'template' => 'node--lockup--full',
      'base hook' => 'node',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brand_core_preprocess_node(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {

    $node = $variables["node"];
    $type = $node->getType();
    $nid = $node->id();
    switch ($type) {
      case 'lockup':
        switch ($variables['view_mode']) {
          case 'full':
            $lockup_dir = 'public://lockups/';
            $path = $node->getTitle();
            $name = Html::cleanCssIdentifier($path);
            $state = $node->get('moderation_state')->value;
            if ($state == 'published') {
              $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $nid);
              $variables['content']['download'] = [
                '#markup' => '<div class="my-2"><a class="btn btn-primary" href="' . $alias . '/download">Download <span class="fas fa-cloud-download-alt"></span></a></div>',
                '#weight' => 999,
              ];
            }
            $variables['content']['stacked'] = ['#markup' => file_create_url($lockup_dir . $nid . '/' . $name . '-LockupStacked-BLACK.svg')];
            $variables['content']['horizontal'] = ['#markup' => file_create_url($lockup_dir . $nid . '/' . $name . '-LockupHorizontal-BLACK.svg')];
            break;
        }
        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function brand_core_preprocess_views_view_field(&$variables) {
  if (isset($variables['view']) && ($variables['view']->id() == 'lockups') && ($variables['view']->current_display == 'page_lockups')) {
    if (isset($variables['view']->field) && $variables['field']->realField == 'nothing') {
      $state = $variables["row"]->_entity->get('moderation_state')->value;
      if ($state == 'published') {
        $nid = $variables["row"]->_entity->get('nid')->value;
        $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $nid);
        $variables['output'] = [
          '#markup' => '<a class="btn btn-primary" href="' . $alias . '/download">Download <span class="fas fa-cloud-download-alt"></span></a>',
        ];
      }
    }
  }
}

/**
 * Implements hook_token_info().
 */
function brand_core_token_info() {
  // Need to define a custom token because a prefix is needed..
  $type = [
    'name' => t('Brand'),
    'description' => t('Custom tokens for brand.uiowa.edu'),
  ];
  $node['custom_log'] = [
    'name' => t('Custom Log'),
    'description' => t('Custom node log'),
  ];
  return [
    'types' => ['brand' => $type],
    'tokens' => ['brand' => $node],
  ];
}

/**
 * Implements hook_tokens().
 */
function brand_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  if ($type == 'brand' && !empty($data['node'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Token node:log but with "Edit: " in front.
        case 'custom_log':
          $log = $data['node']->get('revision_log')->value;
          if ($log) {
            // This is what it is all for!
            $replacements[$original] = 'Edit: ' . $log;
          }
          else {
            // Blank if nothing.
            $replacements[$original] = '';
          }

          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_mail().
 */
function brand_core_mail($key, &$message, $params) {
  $message['from'] = \Drupal::config('system.site')->get('mail');
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
  $options = [
    'langcode' => $message['langcode'],
  ];
  switch ($key) {
    case 'lockup-review-digest':
      $message['subject'] = t('Brand Manual - You have @results @label to review', ['@results' => $params['results'], '@label' => $params['label']], $options);
      $message['body'][] = t('You have @results @label to review:', [
        '@results' => $params['results'],
        '@label' => $params['label'],
        '@login' => $params['login'],
      ], $options);
      foreach ($params['lockups'] as $lockup) {
        $message['body'][] = t('- @lockup', ['@lockup' => $lockup], $options);
      }
      $message['body'][] = t('@login', ['@login' => $params['login']], $options);
      break;
  }
}
