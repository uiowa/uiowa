<?php

/**
 * @file
 * Primary module hooks for Uiowa Core module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_extra_field_info().
 */
function classrooms_core_entity_extra_field_info() {
  $extra = [];
  // Building link.
  $extra['node']['room']['display']['field_room_building_link'] = [
    'label' => t('Building Link'),
    'description' => t('A url link to the building.'),
    'weight' => 1,
    'visible' => TRUE,
  ];
  // Adding an extra field to render a link to the campus map.
  $extra['node']['room']['display']['field_room_map_link'] = [
    'label' => t('Map Link'),
    'description' => t('A url link to the campus map.'),
    'weight' => 1,
    'visible' => TRUE,
  ];
  // Adding an extra field to display a section heading.
  $extra['node']['room']['display']['field_room_section_heading'] = [
    'label' => t('Additional Information'),
    'description' => t('A heading for the additional information section.'),
    'weight' => 1,
    'visible' => TRUE,
  ];
  return $extra;
}

/**
 * Implements hook_form_alter().
 */
function classrooms_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_room_form':
    case 'node_room_edit_form':
      _sitenow_node_form_defaults($form, $form_state);

      // These are imported fields that editors should not interact with.
      $form['field_room_name']['#disabled'] = TRUE;
      $form['field_room_features']['#disabled'] = TRUE;
      $form['field_room_technology_features']['#disabled'] = TRUE;
      $form['field_room_responsible_unit']['#disabled'] = TRUE;
      $form['field_room_type']['#disabled'] = TRUE;
      $form['field_room_instruction_category']['#disabled'] = TRUE;
      $form['field_room_max_occupancy']['#disabled'] = TRUE;
      $form['field_room_scheduling_regions']['#disabled'] = TRUE;
      break;

    case 'taxonomy_term_technology_features_form':

      // Disable font awesome extra settings.
      /** @var Drupal\uiowa_core\Access\UiowaCoreAccess $check */
      $check = \Drupal::service('uiowa_core.access_checker');

      /** @var Drupal\Core\Access\AccessResultInterface $access */
      $access = $check->access(\Drupal::currentUser()->getAccount());

      if ($access->isForbidden()) {
        // Disable all settings fields except the style setting.
        foreach (Element::children($form['field_technology_features_icon']['widget'][0]['settings']) as $index) {
          if ($index === 'style') {
            continue;
          }
          $form['field_technology_features_icon']['widget'][0]['settings'][$index]['#disabled'] = TRUE;
        }
      }
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function classrooms_core_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  if ($node->bundle() === 'room' && $view_mode === 'full') {
    if ($display->getComponent('field_room_section_heading')) {
      $build['field_room_section_heading'] = [
        '#type' => 'markup',
        '#markup' => '<h2 class="headline headline--serif headline--underline">' . t("Additional Information") . '</h2>',
      ];
    }
    if (!$node->get('field_room_map')->isEmpty()) {
      $room_url_map = $node->field_room_map
        ?->first()
        ?->get('entity')
        ?->getValue()
        ?->field_media_static_map
        ?->uri;

      $build['field_room_map_link'] = [
        '#theme' => 'room_map_link',
        '#room_url_map' => $room_url_map,
      ];
    }

    // Building link.
    $building_id = $node->get('field_room_building_id')->target_id;
    $building = Drupal::entityTypeManager()->getStorage('building')->load($building_id);
    $url = Url::fromUri('base:/buildings/' . $building_id)->toString();
    $build['field_room_building_link'] = [
      '#theme' => 'building_link',
      '#building_link' => $url,
      '#building_name' => $building->label(),
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function classrooms_core_preprocess_block(&$variables) {
  switch ($variables['plugin_id']) {
    // Unset request info buttons.
    case 'requestinfobutton_block':
      $node = \Drupal::routeMatch()->getParameter('node');
      if (!$node || $node->get('field_room_instruction_category')->value != 'UNIVERSITY_CLASSROOM') {
        $variables['content'] = [];
      }
      break;

    case 'field_block:node:room:field_room_scheduling_regions':
    case 'field_block:node:room:field_room_responsible_unit':
    case 'field_block:node:room:field_room_instruction_category':
    case 'extra_field_block:node:room:field_room_building_link':
    case 'extra_field_block:node:room:field_room_map_link':
      uiowa_core_set_attributes($variables, 'block-margin__default--removed');
      break;

    case 'requestinfobutton_block':
    case 'extra_field_block:node:room:field_room_section_heading':
      uiowa_core_set_attributes($variables, 'block-margin__top--extra');
      break;

    case 'field_block:node:room:field_room_guide':
      uiowa_core_set_attributes($variables, 'bg--gray block-padding__all');
      uiowa_core_set_title_attributes($variables, 'h4 headline headline--serif headline--underline');
      break;

    case 'field_block:node:room:field_room_technology_features':
      uiowa_core_set_title_attributes($variables, 'h4 headline headline--serif headline--underline');
      break;

    // Add fivecol grid class to image gallery.
    case 'field_block:node:room:field_gallery_images':
      uiowa_core_set_attributes($variables, 'grid--threecol--33-34-33 photoswipe-gallery');
      break;

    // Add inline class for blocks to appear inline.
    case 'field_block:node:room:field_room_type':
    case 'field_block:node:room:field_room_seating_chart':
    case 'field_block:node:room:field_room_max_occupancy':
      uiowa_core_set_attributes($variables, 'element--inline block-margin__top');
      break;

    // Add inline class for blocks to appear inline.
    case 'field_block:node:room:field_room_map':
      uiowa_core_set_attributes($variables, 'element--cover');
      break;

    // Center video.
    case 'field_block:node:room:field_room_video':
      uiowa_core_set_attributes($variables, 'align-center');
      break;

  }
}

/**
 * Implements hook_preprocess_file_link().
 */
function classrooms_core_preprocess_file_link(&$variables) {
  unset($variables['attributes']['class']);
}

/**
 * Implements hook_entity_presave().
 */
function classrooms_core_node_presave(EntityInterface $entity) {
  if ($entity->bundle() == 'room') {
    $seating_chart = $entity->get('field_room_seating_chart')->referencedEntities();
    if (!empty($seating_chart)) {
      $file = reset($seating_chart);
      $file->setFilename('Seating Chart');
      $file->save();
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function classrooms_core_preprocess_field(&$variables, $hook) {
  switch ($variables['element']['#field_name']) {
    case 'field_room_name':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_field_label_icon($variables, 'fa-door-closed fa-li');
        uiowa_core_set_attributes($variables, 'fa-ul');
      }
      break;

    case 'field_room_responsible_unit':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_field_label_icon($variables, 'fa-key fa-li');
        uiowa_core_set_attributes($variables, 'fa-ul');
      }
      break;

    case 'field_room_max_occupancy':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_field_label_icon($variables, 'fa-user fa-li');
        uiowa_core_set_attributes($variables, 'fa-ul');
      }
      else {
        uiowa_core_set_field_label_icon($variables, 'fa-user');
        uiowa_core_set_attributes($variables, 'bg--gold padding--block--sm padding--inline--md');
      }
      break;

    case 'field_room_seating_chart':
      uiowa_core_set_attributes($variables, 'bg--gold padding--block--sm padding--inline--md');
      break;

    case 'field_room_type':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_field_label_icon($variables, 'fa-building fa-li');
        uiowa_core_set_attributes($variables, 'fa-ul');
      }
      else {
        uiowa_core_set_field_label_icon($variables, 'fa-building');
        uiowa_core_set_attributes($variables, 'bg--gold padding--block--sm padding--inline--md');
      }
      $variables['items'][0]['content']['#url'] = Url::fromRoute('entity.node.canonical', ['node' => 206]);
      break;

    case 'field_room_scheduling_regions':
      $variables['items'][0]['content']['#url'] = Url::fromRoute('entity.node.canonical', ['node' => 151]);
      break;

    case 'field_room_technology_features':
    case 'field_room_tile_details':
    case 'field_room_design_details':
    case 'field_room_classroom_furniture':
    case 'field_room_accessibility':
    case 'field_room_features':
      uiowa_core_set_title_attributes($variables, 'h6 headline headline--serif headline--underline');
      break;

    case 'field_technology_features_icon':
      uiowa_core_set_attributes($variables, 'fa-li');
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function classrooms_core_preprocess_layout(&$variables) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
  $layout = $variables['layout'];
  $node = \Drupal::routeMatch()->getParameter('node');
  $node = ($node ?? \Drupal::routeMatch()->getParameter('node_preview'));
  if ($node instanceof NodeInterface && $node->getType() === 'room') {
    switch ($layout->id()) {
      case 'layout_header':
        if (!isset($variables['banner_settings'])) {
          $variables['banner_settings'] = [];
        }
        if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {
          $variables['featured_image_display'] = 'medium';
        }
        break;

      case 'layout_twocol':
        if (isset($variables['region_attributes']['second']) && ($variables['content']['#settings']['label'] === 'Map')) {
          $variables['region_attributes']['second']->addClass('element--align-top element--padding__all');
        }
        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function classrooms_core_preprocess_node(&$variables): void {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  if ($node->getType() === 'room' && $variables['view_mode'] === 'teaser') {
    // Combine required fields to form card title.
    $variables['card_title'] = $node->get('field_room_room_id')->value . ' ' . strtoupper($node->get('field_room_building_id')->target_id);
  }
}

/**
 * Set dynamic allowed values for the instructional room category field.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function classrooms_core_room_category_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, bool &$cacheable = TRUE): array {
  $options = [
    'UNIVERSITY_CLASSROOM' => 'University Classroom',
    'PROGRAMMED_CLASSROOM' => 'Programmed Classroom',
  ];
  return $options;
}

/**
 * Implements hook_entity_presave().
 */
function classrooms_core_entity_presave(EntityInterface $entity): void {
  if (!$entity instanceof FieldableEntityInterface || $entity->bundle() !== 'room') {
    return;
  }

  $building_id = $entity
    ->field_room_building_id
    ?->target_id;
  $room_id = $entity
    ->field_room_room_id
    ?->value;

  if (!is_null($building_id) && !is_null($room_id)) {
    $building = Drupal::entityTypeManager()->getStorage('building')->load($building_id);

    // Set title programmatically based on building and room id.
    $title = "{$building->label()} $room_id";
    $entity->set('title', $title);
  }

  // Grab MAUI room data.
  $maui_api = \Drupal::service('uiowa_maui.api');
  $data = $maui_api->getRoomData($building_id, $room_id);
  if ($data) {
    // Mapping the Max Occupancy field to the maxOccupancy value from endpoint.
    if ($entity->hasField('field_room_max_occupancy') && isset($data[0]->maxOccupancy)) {
      if (filter_var($data[0]->maxOccupancy, FILTER_VALIDATE_INT) !== FALSE) {
        $entity->set('field_room_max_occupancy', $data[0]->maxOccupancy);
      }
    }

    // Mapping the Room Name field to the roomName value from endpoint.
    if ($entity->hasField('field_room_name') && isset($data[0]->roomName)) {
      if (strlen($data[0]->roomName) > 1) {
        $entity->set('field_room_name', $data[0]->roomName);
      }
    }

    // Mapping the Instructional Room Category field to the
    // roomCategory value from endpoint.
    if ($entity->hasField('field_room_instruction_category') && isset($data[0]->roomCategory)) {
      $field_definition = $entity->getFieldDefinition('field_room_instruction_category')->getFieldStorageDefinition();
      $field_allowed_options = options_allowed_values($field_definition, $entity);
      if (array_key_exists($data[0]->roomCategory, $field_allowed_options)) {
        $entity->set('field_room_instruction_category', $data[0]->roomCategory);
      }
    }

    // Mapping the Room Type field to the roomType value from endpoint.
    if ($entity->hasField('field_room_type') && isset($data[0]->roomType)) {
      // Returns all terms matching name within vocabulary.
      $term = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties(['name' => $data[0]->roomType, 'vid' => 'room_types']);
      if (!empty($term)) {
        // Set based on first (and hopefully only) result.
        $entity->set('field_room_type', [array_key_first($term)]);
      }
      else {
        // If term does not exist create it.
        $new_term = Term::create([
          'vid' => 'room_types',
          'name' => $data[0]->roomType,
        ]);
        $new_term->save();
        $entity->set('field_room_type', [$new_term->id()]);
      }
    }

    // Mapping the Responsible Unit field to the
    // acadOrgUnitName value from endpoint.
    if ($entity->hasField('field_room_responsible_unit') && isset($data[0]->acadOrgUnitName)) {
      // Returns all terms matching name within vocabulary.
      $term = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties([
          'name' => $data[0]->acadOrgUnitName,
          'vid' => 'units',
        ]);
      if (!empty($term)) {
        // Set based on first (and hopefully only) result.
        $entity->set('field_room_responsible_unit', [array_key_first($term)]);
      }
      else {
        // If term does not exist create it.
        $new_term = Term::create([
          'vid' => 'units',
          'name' => $data[0]->acadOrgUnitName,
        ]);
        $new_term->save();
        $entity->set('field_room_responsible_unit', [$new_term->id()]);
      }
    }

    // Mapping Room Features and Technology Features fields
    // to the featureList value from endpoint.
    if (isset($data[0]->featureList)) {
      $query = \Drupal::entityQuery('taxonomy_term')->orConditionGroup()
        ->condition('vid', 'room_features')
        ->condition('vid', 'technology_features');

      $tids = \Drupal::entityQuery('taxonomy_term')
        ->condition($query)
        ->execute();
      if ($tids) {
        $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
        $terms = $storage->loadMultiple($tids);
        $room_features = [];
        $tech_features = [];
        foreach ($terms as $term) {
          if ($api_mapping = $term->get('field_api_mapping')?->value) {
            if (in_array($api_mapping, $data[0]->featureList)) {
              if ($term->bundle() === 'room_features') {
                $room_features[] = $term->id();
              }
              else {
                $tech_features[] = $term->id();
              }
            }
          }
        }
        if (!empty($room_features)) {
          $entity->set('field_room_features', $room_features);
        }
        if (!empty($tech_features)) {
          $entity->set('field_room_technology_features', $tech_features);
        }
      }
    }

    // Mapping the Scheduling Regions field to the
    // regionList value from endpoint.
    if (isset($data[0]->regionList)) {
      $query = \Drupal::entityQuery('taxonomy_term')
        ->condition('vid', 'scheduling_regions')
        ->execute();

      if ($query) {
        $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
        $terms = $storage->loadMultiple($query);
        foreach ($terms as $term) {
          if ($api_mapping = $term->get('field_api_mapping')?->value) {
            if (in_array($api_mapping, $data[0]->regionList)) {
              $entity->set('field_room_scheduling_regions', $term->id());
              break;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function classrooms_core_theme($existing, $type, $theme, $path) {
  return [
    'field__node__field_room_seating_chart__room__default' => [
      'template' => 'field--node--field-room-seating-chart--room--default',
      'base hook' => 'field',
    ],
    'field__node__field_room_accessibility__room__default' => [
      'template' => 'field--node--field-room-accessibility--room--default',
      'base hook' => 'field',
    ],
    'field__node__field_room_features__room__default' => [
      'template' => 'field--node--field-room-features--room--default',
      'base hook' => 'field',
    ],
    'field__node__field_room_classroom_furniture' => [
      'template' => 'field--node--field-room-classroom-furniture',
      'base hook' => 'field',
    ],
    'field__node__field_room_tile_details' => [
      'template' => 'field--node--field-room-tile-details',
      'base hook' => 'field',
    ],
    'field__node__field_room_guide__room__default' => [
      'template' => 'field--node--field-room-guide--room--default',
      'base hook' => 'field',
    ],
    'field__node__field_room_design_details' => [
      'template' => 'field--node--field-room-design-details',
      'base hook' => 'field',
    ],
    'node__room__teaser' => [
      'template' => 'node--room--teaser',
      'base hook' => 'node',
    ],
    'taxonomy_term__technology_features' => [
      'template' => 'taxonomy-term--technology-features',
      'base hook' => 'taxonomy',
    ],
    'building_link' => [
      'variables' => [
        'building_link' => NULL,
        'building_name' => NULL,
      ],
      'template' => 'building-link',
    ],
    'building_link_teaser' => [
      'variables' => [
        'building_link' => NULL,
        'building_name' => NULL,
      ],
      'template' => 'building-link-teaser',
    ],
    'room_map_link' => [
      'variables' => ['room_url_map' => NULL],
      'template' => 'room-map-link',
    ],
    'room_schedule_list' => [
      'variables' => [
        'items' => [],
      ],
      'template' => 'room-schedule-list',
    ],
    'requestinfobutton_block' => [
      'template' => 'requestinfobutton-block',
      'variables' => [
        'check_availability_link' => NULL,
        'request_link' => NULL,
        'report_issue_link' => NULL,
      ],
    ],
    'views_view_unformatted__room_list' => [
      'template' => 'views-view-unformatted--room-list',
      'base hook' => 'view',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function classrooms_core_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->get('view');
  $view_display = $view->getDisplay();
  $block_id = $view_display->display['id'];

  if (in_array($block_id, ['block_rooms', 'block_programmed_rooms_list'])) {
    $building_filter = 'field_room_building_id_target_id';
    if (isset($form[$building_filter])) {
      uiowa_core_config_entity_filter_select($form[$building_filter], 'building');

      // Change the label from default `- Any -`.
      $form[$building_filter]['#empty_option'] = t('Building');

      // Hack to further treat this field as a select as it relates to BEF.
      // Use the `field_room_type_target_id` if it is present
      // on the form, assuming it is a select.
      if (isset($form['field_room_type_target_id'])) {
        $form[$building_filter]['#process'] = $form['field_room_type_target_id']['#process'];
        $form[$building_filter]['#pre_render'] = $form['field_room_type_target_id']['#pre_render'];
      }
      // If the `field_room_type_target_id` field isn't there,
      // build it from scratch, but this is dependent on BEF
      // select fields not changing in structure.
      else {
        $form[$building_filter]['#process'] = [
          [
            'Drupal\Core\Render\Element\Select',
            'processSelect',
          ],
          [
            'Drupal\Core\Render\Element\Select',
            'processAjaxForm',
          ],
          [
            'Drupal\inline_form_errors\RenderElementHelper',
            'processElement',
          ],
          [
            '\Drupal\Core\Render\Element\RenderElement',
            'processGroup',
          ],
        ];
        $form[$building_filter]['#pre_render'] = [
          [
            'Drupal\Core\Render\Element\Select',
            'preRenderSelect',
          ],
          [
            '\Drupal\Core\Render\Element\RenderElement',
            'preRenderGroup',
          ],
        ];
      }
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function classrooms_core_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Grid display of Rooms on Units vocab.
  if ($view->id() === 'taxonomy_term') {
    if (\Drupal::routeMatch()->getRouteName() === 'entity.taxonomy_term.canonical' &&
      $page_term_id = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
      $term = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($page_term_id);
      if ($term->bundle() === 'units') {
        $view->display_handler->setOption('css_class', 'grid--threecol--33-34-33');
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function classrooms_core_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $id = $view->storage->id();
  switch ($id) {
    case 'room_list':
      $variables['views_filter_classes'][] = 'grid__column';
      $variables['views_content_classes'][] = 'grid__column';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function classrooms_core_preprocess_views_view_unformatted(&$variables) {
  // Get the view and its current display.
  $view = $variables['view'];
  $display_block = $view->current_display;

  // Initialize the row item classes and the view's style plugin.
  $variables['row_item_classes'] = [];
  $style = $view->style_plugin;
  $rows = $variables['rows'];

  switch ($display_block) {
    case 'block_rooms':
    case 'block_programmed_rooms_list':

      // Define the common attribute classes.
      $attribute_classes = [
        'card--left',
        'card--stacked',
        'card--alignment-left',
        'card--enclosed',
        'card--button-position',
      ];
      // Define the common headline classes.
      $headline_classes = [
        'h4',
        'headline',
        'block__headline',
        'headline--serif',
        'headline--underline',
      ];

      // Add the attribute classes to the row item classes.
      $variables['row_item_classes'] = array_merge($attribute_classes, array_values($variables['row_item_classes']));
      // Loop through the rows.
      foreach ($rows as $id => $row) {
        /** @var \Drupal\node\NodeInterface $node */
        $node = $row['content']['#node'];
        // Add the row item classes to the row attributes.
        $variables['rows'][$id]['attributes']->addClass($variables['row_item_classes']);

        // Get node path to link card with.
        $nid = $view->result[$id]->_entity->id();
        $link = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid);

        // Combine the room ID and building ID fields to display.
        $title_combined = $style->getField($id, 'field_room_room_id') . ' ' . strtoupper($view->result[$id]->node__field_room_building_id_field_room_building_id_target_i);
        $title = ['#markup' => $title_combined];

        // Define the card meta container.
        $card_meta = [
          '#type' => 'html_tag',
          '#tag' => 'div',
        ];

        // Define the meta fields.
        $meta_fields = [
          'name' => 'field_room_name',
          'type' => 'field_room_type',
          'occupancy' => 'field_room_max_occupancy',
          'unit' => 'field_room_responsible_unit',
        ];

        // Get the seat taxonomy terms from the features taxonomy.
        $taxonomy = $node->get('field_room_features')->referencedEntities();

        // Loop through the taxonomy and get items that start with "Seats".
        $seats = [];
        foreach ($taxonomy as $term) {
          if (str_starts_with($term->getName(), 'Seats')) {
            $seats[] = $term->getName();
          }
        }

        // Add the seats to the $meta_fields array.
        if (!empty($seats) && $display_block == 'block_programmed_rooms_list') {
          // Add the seats to a separate variable.
          $seating_type = [
            '#type' => 'container',
            '#attributes' => [
              'class' => ['field--label-inline fa-ul'],
            ],
            'label' => [
              '#type' => 'html_tag',
              '#tag' => 'div',
              '#value' => '<span class="fa-chair fas fa-li" role="presentation"></span>' . \Drupal::translation()->translate('Seating Type'),
              '#attributes' => [
                'class' => ['field__label'],
              ],
            ],
            'value' => [
              '#type' => 'html_tag',
              '#tag' => 'div',
              '#value' => str_replace('Seats - ', '', implode(', ', $seats)),
              '#attributes' => [
                'class' => ['value'],
              ],
            ],
          ];
        }

        // Add the building link.
        if ($display_block == 'block_programmed_rooms_list') {
          $building_id = $node->get('field_room_building_id')->target_id;
          $building = Drupal::entityTypeManager()->getStorage('building')->load($building_id);
          $url = Url::fromUri('base:/buildings/' . $building_id)->toString();
          $build['field_room_building_link'] = [
            '#theme' => 'building_link_teaser',
            '#building_link' => $url,
            '#building_name' => $building->label(),
          ];
          $building_link = Drupal::service('renderer')->renderPlain($build['field_room_building_link']);
        }

        // Add meta fields, if they exist.
        foreach ($meta_fields as $key => $field_name) {
          if (
            $style->getField($id, $field_name) &&
            !$node->get($field_name)?->isEmpty()
          ) {
            $card_meta[$key] = $node?->{$field_name}?->view('teaser');
          }
        }

        // Add building_link to card_meta.
        if ($display_block == 'block_programmed_rooms_list') {
          $card_meta['building_link'] = [
            '#type' => 'markup',
            '#markup' => $building_link,
          ];
        }

        // Combine card_meta and seating_type so seating_type renders last.
        $card_meta_combined = [[
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => [
            'class' => ['card-meta-container'],
          ],
          '#value' => \Drupal::service('renderer')->render($card_meta),
        ],
          [
            '#type' => 'html_tag',
            '#tag' => 'div',
            '#attributes' => [
              'class' => ['seating-type-container'],
            ],
            '#value' => \Drupal::service('renderer')->render($seating_type),
          ],
        ];

        // Initialize card_options variable.
        $variables['rows'][$id]['card_options'] = [
          'attributes' => $variables['rows'][$id]['attributes'],
          'media_sizes' => ['card__media--large'],
          'card_image' => $style->getField($id, 'field_image'),
          'card_title' => \Drupal::service('renderer')->render($title),
          'card_link_url' => $link,
          'headline_class' => $headline_classes,
          'card_meta' => \Drupal::service('renderer')->render($card_meta_combined),
          'visible_button' => TRUE,
        ];

      }
      break;

  }
}
