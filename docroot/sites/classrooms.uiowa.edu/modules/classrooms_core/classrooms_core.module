<?php

/**
 * @file
 * Primary module hooks for Uiowa Core module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\NodeInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_entity_extra_field_info().
 */
function classrooms_core_entity_extra_field_info() {
  $extra = [];
  // Adding an extra field to render a link to the campus map.
  $extra['node']['room']['display']['field_room_map_link'] = [
    'label' => t('Map Link'),
    'description' => t('A url link to the campus map.'),
    'weight' => 1,
    'visible' => TRUE,
  ];
  // Adding an extra field to display a section heading.
  $extra['node']['room']['display']['field_room_section_heading'] = [
    'label' => t('Additional Information'),
    'description' => t('A heading for the additional information section.'),
    'weight' => 1,
    'visible' => TRUE,
  ];
  return $extra;
}

/**
 * Implements hook_form_alter().
 */
function classrooms_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_room_form':
    case 'node_room_edit_form':
      _sitenow_node_form_defaults($form, $form_state);

      // These are imported fields that editors should not interact with.
      $form['field_room_name']['#disabled'] = TRUE;
      $form['field_room_features']['#disabled'] = TRUE;
      $form['field_room_technology_features']['#disabled'] = TRUE;
      $form['field_room_responsible_unit']['#disabled'] = TRUE;
      $form['field_room_type']['#disabled'] = TRUE;
      $form['field_room_instruction_category']['#disabled'] = TRUE;
      $form['field_room_max_occupancy']['#disabled'] = TRUE;
      $form['field_room_scheduling_regions']['#disabled'] = TRUE;
      break;

    case 'taxonomy_term_technology_features_form':

      // Disable font awesome extra settings.
      /** @var Drupal\uiowa_core\Access\UiowaCoreAccess $check */
      $check = \Drupal::service('uiowa_core.access_checker');

      /** @var Drupal\Core\Access\AccessResultInterface $access */
      $access = $check->access(\Drupal::currentUser()->getAccount());

      if ($access->isForbidden()) {
        // Disable all settings fields except the style setting.
        foreach (Element::children($form['field_technology_features_icon']['widget'][0]['settings']) as $index) {
          if ($index === 'style') {
            continue;
          }
          $form['field_technology_features_icon']['widget'][0]['settings'][$index]['#disabled'] = TRUE;
        }
      }
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function classrooms_core_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  if ($node->bundle() === 'room' && $view_mode === 'full') {
    if ($display->getComponent('field_room_section_heading')) {
      $build['field_room_section_heading'] = [
        '#type' => 'markup',
        '#markup' => '<h2 class="headline headline--serif headline--underline">' . t("Additional Information") . '</h2>',
      ];
    }
    if (!$node->get('field_room_map')->isEmpty()) {
      $room_url_map = $node->field_room_map
        ?->first()
        ?->get('entity')
        ?->getValue()
        ?->field_media_static_map
        ?->uri;

      $build['field_room_map_link'] = [
        '#theme' => 'room_map_link',
        '#room_url_map' => $room_url_map,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function classrooms_core_preprocess_block(&$variables) {
  $classes = [];
  $title_classes = [];
  switch ($variables['plugin_id']) {
    case 'field_block:node:room:field_room_scheduling_regions':
    case 'field_block:node:room:field_room_responsible_unit':
    case 'field_block:node:room:field_room_instruction_category':
    case 'field_block:node:room:field_room_building_id':
    case 'extra_field_block:node:room:field_room_map_link':
      $classes[] = 'block-margin__default--removed';
      break;

    case 'requestinfobutton_block':
    case 'extra_field_block:node:room:field_room_section_heading':
      $classes[] = 'block-margin__top--extra';
      break;

    case 'field_block:node:room:field_room_technology_features':
      $classes[] = 'bg--gray block-padding__all';
      $title_classes[] = 'h4 headline headline--serif headline--underline';
      break;

    // Add fivecol grid class to image gallery.
    case 'field_block:node:room:field_gallery_images':
      $classes[] = 'grid--fivecol--20 photoswipe-gallery';
      break;

    // Add inline class for blocks to appear inline.
    case 'field_block:node:room:field_room_type':
    case 'field_block:node:room:field_room_seating_chart':
    case 'field_block:node:room:field_room_max_occupancy':
      $classes[] = 'element--inline block-margin__top';
      break;

    // Add inline class for blocks to appear inline.
    case 'field_block:node:room:field_room_map':
      $classes[] = 'element--cover';
      break;

    // Center video.
    case 'field_block:node:room:field_room_video':
      $classes[] = 'align-center';
      break;

  }
  if (!empty($classes)) {
    if (!isset($variables['attributes']['class'])) {
      $variables['attributes']['class'] = [];
    }
    $variables['attributes']['class'] += $classes;
  }

  if (!empty($title_classes)) {
    if (!isset($variables['title_attributes']['class'])) {
      $variables['title_attributes']['class'] = [];
    }
    $variables['title_attributes']['class'] += $title_classes;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function classrooms_core_preprocess_field(&$variables, $hook) {
  switch ($variables['element']['#field_name']) {
    case 'field_room_technology_features':
    case 'field_room_tile_details':
    case 'field_room_design_details':
    case 'field_room_classroom_furniture':
    case 'field_room_accessibility':
    case 'field_room_features':
      if (!isset($variables['title_attributes']['class'])) {
        $variables['title_attributes']['class'] = '';
      }
      $variables['title_attributes']['class'] .= 'h6 headline headline--serif headline--underline';
      break;

    case 'field_technology_features_icon':
      if (!isset($variables['attributes']['class'])) {
        $variables['attributes']['class'] = '';
      }
      $variables['attributes']['class'] .= 'fa-li';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function classrooms_core_preprocess_layout(&$variables) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
  $layout = $variables['layout'];
  $node = \Drupal::routeMatch()->getParameter('node');
  $node = ($node ?? \Drupal::routeMatch()->getParameter('node_preview'));
  if ($node instanceof NodeInterface && $node->getType() === 'room') {
    switch ($layout->id()) {
      case 'layout_header':
        if (!isset($variables['banner_settings'])) {
          $variables['banner_settings'] = [];
        }
        if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {
          $variables['featured_image_display'] = 'medium';
        }
        break;

      case 'layout_twocol':
        if (isset($variables['region_attributes']['second'])) {
          $variables['region_attributes']['second']->addClass('element--align-top element--padding__all');
        }
        break;
    }
  }
}

/**
 * Set dynamic allowed values for the instructional room category field.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function classrooms_core_room_category_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, bool &$cacheable = TRUE): array {
  $options = [
    'UNIVERSITY_CLASSROOM' => 'University Classroom',
    'PROGRAMMED_CLASSROOM' => 'Programmed Classroom',
  ];
  return $options;
}

/**
 * Implements hook_entity_presave().
 */
function classrooms_core_entity_presave(EntityInterface $entity): void {
  if (!$entity instanceof FieldableEntityInterface || $entity->bundle() !== 'room') {
    return;
  }

  $building_id = $entity
    ->field_room_building_id
    ?->target_id;
  $room_id = $entity
    ->field_room_room_id
    ?->value;

  if (!is_null($building_id) && !is_null($room_id)) {
    $building = Drupal::entityTypeManager()->getStorage('building')->load($building_id);

    // Set title programmatically based on building and room id.
    $title = "{$building->label()} $room_id";
    $entity->set('title', $title);
  }

  // Grab MAUI room data.
  $maui_api = \Drupal::service('uiowa_maui.api');
  $data = $maui_api->getRoomData($building_id, $room_id);
  if ($data) {
    // Mapping the Max Occupancy field to the maxOccupancy value from endpoint.
    if ($entity->hasField('field_room_max_occupancy') && isset($data[0]->maxOccupancy)) {
      if (filter_var($data[0]->maxOccupancy, FILTER_VALIDATE_INT) !== FALSE) {
        $entity->set('field_room_max_occupancy', $data[0]->maxOccupancy);
      }
    }

    // Mapping the Room Name field to the roomName value from endpoint.
    if ($entity->hasField('field_room_name') && isset($data[0]->roomName)) {
      if (strlen($data[0]->roomName) > 1) {
        $entity->set('field_room_name', $data[0]->roomName);
      }
    }

    // Mapping the Instructional Room Category field to the
    // roomCategory value from endpoint.
    if ($entity->hasField('field_room_instruction_category') && isset($data[0]->roomCategory)) {
      $field_definition = $entity->getFieldDefinition('field_room_instruction_category')->getFieldStorageDefinition();
      $field_allowed_options = options_allowed_values($field_definition, $entity);
      if (array_key_exists($data[0]->roomCategory, $field_allowed_options)) {
        $entity->set('field_room_instruction_category', $data[0]->roomCategory);
      }
    }

    // Mapping the Room Type field to the roomType value from endpoint.
    if ($entity->hasField('field_room_type') && isset($data[0]->roomType)) {
      // Returns all terms matching name within vocabulary.
      $term = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties(['name' => $data[0]->roomType, 'vid' => 'room_types']);
      if (!empty($term)) {
        // Set based on first (and hopefully only) result.
        $entity->set('field_room_type', [array_key_first($term)]);
      }
      else {
        // If term does not exist create it.
        $new_term = Term::create([
          'vid' => 'room_types',
          'name' => $data[0]->roomType,
        ]);
        $new_term->save();
        $entity->set('field_room_type', [$new_term->id()]);
      }
    }

    // Mapping the Responsible Unit field to the
    // acadOrgUnitName value from endpoint.
    if ($entity->hasField('field_room_responsible_unit') && isset($data[0]->acadOrgUnitName)) {
      // Returns all terms matching name within vocabulary.
      $term = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties([
          'name' => $data[0]->acadOrgUnitName,
          'vid' => 'units',
        ]);
      if (!empty($term)) {
        // Set based on first (and hopefully only) result.
        $entity->set('field_room_responsible_unit', [array_key_first($term)]);
      }
      else {
        // If term does not exist create it.
        $new_term = Term::create([
          'vid' => 'units',
          'name' => $data[0]->acadOrgUnitName,
        ]);
        $new_term->save();
        $entity->set('field_room_responsible_unit', [$new_term->id()]);
      }
    }

    // Mapping Room Features and Technology Features fields
    // to the featureList value from endpoint.
    if (isset($data[0]->featureList)) {
      $query = \Drupal::entityQuery('taxonomy_term')->orConditionGroup()
        ->condition('vid', 'room_features')
        ->condition('vid', 'technology_features');

      $tids = \Drupal::entityQuery('taxonomy_term')
        ->condition($query)
        ->execute();
      if ($tids) {
        $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
        $terms = $storage->loadMultiple($tids);
        $room_features = [];
        $tech_features = [];
        foreach ($terms as $term) {
          if ($api_mapping = $term->get('field_api_mapping')?->value) {
            if (in_array($api_mapping, $data[0]->featureList)) {
              if ($term->bundle() === 'room_features') {
                $room_features[] = $term->id();
              }
              else {
                $tech_features[] = $term->id();
              }
            }
          }
        }
        if (!empty($room_features)) {
          $entity->set('field_room_features', $room_features);
        }
        if (!empty($tech_features)) {
          $entity->set('field_room_technology_features', $tech_features);
        }
      }
    }

    // Mapping the Scheduling Regions field to the
    // regionList value from endpoint.
    if (isset($data[0]->regionList)) {
      $query = \Drupal::entityQuery('taxonomy_term')
        ->condition('vid', 'scheduling_regions')
        ->execute();

      if ($query) {
        $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
        $terms = $storage->loadMultiple($query);
        foreach ($terms as $term) {
          if ($api_mapping = $term->get('field_api_mapping')?->value) {
            if (in_array($api_mapping, $data[0]->regionList)) {
              $entity->set('field_room_scheduling_regions', $term->id());
              break;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function classrooms_core_theme($existing, $type, $theme, $path) {
  return [
    'field__node__field_room_type__room__default' => [
      'template' => 'field--node--field-room-type--room--default',
      'base hook' => 'field',
    ],
    'field__node__field_room_max_occupancy__room__default' => [
      'template' => 'field--node--field-room-max-occupancy--room--default',
      'base hook' => 'field',
    ],
    'field__node__field_room_seating_chart__room__default' => [
      'template' => 'field--node--field-room-seating-chart--room--default',
      'base hook' => 'field',
    ],
    'field__node__field_room_accessibility__room__default' => [
      'template' => 'field--node--field-room-accessibility--room--default',
      'base hook' => 'field',
    ],
    'field__node__field_room_features__room__default' => [
      'template' => 'field--node--field-room-features--room--default',
      'base hook' => 'field',
    ],
    'field__node__field_room_classroom_furniture' => [
      'template' => 'field--node--field-room-classroom-furniture',
      'base hook' => 'field',
    ],
    'field__node__field_room_tile_details' => [
      'template' => 'field--node--field-room-tile-details',
      'base hook' => 'field',
    ],
    'field__node__field_room_design_details' => [
      'template' => 'field--node--field-room-design-details',
      'base hook' => 'field',
    ],
    'taxonomy_term__technology_features' => [
      'template' => 'taxonomy-term--technology-features',
      'base hook' => 'taxonomy',
    ],
    'room_map_link' => [
      'variables' => ['room_url_map' => NULL],
      'template' => 'room-map-link',
    ],
    'requestinfobutton_block' => [
      'template' => 'requestinfobutton-block',
      'variables' => [
        'check_availability_link' => NULL,
        'request_link' => NULL,
        'report_issue_link' => NULL,
      ],
    ],
  ];
}
