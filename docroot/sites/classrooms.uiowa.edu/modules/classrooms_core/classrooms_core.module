<?php

/**
 * @file
 * Primary module hooks for Uiowa Core module.
 */

use Drupal\classrooms_core\Entity\Building;
use Drupal\classrooms_core\Entity\ClassroomsRoom;
use Drupal\classrooms_core\RoomItemProcessor;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function classrooms_core_entity_bundle_info_alter(array &$bundles) {
  if (isset($bundles['node']['room'])) {
    $bundles['node']['room']['class'] = ClassroomsRoom::class;
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function classrooms_core_entity_extra_field_info() {
  $extra = [];
  // Building link.
  $extra['node']['room']['display']['field_room_building_link'] = [
    'label' => t('Building Link'),
    'description' => t('A url link to the building.'),
    'weight' => 1,
    'visible' => TRUE,
  ];
  // Adding an extra field to render a link to the campus map.
  $extra['node']['room']['display']['field_room_map_link'] = [
    'label' => t('Map Link'),
    'description' => t('A url link to the campus map.'),
    'weight' => 1,
    'visible' => TRUE,
  ];
  // Adding an extra field to display a section heading.
  $extra['node']['room']['display']['field_room_section_heading'] = [
    'label' => t('Additional Information'),
    'description' => t('A heading for the additional information section.'),
    'weight' => 1,
    'visible' => TRUE,
  ];
  return $extra;
}

/**
 * Implements hook_form_alter().
 */
function classrooms_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_room_form':
    case 'node_room_edit_form':
      _sitenow_node_form_defaults($form, $form_state);

      // Computed field for use in views. No access needed.
      $form['field_room_combined_id']['#access'] = FALSE;

      // These are imported fields that editors should not interact with.
      $form['field_room_name']['#disabled'] = TRUE;
      $form['field_room_accessibility_feature']['#disabled'] = TRUE;
      $form['field_room_features']['#disabled'] = TRUE;
      $form['field_room_technology_features']['#disabled'] = TRUE;
      $form['field_room_responsible_unit']['#disabled'] = TRUE;
      $form['field_room_type']['#disabled'] = TRUE;
      $form['field_room_instruction_category']['#disabled'] = TRUE;
      $form['field_room_max_occupancy']['#disabled'] = TRUE;
      $form['field_room_scheduling_regions']['#disabled'] = TRUE;
      break;

    case 'taxonomy_term_technology_features_form':

      // Disable font awesome extra settings.
      /** @var Drupal\uiowa_core\Access\UiowaCoreAccess $check */
      $check = \Drupal::service('uiowa_core.access_checker');

      /** @var Drupal\Core\Access\AccessResultInterface $access */
      $access = $check->access(\Drupal::currentUser()->getAccount());

      if ($access->isForbidden()) {
        // Disable all settings fields except the style setting.
        foreach (Element::children($form['field_technology_features_icon']['widget'][0]['settings']) as $index) {
          if ($index === 'style') {
            continue;
          }
          $form['field_technology_features_icon']['widget'][0]['settings'][$index]['#disabled'] = TRUE;
        }
      }
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function classrooms_core_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  if ($node->bundle() === 'room' && $view_mode === 'full') {
    if ($display->getComponent('field_room_section_heading')) {
      $build['field_room_section_heading'] = [
        '#type' => 'markup',
        '#markup' => '<h2 class="h4 headline headline--serif headline--underline">' . t("Additional Information") . '</h2>',
      ];
    }
    if (!$node->get('field_room_map')->isEmpty()) {
      $room_url_map = $node->field_room_map
        ?->first()
        ?->get('entity')
        ?->getValue()
        ?->field_media_static_map
        ?->uri;

      $build['field_room_map_link'] = [
        '#theme' => 'room_map_link',
        '#room_url_map' => $room_url_map,
      ];
    }

    // Building link.
    $building_id = $node->get('field_room_building_id')->target_id;
    $building = Drupal::entityTypeManager()->getStorage('building')->load($building_id);
    if ($building) {
      $number = $building->get('number');
      $url = "https://www.facilities.uiowa.edu/building/{$number}";
      $build['field_room_building_link'] = [
        '#theme' => 'building_link',
        '#building_link' => $url,
        '#building_name' => $building->label(),
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function classrooms_core_preprocess_block(&$variables) {
  switch ($variables['plugin_id']) {
    // Unset request info buttons.
    case 'requestinfobutton_block':
      $node = \Drupal::routeMatch()->getParameter('node');
      if (!$node || $node->get('field_room_instruction_category')->value != 'UNIVERSITY_CLASSROOM') {
        $variables['content'] = [];
      }
      break;

    case 'field_block:node:room:field_room_scheduling_regions':
    case 'field_block:node:room:field_room_responsible_unit':
    case 'field_block:node:room:field_room_instruction_category':
    case 'extra_field_block:node:room:field_room_building_link':
    case 'extra_field_block:node:room:field_room_map_link':
      uiowa_core_set_attributes($variables, 'block-margin__default--removed');
      break;

    case 'requestinfobutton_block':
    case 'extra_field_block:node:room:field_room_section_heading':
      uiowa_core_set_attributes($variables, 'block-margin__top--extra');
      break;

    case 'field_block:node:room:field_room_guide':
      uiowa_core_set_title_attributes($variables, [
        'h4',
        'headline',
        'headline--serif',
        'headline--underline',
      ]);
      break;

    case 'field_block:node:room:field_room_technology_features':
      uiowa_core_set_title_attributes($variables, [
        'h4',
        'headline',
        'headline--serif',
        'headline--underline',
      ]);
      break;

    // Add fivecol grid class to image gallery.
    case 'field_block:node:room:field_gallery_images':
      uiowa_core_set_attributes($variables, [
        'media--widescreen',
        'photoswipe-gallery',
      ]);
      break;

    // Add inline class for blocks to appear inline.
    case 'field_block:node:room:field_room_type':
    case 'field_block:node:room:field_room_seating_chart':
    case 'field_block:node:room:field_room_max_occupancy':
      uiowa_core_set_attributes($variables, [
        'element--inline',
        'block-margin__top',
        'block-margin__right',
      ]);
      uiowa_core_set_attributes($variables, 'element--inline-breakpoint block-margin__top');
      break;

    // Add inline class for blocks to appear inline.
    case 'field_block:node:room:field_room_map':
      uiowa_core_set_attributes($variables, 'element--cover');
      break;

    // Center video.
    case 'field_block:node:room:field_room_video':
      uiowa_core_set_attributes($variables, 'align-center');
      break;

    case 'roomschedule_block':
      uiowa_core_set_attributes($variables, 'list-container');
      break;
  }
}

/**
 * Implements hook_preprocess_file_link().
 */
function classrooms_core_preprocess_file_link(&$variables) {
  unset($variables['attributes']['class']);
}

/**
 * Implements hook_entity_presave().
 */
function classrooms_core_node_presave(EntityInterface $entity) {
  if ($entity->bundle() == 'room') {
    $seating_chart = $entity->get('field_room_seating_chart')->referencedEntities();
    if (!empty($seating_chart)) {
      // Media will still display the file name when
      // displayed as a rendered entity, so set that on save.
      // The Media name will still be unique, and the filename
      // will remain the same.
      $media = reset($seating_chart);
      $fid = $media->getSource()->getSourceFieldValue($media);
      $file = File::load($fid);
      $file->setFilename('Seating Chart');
      $file->save();
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function classrooms_core_preprocess_field(&$variables, $hook) {
  switch ($variables['element']['#field_name']) {
    case 'field_room_name':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_field_label_icon($variables, 'fa-door-closed fa-li');
        uiowa_core_set_attributes($variables, 'fa-ul');
      }
      break;

    case 'field_room_responsible_unit':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_field_label_icon($variables, 'fa-key fa-li');
        uiowa_core_set_attributes($variables, 'fa-ul');
      }
      break;

    case 'field_room_max_occupancy':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_field_label_icon($variables, 'fa-user fa-li');
        uiowa_core_set_attributes($variables, 'fa-ul');
      }
      else {
        uiowa_core_set_field_label_icon($variables, 'fa-user');
        uiowa_core_set_attributes($variables, [
          'bg--gold',
          'padding--block--sm',
          'padding--inline--md',
        ]);
      }
      break;

    case 'field_room_seating_chart':
      uiowa_core_set_attributes($variables, [
        'bg--gold',
        'padding--block--sm',
        'padding--inline--md',
      ]);
      break;

    case 'field_gallery_images':
      if ($variables['element']['#bundle'] === 'room') {
        $variables['field_container_classes'] = 'uiowa-image-gallery';
        uiowa_core_set_title_attributes($variables, [
          'h2',
          'block__headline',
          'headline',
          'headline--serif',
          'headline--underline',
        ]);
      }
      break;

    case 'field_room_type':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_field_label_icon($variables, 'fa-building fa-li');
        uiowa_core_set_attributes($variables, 'fa-ul');
      }
      else {
        uiowa_core_set_field_label_icon($variables, 'fa-building');
        uiowa_core_set_attributes($variables, [
          'bg--gold',
          'padding--block--sm',
          'padding--inline--md',
        ]);
      }
      $variables['items'][0]['content']['#url'] = Url::fromRoute('entity.node.canonical', ['node' => 206]);
      break;

    case 'field_room_scheduling_regions':
      foreach ($variables['items'] as &$item) {
        // The Level 1 scheduling region shouldn't be linked.
        // Grab the cache info and then create a plaintext
        // field value to render.
        if ($item['content']['#title'] === 'Level 1') {
          $cache = $item['content']['#cache'];
          unset($item['content']);
          $item['content']['#plain_text'] = 'Level 1';
          $item['content']['#cache'] = $cache;
        }
        // Otherwise, link to the overall scheduling region page.
        else {
          $item['content']['#url'] = Url::fromRoute('entity.node.canonical', ['node' => 151]);
        }
      }
      break;

    case 'field_room_tile_details':
    case 'field_room_design_details':
    case 'field_room_classroom_furniture':
    case 'field_room_accessibility_feature':
      uiowa_core_set_title_attributes($variables, [
        'h5',
        'headline',
        'headline--serif',
        'headline--underline',
      ]);
      break;

    case 'field_room_technology_features':
      $variables['field_container_classes'] = 'element--three-column';
      uiowa_core_set_title_attributes($variables, [
        'h5',
        'headline',
        'headline--serif',
        'headline--underline',
      ]);
      break;

    case 'field_room_features':
      if ($variables['element']['#view_mode'] == 'teaser') {
        // Modify the field label.
        $variables['label'] = t('Seating type');
        uiowa_core_set_field_label_icon($variables, 'fa-chair fa-li');
        uiowa_core_set_attributes($variables, 'fa-ul');
      }
      else {
        uiowa_core_set_title_attributes($variables, [
          'h5',
          'headline',
          'headline--serif',
          'headline--underline',
        ]);
      }
      break;

    case 'field_technology_features_icon':
      uiowa_core_set_attributes($variables, 'fa-li');
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function classrooms_core_preprocess_media(&$variables) {
  // Extra classes for the Seating Chart field. Limit it
  // to 'file' media so we don't potentially add extra stuff
  // to other media types like images.
  if ($variables['media']->getSource()?->getPluginId() === 'file') {
    $variables['attributes']['class'] = ['element--inline padding--inline-start--sm'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function classrooms_core_preprocess_layout(&$variables) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
  $layout = $variables['layout'];
  $node = \Drupal::routeMatch()->getParameter('node') ?? \Drupal::routeMatch()->getParameter('node_preview');
  if ($node instanceof NodeInterface && $node->getType() === 'room') {
    switch ($layout->id()) {
      case 'layout_header':
        if (!isset($variables['banner_settings'])) {
          $variables['banner_settings'] = [];
        }
        if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {
          $variables['featured_image_display'] = 'medium';
        }
        break;

      case 'layout_twocol':
        if (isset($variables['region_attributes']['second']) && ($variables['content']['#settings']['label'] === 'Map')) {
          $variables['region_attributes']['second']->addClass('element--align-top element--padding__all');
        }
        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function classrooms_core_preprocess_node(&$variables): void {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  if ($node->getType() === 'room' && $variables['view_mode'] === 'teaser') {
    // Combine required fields to form card title.
    $variables['card_title'] = $node->get('field_room_room_id')->value . ' ' . strtoupper($node->get('field_room_building_id')->target_id);
  }
}

/**
 * Set dynamic allowed values for the instructional room category field.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function classrooms_core_room_category_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, bool &$cacheable = TRUE): array {
  $options = [
    'UNIVERSITY_CLASSROOM' => 'University Classroom',
    'PROGRAMMED_CLASSROOM' => 'Programmed Classroom',
  ];
  return $options;
}

/**
 * Implements hook_entity_presave().
 */
function classrooms_core_entity_presave(EntityInterface $entity): void {
  if (!$entity instanceof FieldableEntityInterface || $entity->bundle() !== 'room') {
    return;
  }
  // If we're coming from a batch process,
  // we want to skip the rest of this presave processing.
  if ($entity->isSyncing() === TRUE) {
    return;
  }

  $building_id = $entity
    ->field_room_building_id
    ?->target_id;
  $room_id = $entity
    ->field_room_room_id
    ?->value;

  if (!is_null($building_id) && !is_null($room_id)) {
    $building = \Drupal::entityTypeManager()->getStorage('building')->load($building_id);

    // Set title programmatically based on building and room id.
    $title = "{$building->label()} $room_id";
    $entity->set('title', $title);

    // Set a combined building id and room id value for use in views.
    $combined_id = "{$building->id()} $room_id";
    $entity->set('field_room_combined_id', $combined_id);
  }

  RoomItemProcessor::process($entity, RoomItemProcessor::getRecord($entity));
}

/**
 * Implements hook_theme().
 */
function classrooms_core_theme($existing, $type, $theme, $path) {
  return [
    'field__node__field_room_seating_chart__room__default' => [
      'template' => 'field--node--field-room-seating-chart--room--default',
      'base hook' => 'field',
    ],
    'field__node__field_room_guide__room__default' => [
      'template' => 'field--node--field-room-guide--room--default',
      'base hook' => 'field',
    ],
    'taxonomy_term__technology_features' => [
      'template' => 'taxonomy-term--technology-features',
      'base hook' => 'taxonomy',
    ],
    'building_link' => [
      'variables' => [
        'building_link' => NULL,
        'building_name' => NULL,
      ],
      'template' => 'building-link',
    ],
    'building_link_teaser' => [
      'variables' => [
        'building_link' => NULL,
        'building_name' => NULL,
      ],
      'template' => 'building-link-teaser',
    ],
    'room_map_link' => [
      'variables' => ['room_url_map' => NULL],
      'template' => 'room-map-link',
    ],
    'requestinfobutton_block' => [
      'template' => 'requestinfobutton-block',
      'variables' => [
        'check_availability_link' => NULL,
        'request_link' => NULL,
        'report_issue_link' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function classrooms_core_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->get('view');
  $view_display = $view->getDisplay();
  $block_id = $view_display->display['id'];

  if (in_array($block_id, ['block_rooms', 'block_programmed_rooms_list'])) {
    $building_filter = 'field_room_building_id_target_id';
    if (isset($form[$building_filter])) {
      uiowa_core_config_entity_filter_select($form[$building_filter], 'building');

      // Change the label from default `- Any -`.
      $form[$building_filter]['#empty_option'] = t('Building');

      // Hack to further treat this field as a select as it relates to BEF.
      // This is dependent on BEF select fields not changing in structure.
      $form[$building_filter]['#process'] = [
        [
          'Drupal\Core\Render\Element\Select',
          'processSelect',
        ],
        [
          'Drupal\Core\Render\Element\Select',
          'processAjaxForm',
        ],
        [
          'Drupal\inline_form_errors\RenderElementHelper',
          'processElement',
        ],
        [
          '\Drupal\Core\Render\Element\RenderElement',
          'processGroup',
        ],
      ];
      $form[$building_filter]['#pre_render'] = [
        [
          'Drupal\Core\Render\Element\Select',
          'preRenderSelect',
        ],
        [
          '\Drupal\Core\Render\Element\RenderElement',
          'preRenderGroup',
        ],
      ];
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function classrooms_core_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Grid display of Rooms on Units vocab.
  if ($view->id() === 'taxonomy_term') {

    if (\Drupal::routeMatch()->getRouteName() === 'entity.taxonomy_term.canonical' &&
      $page_term_id = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
      $term = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($page_term_id);
      if ($term->bundle() === 'units') {
        $view->display_handler->setOption('css_class', 'grid--threecol--33-34-33');

        // Get the current sort configuration.
        $sorts = $view->getDisplay()->getOption('sorts');

        // Add the necessary sorting configuration for title in ascending order.
        $sorts['title'] = [
          'id' => 'title',
          'table' => 'node_field_data',
          'field' => 'title',
          'order' => 'ASC',
          'entity_type' => 'node',
          'entity_field' => 'title',
        ];

        // Retrieve the title sort configuration.
        $titleSort = $sorts['title'];
        // Remove the title sort from the original position.
        unset($sorts['title']);
        // Insert the title sort configuration at the beginning of the array.
        $sorts = ['title' => $titleSort] + $sorts;

        // Update the sort configuration.
        $view->getDisplay()->setOption('sorts', $sorts);
      }
    }
  }
}

/**
 * Helper function to preprocess rooms list.
 */
function classrooms_core_preprocess_rooms_list(&$variables, ...$fields_to_hide) {
  foreach ($variables['rows'] as &$row_build) {
    if (!isset($row_build['content']['#hide_fields'])) {
      $row_build['content']['#hide_fields'] = [];
    }

    foreach ($fields_to_hide as $field_to_hide) {
      $row_build['content']['#hide_fields'][] = $field_to_hide;
    }
  }
}

/**
 * Implements template_preprocess_views_view().
 */
function classrooms_core_preprocess_views_view(&$variables) {
  // Check if the current view has a specific ID or display ID.
  if ($variables['view']->id() == 'room_list') {
    // Attach the library using the #attached property.
    $variables['#attached']['library'][] = 'uids_base/view-bef';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function classrooms_core_preprocess_views_view_unformatted(&$variables) {
  $view = $variables['view'];
  $variables['row_item_classes'] = [];

  switch ($view->current_display) {
    case 'block_programmed_rooms_list':
      classrooms_core_preprocess_rooms_list($variables, 'field_room_type');
      break;

    case 'block_rooms':
      classrooms_core_preprocess_rooms_list($variables, 'field_room_responsible_unit', 'field_room_features');
      break;
  }
}

/**
 * Import and update buildings.
 *
 * @return string
 *   The process completion message.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function classrooms_core_import_buildings(): string {
  // Check that this process is being called with
  // admin permissions.
  /** @var Drupal\uiowa_core\Access\UiowaCoreAccess $check */
  $check = \Drupal::service('uiowa_core.access_checker');
  /** @var Drupal\Core\Access\AccessResultInterface $access */
  $access = $check->access(\Drupal::currentUser()->getAccount());
  if (!$access) {
    return 'This is a restricted process.';
  }

  $entities_created = 0;
  /** @var Drupal\Core\Cache\CacheBackendInterface $maui_cache */
  $maui_cache = \Drupal::service('cache.uiowa_maui');
  /** @var Drupal\uiowa_maui\MauiApi $maui_api */
  $maui_api = \Drupal::service('uiowa_maui.api');

  $cid = 'uiowa_maui:request:buildings_filtered';
  if ($cached = $maui_cache->get($cid)) {
    $buildings = $cached->data;
  }
  else {
    // Request from MAUI API. We're interested
    // in both university and programmed classrooms.
    $buildings = [];
    foreach (['UNIVERSITY_CLASSROOM', 'PROGRAMMED_CLASSROOM'] as $filter) {
      $data = $maui_api->getClassroomsData($filter);
      foreach ($data as $room) {
        $buildings[strtolower($room->facilityBuilding?->building)] = [
          'name' => $room->facilityBuilding?->buildingDescr,
          'number' => $room->facilityBuilding?->buildingNumber,
        ];
      }
    }
    // Create a cache item set to 6 hours.
    $request_time = \Drupal::time()->getRequestTime();
    $maui_cache->set($cid, $buildings, $request_time + 21600);
  }

  if (!empty($buildings)) {
    // Check for existing building config entities before creating.
    $query = \Drupal::service('entity_type.manager')
      ->getStorage('building')
      ->getQuery()
      ->accessCheck(TRUE);
    $entities = $query->execute();

    foreach ($buildings as $building_id => $building_info) {
      if (!in_array($building_id, $entities)) {
        $building = Building::create([
          'id' => $building_id,
          'label' => $building_info['name'],
          'status' => 1,
          'number' => $building_info['number'],
        ]);
        $building->save();
        $entities_created++;
      }
    }
  }

  if ($entities_created > 0) {
    $arguments = [
      '@count' => $entities_created,
    ];
    $message = t('@count buildings were created. That is neat.', $arguments);
  }
  else {
    $message = 'Bummer. No new buildings were created. Maybe next time.';
  }
  \Drupal::logger('classrooms_core')->notice($message);
  return $message;
}

/**
 * Import and update rooms.
 *
 * @param int $batch
 *   The rooms to be processed in each batch.
 *
 * @return string
 *   The process completion message.
 */
function classrooms_core_import_rooms(int $batch): string {
  // Check that this process is being called with
  // admin permissions.
  /** @var Drupal\uiowa_core\Access\UiowaCoreAccess $check */
  $check = \Drupal::service('uiowa_core.access_checker');
  /** @var Drupal\Core\Access\AccessResultInterface $access */
  $access = $check->access(\Drupal::currentUser()->getAccount());
  if (!$access) {
    return 'This is a restricted process.';
  }

  $entity_type_manager = \Drupal::service('entity_type.manager');
  // Get existing room nodes.
  $query = $entity_type_manager
    ->getStorage('node')
    ->getQuery()
    ->condition('type', 'room')
    ->accessCheck(TRUE);
  $entities = $query->execute();

  $logger = \Drupal::logger('classrooms_core');

  // If we don't have any entities, send a message
  // and we're done.
  if (empty($entities)) {
    return 'No rooms available to update.';
  }

  // Retrieve building and room number values from existing nodes.
  $storage = $entity_type_manager->getStorage('node');
  $room_processor = new RoomItemProcessor();

  // Batch them up.
  // Create the operations array for the batch.
  $operations = [];
  $num_operations = 0;
  $batch_id = 1;
  // Quick manipulate to ensure we have a positve
  // integer to use for the batch size.
  $batch_size = max(1, abs($batch));
  for ($i = 0; $i < count($entities);) {
    $nids = $storage
      ->getQuery()
      ->condition('type', 'room')
      ->range($i, $batch_size)
      ->accessCheck()
      ->execute();
    $nodes = $storage->loadMultiple($nids);

    $operations[] = [
      '\Drupal\classrooms_core\BatchRooms::processNode',
      [
        $batch_id,
        $nodes,
        $room_processor,
      ],
    ];
    $batch_id++;
    $num_operations++;
    $i += $batch_size;
  }
  $batch = [
    'title' => t('Checking @num node(s) for updates.', [
      '@num' => $num_operations,
    ]),
    'operations' => $operations,
    'finished' => '\Drupal\classrooms_core\BatchRooms::processNodeFinished',
  ];

  // 5. Add batch operations as new batch sets.
  batch_set($batch);
  // 6. Process the batch sets.
  drush_backend_batch_process();
  // 7. Log some information.
  $message = 'Update batch operations ended.';
  $logger->notice($message);
  return $message;
}
