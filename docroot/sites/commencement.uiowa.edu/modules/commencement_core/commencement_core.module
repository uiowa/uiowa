<?php

/**
 * @file
 * Custom functionality for the Commencement website.
 */

use Drupal\commencement_core\Entity\Event;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\media\Entity\Media;
use Drupal\taxonomy\TermInterface;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function commencement_core_entity_bundle_info_alter(array &$bundles) {
  if (isset($bundles['node']['event'])) {
    $bundles['node']['event']['class'] = Event::class;
  }
}

/**
 * Implements hook_entity_presave().
 */
function commencement_core_entity_presave(EntityInterface $entity) {
  if ($entity instanceof TermInterface) {
    switch ($entity->bundle()) {
      case 'session':
        // Setting the title with the first/last name values.
        $title = $entity->get('field_session_session')->value . ' ' . $entity->get('field_session_year')->value;
        $entity->setName($title);
        break;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function commencement_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_event_form':
    case 'node_event_edit_form':
      // These are imported fields that editors should not interact with.
      $form['title']['#disabled'] = TRUE;
      $form['body']['#disabled'] = TRUE;
      $form['field_project_is_capital']['#disabled'] = TRUE;
      $form['field_event_contact']['#disabled'] = TRUE;
      $form['field_event_contact_email']['#disabled'] = TRUE;
      $form['field_event_contact_phone']['#disabled'] = TRUE;
      $form['field_event_room']['#disabled'] = TRUE;
      $form['field_event_venue']['#disabled'] = TRUE;
      $form['field_event_id']['#disabled'] = TRUE;
      $form['field_event_when']['#disabled'] = TRUE;
      $form['field_event_link']['#disabled'] = TRUE;
      $form['field_event_website']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function commencement_core_preprocess_field__field_media_file(&$variables) {
  // We don't want to display the file name as the link text for viewing a
  // program PDF. This changes it to 'View program' instead.
  if (isset($variables['element']['#object']) && $variables['element']['#object'] instanceof Media) {
    $media = $variables['element']['#object'];
    /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $referring_item */
    $referring_item = $media->_referringItem;
    if (!is_null($referring_item)) {
      $parent = $referring_item->getParent();
      if (!is_null($parent) && $parent->getName() === 'field_session_program' && isset($variables['element'][0]['#description'])) {
        $variables['items'][0]['content']['#description'] = t('View program');
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function commencement_core_preprocess_field(&$variables) {
  if ($variables['field_name'] === 'field_coll_section_collections') {
    if (isset($variables['element'][0]['#paragraph'])) {
      /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
      $paragraph = $variables['element'][0]['#paragraph'];
      // Somewhat counterintuitively, the paragraph referenced is
      // uiowa_collection_item and we actually want the parent entity.
      $parent = $paragraph->getParentEntity();
      $variables['id'] = $parent->id();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function commencement_core_preprocess_paragraph__uiowa_collection_item(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['paragraph'];

    if ($variables['view_mode'] === 'accordion') {

      $variables['delta'] = 0;
      $parent = $paragraph->getParentEntity();
      if ($parent->getType() === 'uiowa_collection_section') {
        $variables['parent_id'] = $parent->id();
        $id = $paragraph->id();

        /**
         * @var integer $delta
         * @var \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $item
         */
        foreach ($parent->field_coll_section_collections->getValue() as $delta => $item) {
          if ($item['target_id'] === $id) {
            $variables['delta'] = $delta;
            break;
          }
        }
      }
    }
  }
}

/**
 * Allowed values function to return a list of years for a session.
 */
function commencement_core_session_years_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $thisyear = (int) date('Y');

  $i = $thisyear + 10;
  $options = [];
  while ($i >= $thisyear - 50) :
    $options[$i] = $i;
    $i--;
  endwhile;
  return $options;
}

/**
 * Implements hook_theme().
 */
function commencement_core_theme($existing, $type, $theme, $path) {
  return [
    'field__paragraph__field_coll_section_collections' => [
      'template' => 'field/field--paragraph--field-coll-section-collections',
      'base hook' => 'field',
    ],
    'taxonomy_term__session' => [
      'template' => 'content/taxonomy-term--session',
      'base hook' => 'taxonomy_term',
    ],
  ];
}
