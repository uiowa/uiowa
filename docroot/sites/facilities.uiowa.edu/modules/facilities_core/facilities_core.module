<?php

/**
 * @file
 * Custom functionality the Facilities website.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_alter().
 */
function facilities_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_named_building_form':
    case 'node_named_building_edit_form':
      _sitenow_node_form_defaults($form, $form_state);
      break;

    case 'node_building_form':
    case 'node_building_edit_form':
      _sitenow_node_form_defaults($form, $form_state);
      // Display a message to admins that this content type is not available
      // to site roles other than admins and is managed by a drush command
      // `facilities_core:buildings_import`.
      \Drupal::messenger()->addWarning('This content type is managed through an automated process.
      Any buildings created or modified that are not in the source data will be overwritten.');
      break;

    case 'node_project_form':
    case 'node_project_edit_form':
      _sitenow_node_form_defaults($form, $form_state);
      // Set a placeholder text, and add a submit handler
      // for if we have a webcam link but no title.
      $form['field_project_webcam']['widget'][0]['title']['#placeholder'] = 'View webcam';
      // Unshift to put our handler at the front of the list,
      // to ensure the value will get set prior to save.
      array_unshift($form['actions']['submit']['#submit'], 'facilities_core_project_submit');
      // Display a message to admins that this content type is not available
      // to site roles other than admins and is managed by a drush command
      // `facilities_core:projectss_import`.
      \Drupal::messenger()->addWarning('This content type is managed through an automated process.
      Any projects created or modified that are not in the source data will be overwritten.');
      break;

  }
}

/**
 * Submit handler to set a default webcam link title if none is provided.
 */
function facilities_core_project_submit($form, FormStateInterface $form_state): void {
  $webcam = $form_state->getValue([
    'field_project_webcam',
    '0',
  ]);
  if (!empty($webcam['uri']) && empty($webcam['title'])) {
    $form_state->setValue([
      'field_project_webcam',
      '0',
      'title',
    ], 'View webcam');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function facilities_core_preprocess_field(&$variables) {
  switch ($variables['element']['#field_name']) {
    case 'field_building_honoree_name':
      // Change label for output.
      $variables['element']['#title'] = 'Honoree';
      $variables['label'] = 'Honoree';
      $node = $variables['element']['#object'];
      // Append the last name if it exists.
      if (!$node->get('field_building_honoree_last_name')->isEmpty()) {
        $last = $node->get('field_building_honoree_last_name')->value;
        // Loop through and overwrite the value.
        foreach ($variables['items'] as $key => $item) {
          $variables['items'][$key]['content']['#context']['value'] .= ' ' . $last;
        }
      }
      break;

    case 'field_building_year_built':
    case 'field_building_address':
    case 'field_building_additional_info':
      // Assumes these are being called in
      // views_block:named_buildings-block_building using Views field api.
      if ($variables['element']['#view_mode'] === '_custom') {
        $variables['label_display'] = 'inline';
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function facilities_core_preprocess_layout(&$variables) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
  $layout = $variables['layout'];

  // Process the header layout.
  if ($layout->id() === 'layout_header') {
    $node = \Drupal::routeMatch()->getParameter('node') ?? \Drupal::routeMatch()->getParameter('node_preview');
    if ($node instanceof NodeInterface) {
      if (in_array($node->getType(), [
        'named_building',
      ])) {
        if (!isset($variables['banner_attributes'])) {
          $variables['banner_settings'] = [];
        }
      }
      switch ($node->getType()) {
        case 'named_building':
          if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {

            // Set the featured image display.
            $variables['featured_image_display'] = 'medium';
          }
          break;

      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function facilities_core_preprocess_block(&$variables) {
  switch ($variables['plugin_id']) {
    case 'views_block:named_building_details-block_honoree':
      if (!isset($variables['attributes']['class'])) {
        $variables['attributes']['class'] = [''];
      }
      $variables['attributes']['class'][] .= 'bg--gray block-padding__all block-margin__default--removed';
      break;

    case 'views_block:named_building_details-block_building':
      if (!isset($variables['attributes']['class'])) {
        $variables['attributes']['class'] = [''];
      }
      $variables['attributes']['class'][] .= 'bg--white block-padding__all border';
      break;

  }
}
