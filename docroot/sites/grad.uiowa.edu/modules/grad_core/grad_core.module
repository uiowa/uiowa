<?php

/**
 * @file
 * Contains grad_srop.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_presave().
 */
function grad_core_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'thesis_defense':
    case 'scholar':
    case 'mentor':
      // Setting the title with the first/last name values.
      $output = $entity->get('field_person_first_name')->value . " " . $entity->get('field_person_last_name')->value;
      $entity->setTitle($output);
      break;

  }
}

/**
 * Implements hook_form_alter().
 */
function grad_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    // Node form modifications.
    case 'node_scholar_edit_form':
    case 'node_scholar_form':
    case 'node_mentor_edit_form':
    case 'node_mentor_form':
      _sitenow_node_form_defaults($form, $form_state);
      break;
    case 'node_thesis_defense_edit_form':
    case 'node_thesis_defense_form':
      // Our submit handler must execute before the layout_builder_styles one
      // so it can take advantage of the logic there.
      array_unshift($form['actions']['submit']['#submit'], '_grad_core_thesis_defense_submit');
    // Currently errors on save.
    // @todo Get this to work so that duration of 0 with no end date can occur.
    // if (isset($form['field_thesis_defense_date'])) {
    // $form['field_thesis_defense_date']['widget'][0]['end_value']['#access'] = FALSE;
    // $form['field_thesis_defense_date']['widget'][0]['duration']['#access'] = FALSE;
    // }
      break;
  }
}

/**
 * Custom form submit function for thesis_defense.
 *
 * If the start and end date don't match, set them to the same value.
 *
 * @param array $form
 *   The form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _grad_core_thesis_defense_submit(array &$form, FormStateInterface $form_state) {
  if ($date_field = $form_state->getValue(['field_thesis_defense_date', 0])) {
    $start = $date_field['value'];
    $end = $date_field['end_value'];

    // If these values don't match, make them match.
    if ($end->getPhpDateTime() != $start->getPhpDateTime()) {
      $form_state->setValue(['field_thesis_defense_date', 0, 'end_value'], $start);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function grad_core_preprocess_page_title(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == 'entity.node.canonical') {
      $node = \Drupal::routeMatch()->getParameter('node');
    }
    elseif ($route_name == 'entity.node.preview') {
      $node = \Drupal::routeMatch()->getParameter('node_preview');
    }
    if (isset($node)) {
      switch ($node->getType()) {
        case 'scholar':
        case 'mentor':
          if ($node->hasField('field_person_credential') && !$node->get('field_person_credential')
              ->isEmpty()) {
            $variables['subtitle'] = $node->field_person_credential->value;
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_theme for templates.
 */
function grad_core_theme($existing, $type, $theme, $path) {
  return [
    'field__field_thesis_defense_date' => [
      'template' => 'field--node--field-thesis-defense-date',
      'base hook' => 'field',
    ],
    'node__view__srop_scholars' => [
      'template' => 'node--view--srop-scholars',
      'base hook' => 'node',
    ],
    'views_view_unformatted__mentor_card' => [
      'template' => 'views-view-unformatted--mentor-card',
      'base hook' => 'view',
    ],
    'views_view_unformatted__scholar_card' => [
      'template' => 'views-view-unformatted--scholar-card',
      'base hook' => 'view',
    ],
  ];
}
