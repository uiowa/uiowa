<?php

/**
 * @file
 * Install tasks.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\redirect\Entity\Redirect;
use Drupal\Core\Config\FileStorage;

/**
 * Rename site config split to 'hr' so it is imported correctly.
 */
function hr_core_update_8001() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('config_split.config_split.site');

  $config
    ->set('id', 'hr')
    ->set('label', 'hr')
    ->set('description', 'The site config split.')
    ->set('folder', '../config/hr.uiowa.edu')
    ->set('weight', 90)
    ->setName('config_split.config_split.hr')
    ->save();

  drupal_flush_all_caches();
}

/**
 * Populate FAQ Categories.
 */
function hr_core_update_8002() {
  // Obtain configuration from yaml files.
  $config_path = DRUPAL_ROOT . '/../config/hr.uiowa.edu/';
  $source = new FileStorage($config_path);

  // Obtain the storage manager for vocabularies.
  // Create a new vocabulary from the yaml configuration and save.
  \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')
    ->create($source->read('taxonomy.vocabulary.faq_categories'))
    ->save();

  $terms = [
    'Collective Bargaining Updates',
    'Dual Career Services',
    'Tobacco Free Policy',
    'Reference Checks',
    'American with Disabilities Act (ADA)',
    'Behavior Risk Management',
    'Career Development',
    'Child Care Subsidy Program',
    'Competencies',
    'Employee Assistance Program',
    'Employee Exit Interviews',
    'FLSA Update - Employee Questions',
    'FLSA Update - Supervisor Questions',
    'Mandatory Reduction in Time',
    'Medical Documentation Management',
    'Military Leave Rights',
    'Merit Supervisory Exempt and Confidential',
    'Merit Positions',
    'Reduction in Force - AFSCME Covered Staff',
    'Reduction in Force - SEIU Covered Staff',
    'UI LEAD',
    'Working at Iowa',
  ];
  foreach ($terms as $term) {
    $new_term = Term::create([
      'vid' => 'faq_categories',
      'name' => $term,
    ]);

    $new_term->enforceIsNew();
    $new_term->save();
  }

  // Benefits tree.
  $parent = Term::create(['vid' => 'faq_categories', 'name' => 'Benefits']);
  $parent->enforceIsNew();
  $parent->save();
  $parent_tid = $parent->id();
  $terms = [
    'Affordable Care Act',
    'Dependent Eligibility Verification',
    'Catastrophic Leave',
    'Catastrophic Leave - Employees in Need of Donations',
    'Catastrophic Leave - Employees Making Donations',
    'Catastrophic Leave - Department Questions',
    'Change of Job (e.g. Merit to P&S or P&S to Merit)',
    'COBRA',
    'Flexible Spending Accounts',
    'General Benefits',
    'International Travel Insurance',
    'Long-Term Disability',
    'New Hires',
    'Prescription Drug Program',
    'Student Health Insurance',
    'Termination',
    'Treasury Direct (U.S. Savings Bonds)',
    "Workers’ Compensation – Employee Questions",
    "Workers' Compensation - Supervisor Questions",
  ];
  foreach ($terms as $term) {
    $new_term = Term::create([
      'vid' => 'faq_categories',
      'name' => $term,
      'parent' => $parent_tid,
    ]);

    $new_term->enforceIsNew();
    $new_term->save();
  }

  // Retirement tree.
  $parent = Term::create(['vid' => 'faq_categories', 'name' => 'Retirement']);
  $parent->enforceIsNew();
  $parent->save();
  $parent_tid = $parent->id();
  $terms = [
    'IPERS Refunds',
    'Retirement from the University',
    'Retirees',
    'Saving Extra for Retirement',
    'TIAA CREF Cash Withdrawals',
    'University Retirement Plans',
  ];
  foreach ($terms as $term) {
    $new_term = Term::create([
      'vid' => 'faq_categories',
      'name' => $term,
      'parent' => $parent_tid,
    ]);

    $new_term->enforceIsNew();
    $new_term->save();
  }

  // Compensation and Classification tree.
  $parent = Term::create([
    'vid' => 'faq_categories',
    'name' => 'Compensation and Classification',
  ]);

  $parent->enforceIsNew();
  $parent->save();
  $parent_tid = $parent->id();
  $terms = [
    'Pay Practices',
    'Pay Plan',
    'Job Classifications',
    'Professional and Scientific Compensation',
    'Working Titles',
    'Creating a Local Job Description',
  ];
  foreach ($terms as $term) {
    $new_term = Term::create([
      'vid' => 'faq_categories',
      'name' => $term,
      'parent' => $parent_tid,
    ]);

    $new_term->enforceIsNew();
    $new_term->save();
  }

  // Disaster Preparedness tree.
  $parent = Term::create([
    'vid' => 'faq_categories',
    'name' => 'Disaster Preparedness',
  ]);

  $parent->enforceIsNew();
  $parent->save();
  $parent_tid = $parent->id();
  $terms = [
    'Health and Safety Considerations',
    'Employee Contact Lists',
    'Notice to Employees and Unions',
    'Job Assignments / Reassignments',
    "Curtailment of Operations (Closure) and Employee's Pay Status",
  ];
  foreach ($terms as $term) {
    $new_term = Term::create([
      'vid' => 'faq_categories',
      'name' => $term,
      'parent' => $parent_tid,
    ]);

    $new_term->enforceIsNew();
    $new_term->save();
  }

  // liveWELL tree.
  $parent = Term::create(['vid' => 'faq_categories', 'name' => 'liveWELL']);
  $parent->enforceIsNew();
  $parent->save();
  $parent_tid = $parent->id();
  $terms = [
    'Live Healthy Iowa',
    'Health Coach Service',
    'liveWELL Points and Wellness Store',
    'My Health and Wellness',
    'Recreation Membership Incentive Program',
    'Personal Health Assessment',
    'My Personal Wellness Modules',
  ];
  foreach ($terms as $term) {
    $new_term = Term::create([
      'vid' => 'faq_categories',
      'name' => $term,
      'parent' => $parent_tid,
    ]);

    $new_term->enforceIsNew();
    $new_term->save();
  }

  // E-Verify tree.
  $parent = Term::create(['vid' => 'faq_categories', 'name' => 'E-Verify']);
  $parent->enforceIsNew();
  $parent->save();
  $parent_tid = $parent->id();
  $terms = [
    'Ongoing Compliance with E-Verify',
    'New Contracts with the E-Verify Clause',
  ];
  foreach ($terms as $term) {
    $new_term = Term::create([
      'vid' => 'faq_categories',
      'name' => $term,
      'parent' => $parent_tid,
    ]);

    $new_term->enforceIsNew();
    $new_term->save();
  }

  // I-9 Management tree.
  $parent = Term::create(['vid' => 'faq_categories', 'name' => 'I-9 Management']);
  $parent->enforceIsNew();
  $parent->save();
  $parent_tid = $parent->id();
  $terms = [
    'Using I-9 Management',
    'Timeline for Completing I-9s',
    'Login/Passwords',
    'Documents',
    'Non Residents',
    'Paper I-9 Forms',
    'Reverification/Rehires',
    'Reports',
  ];
  foreach ($terms as $term) {
    $new_term = Term::create([
      'vid' => 'faq_categories',
      'name' => $term,
      'parent' => $parent_tid,
    ]);

    $new_term->enforceIsNew();
    $new_term->save();
  }

  // Payroll tree.
  $parent = Term::create(['vid' => 'faq_categories', 'name' => 'Payroll']);
  $parent->enforceIsNew();
  $parent->save();
  $parent_tid = $parent->id();
  $terms = [
    'Year End Tax Forms',
    'Featured Questions',
    'TALX and THE WORK NUMBER®',
    'Multiple Direct Deposit',
    'Preferred First Name',
  ];
  foreach ($terms as $term) {
    $new_term = Term::create([
      'vid' => 'faq_categories',
      'name' => $term,
      'parent' => $parent_tid,
    ]);

    $new_term->enforceIsNew();
    $new_term->save();
  }
}

/**
 * Import new config ignore settings before uiowa_bar settings get erased.
 */
function hr_core_update_8003() {
  // Obtain configuration from yaml files.
  $config_path = DRUPAL_ROOT . '/profiles/custom/sitenow/config/sync/';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write('config_ignore.settings', $source->read('config_ignore.settings'));
}

/**
 * Purge existing redirects.
 */
function hr_core_update_8004() {
  \Drupal::database()->truncate('redirect')->execute();
}

/**
 * First batch of redirects.
 */
function hr_core_update_8005() {

  $path = drupal_get_path('module', 'hr_core');
  $csv = array_map('str_getcsv', file($path . '/redirects/batch01.csv'));
  $header = FALSE;

  if ($header === TRUE) {
    unset($csv[0]);
  }

  foreach ($csv as $redirect) {
    $source_path = $redirect[0];
    $redirect_path = $redirect[1];
    $existing = \Drupal::service('redirect.repository')->findBySourcePath($source_path);
    if (empty($existing)) {
      Redirect::create([
        'redirect_source' => $source_path,
        'redirect_redirect' => $redirect_path,
        'language' => 'en',
        'status_code' => '301',
      ])->save();
    }
  }
}

/**
 * Add uiowa_bootstrap to complete split so cim does not error on UIBS block deletion.
 */
function hr_core_update_8006() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('config_split.config_split.hr');

  $config
    ->set('theme', ['hr', 'uiowa_bootstrap'])
    ->save();

  drupal_flush_all_caches();
}

/**
 * Import HR split config_ignore.settings so uiowa_bar.settings are kept.
 */
function hr_core_update_8007() {
  $config_path = \Drupal::configFactory()->get('config_split.config_split.hr')->get('folder');
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write('config_ignore.settings', $source->read('config_ignore.settings'));
}

/**
 * Delete config that is no longer needed.
 */
function hr_core_update_9001() {
  $config_files = [
    'block.block.views_block__units_block_contact_info',
    'block.block.views_block__content_related_block_content_related',
    'block.block.hr_mainnavigation',
    'block.block.hr_sidebar_mainnavigation',
    'block.block.footersecond',
    'block.block.footer',
    'block.block.hr_breadcrumbs',
    'block.block.hr_content',
    'block.block.hr_messages',
    'block.block.hr_local_actions',
    'block.block.hr_page_title',
    'block.block.hr_primary_local_tasks',
    'block.block.hr_secondary_local_tasks',
    'hr.settings',
    'uiowa_bar.settings',
    'uiowa_bootstrap.settings',
    'uiowa_footer.settings',
  ];

  $config_factory = \Drupal::configFactory();

  foreach ($config_files as $config) {
    $config = $config_factory->getEditable($config);

    $config->delete();
  }
}
