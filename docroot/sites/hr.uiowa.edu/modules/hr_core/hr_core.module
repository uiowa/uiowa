<?php

/**
 * @file
 * Contains hr_core.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Views;

/**
 * Implements hook_module_implements_alter().
 */
function hr_core_module_implements_alter(&$implementations, $hook) {
  $hooks_to_order = [
    'form_alter',
  ];

  if (in_array($hook, $hooks_to_order)) {
    $group = $implementations['hr_core'];
    unset($implementations['hr_core']);
    $implementations['hr_core'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function hr_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_page_edit_form':
    case 'node_page_form':
      if (isset($form['field_related_content']) && isset($form['node_relations'])) {
        // Set field_related_content to node_reference group.
        $form['field_related_content']['#group'] = 'node_relations';
      }
      break;

  }
  switch ($form_id) {
    case 'node_page_edit_form':
    case 'node_page_form':
    case 'node_article_edit_form':
    case 'node_article_form':
      if (isset($form['field_reference'])) {
        // Set field_reference to node_reference group.
        $form['field_reference']['#group'] = 'node_relations';
      }
      break;
  }
}

/**
 * Implements hook_theme().
 */
function hr_core_theme($existing, $type, $theme, $path) {
  return [
    'block__views_block__units_block_contact_info' => [
      'template' => 'block--views-block--units-block-contact-info',
      'base hook' => 'block',
    ],
    'field__taxonomy_term__name__units__teaser' => [
      'template' => 'field--taxonomy-term--name--units--teaser',
      'base hook' => 'field',
    ],
    'paragraph__faqs__default' => [
      'template' => 'paragraph--faqs--default',
      'base hook' => 'paragraph',
    ],
    'node__faq__teaser' => [
      'template' => 'node--faq--teaser',
      'base hook' => 'node',
    ],
    'taxonomy_term__units' => [
      'template' => 'taxonomy-term--units',
      'base hook' => 'taxonomy_term',
    ],
    'views_view_unformatted__faqs__block_faqs' => [
      'template' => 'views-view-unformatted--faqs--block-faqs',
      'base hook' => 'view',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hr_core_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  switch ($paragraph->bundle()) {
    case 'faqs':
      $admin_context = \Drupal::service('router.admin_context');
      if (!$admin_context->isAdminRoute()) {
        // Display title if it exists.
        if ($paragraph->hasField('field_uip_display_title')) {
          if ((int) $paragraph->field_uip_display_title->value === 1) {
            $variables['display_title'] = TRUE;
          }
        }

        if ($paragraph->hasField('field_uip_classes') && !$paragraph->get('field_uip_classes')->isEmpty()) {
          $classes = [];
          $values = $paragraph->get('field_uip_classes')->getValue();
          array_walk_recursive($values, function ($v) use (&$classes) {
            $classes[] = $v;
          });
          $variables['attributes']['class'] = (isset($variables['attributes']['class'])) ? array_merge($variables['attributes']['class'], $classes) : $classes;
        }
        // Get field_uip_colwidth value.
        if ($paragraph->hasField('field_uip_colwidth')) {
          $variables['attributes']['class'][] = $paragraph->field_uip_colwidth->value;
        }
        // Get field_uip_id value.
        if ($paragraph->hasField('field_uip_id')) {
          $variables['attributes']['id'][] = Html::getClass($paragraph->field_uip_id->value);
        }

        $view = Views::getView('faqs');
        $view->setDisplay('block_faqs');

        if ($paragraph->hasField('field_reference') && !$paragraph->get('field_reference')->isEmpty()) {
          $tids = $paragraph->get('field_reference')->getValue();
          // Clean array of classes selected.
          $tids = array_column($tids, 'target_id');
        }
        else {
          $tids = ['all'];
        }
        // Contextual relationship filter.
        $args = implode('+', $tids);
        $view->setArguments([$args]);

        $variables['content']['view'] = $view->render();
        $variables['#attached']['library'][] = 'hr_core/faqs-js';
        $variables['#attached']['drupalSettings']['hr_core']['faqsJS']['accordion_id'] = $paragraph->id();

      }

      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hr_core_preprocess_node(&$variables) {

  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {

    $node = $variables["node"];
    switch ($node->getType()) {
      case 'faq':
        if ($variables["view_mode"] === 'teaser') {
          $variables['id'] = 'nid-' . $node->id();
          $variables['heading'] = 'heading-' . $node->id();
        }
        break;

    }
  }
}
