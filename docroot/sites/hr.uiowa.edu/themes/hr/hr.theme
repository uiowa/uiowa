<?php

/**
 * @file
 * HR theme.
 */

use Drupal\node\NodeInterface;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hr_theme_suggestions_block_alter(&$suggestions, $variables) {
  // Load theme suggestions for blocks from parent theme.
  // @see https://www.drupal.org/node/2165673
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('hr_', 'classy_', $suggestion);
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function hr_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hr_preprocess_menu_local_task(&$variables) {
  $variables['element']['#link']['url']->setOption('attributes', ['class' => ['nav-link']]);

  // If there is not an existing class array, create an empty array.
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }
  // Merge with any classes that may have been set by other
  // hook_preprocess_menu invocations.
  $variables['attributes']['class'] = array_merge($variables['attributes']['class'], ['nav-item']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hr_preprocess_block(&$variables) {
  $theme = \Drupal::service('theme.manager')->getActiveTheme();
  $node = \Drupal::routeMatch()->getParameter('node') ?? NULL;

  switch ($variables['elements']['#id']) {
    case $theme->getName() . '_breadcrumbs':
      // Visually hide breadcrumb block if publishing option is set to hidden.
      if ($node instanceof NodeInterface) {
        if ($node->hasField('field_publish_options') && !$node->get('field_publish_options')->isEmpty()) {
          $publish_options = $node->get('field_publish_options')->getValue();
          if (array_search('title_hidden', array_column($publish_options, 'value')) !== FALSE) {
            $variables['attributes']['class'][] = 'sr-only';
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hr_preprocess_paragraph__card(&$variables) {
  $paragraph = $variables['paragraph'];
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    if (isset($variables["content"]['field_card_image'])) {
      if ($paragraph->hasField('field_uip_classes') && !$paragraph->get('field_uip_classes')->isEmpty()) {
        $values = $paragraph->get('field_uip_classes')->getValue();
        if (array_search('card--img-icon', array_column($values, 'value')) !== FALSE) {
          // Render card image.
          $image_field = $paragraph->get('field_card_image');
          if (!$image_field->isEmpty()) {
            $image = $image_field->first()->getValue();
            $media = Media::load($image['target_id']);
            if ($media) {
              $media_field = $media->get('field_media_image')
                ->first()
                ->getValue();
              $file = File::load($media_field['target_id']);
              $uri = $file->getFileUri();
              $alt = ($media_field['alt'] ? $media_field['alt'] : '');
              $image = [
                '#theme' => 'image_style',
                '#width' => NULL,
                '#height' => NULL,
                '#style_name' => 'uiowa_card_icon',
                '#uri' => $uri,
                '#alt' => $alt,
                '#weight' => -1,
              ];
              $variables["content"]['card_image'] = $image;
              $variables['content']['card_image']['#theme_wrappers'] = [
                'container' => ['#attributes' => ['class' => ['card--img-icon-wrapper']]],
              ];
              unset($variables["content"]['field_card_image']);
            }
          }
        }
      }
    }
  }
}
