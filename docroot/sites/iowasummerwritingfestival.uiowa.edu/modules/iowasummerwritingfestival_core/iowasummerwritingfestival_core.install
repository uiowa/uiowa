<?php

/**
 * @file
 * Install, update and uninstall functions for the Iowa Summer Writing Festival Core module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_install().
 */
function admissions_core_install() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_uninstall().
 */
function admissions_core_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

function _event_type_map(): array {
  return [
    'Banquet' => 'Banquet',
    'BoardMeeting' => 'Board Meeting',
    'Colloquium' => 'Colloquium',
    'Conference' => 'Conference',
    'Convention' => 'Convention',
    'Course' => 'Course',
    'Exhibition' => 'Exhibition',
    'Exposition' => 'Exposition',
    'Fair' => 'Fair',
    'Festival' => 'Festival',
    'Fundraiser' => 'Fundraiser',
    'Gala' => 'Gala',
    'GeneralSession' => 'General Session',
    'GreenMeeting' => 'Green Meeting',
    'Lecture' => 'Lecture',
    'Meetup' => 'Meetup',
    'NetworkingEvent' => 'Networking Event',
    'Panel' => 'Panel',
    'Party' => 'Party',
    'PressConference' => 'Press Conference',
    'ProductLaunch' => 'Product Launch',
    'Reading' => 'Reading',
    'Reception' => 'Reception',
    'Retreat' => 'Retreat',
    'Round-Table' => 'Round-Table',
    'Seminar' => 'Seminar',
    'Session' => 'Session',
    'SocialEvent' => 'Social Event',
    'Symposium' => 'Symposium',
    'TradeShow' => 'Trade Show',
    'Workshop' => 'Workshop',
  ];
}

/**
 * Migrate from event type to Event categories.
 */
function iowasummerwritingfestival_core_update_9001(&$sandbox) {

  //  \Drupal::logger('iowasummerwritingfestival_core')->notice('BeeHaw');
  // Load the relevant config.
  $config_path = DRUPAL_ROOT . '/../config/features/event';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_files = $source->listAll();
  foreach ($config_files as $config) {
    $config_storage->write($config, $source->read($config));
  }
  // Enable the 'writinguniversity_migrate' split.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('config_split.config_split.event');
  $config->set('status', TRUE);
  $config->save(TRUE);

  // Load the relevant config.
  $config_path = DRUPAL_ROOT . '/../config/sites/iowasummerwritingfestival.uiowa.edu';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_files = $source->listAll();
  foreach ($config_files as $config) {
    $config_storage->write($config, $source->read($config));
  }
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('config_split.config_split.site');
  $config->set('status', TRUE);
  $config->save(TRUE);

  // Instantiate the typemap for later.
  $type_map = _event_type_map();

  foreach ($type_map as $key => $type) {
    Term::create([
      'name' => $type,
      'vid' => 'event_categories',
    ])->save();
  }

  // Process all the event nodes.
  if (!isset($sandbox['total'])) {
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'event')
      ->execute();

    $sandbox['total'] = count($query);
    $sandbox['current'] = 0;
    $sandbox['query'] = $query;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  // Loop through the same nodes in batches.
  $nodes_per_batch = 25;
  $batch = array_slice($sandbox['query'], $sandbox['current'], $sandbox['current'] + $nodes_per_batch);
  if (empty($batch)) {
    $sandbox['#finished'] = 1;
    return;
  }

  foreach ($batch as $nid) {
    // Load the node, set the field and save it with a new revision.
    $node = Node::load($nid);
    $node->setRevisionLogMessage('Automated save.');
    $node->save();
    $sandbox['current']++;
  }

  \Drupal::messenger()
    ->addMessage($sandbox['current'] . ' nodes processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }

  //https://drupal.stackexchange.com/questions/202860/unable-to-loop-through-all-nodes-in-a-content-type-and-load-them-without-hitting
//    \Drupal::entityManager()->getStorage('node')->resetCache(array($nid));
}
