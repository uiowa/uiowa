<?php

/**
 * @file
 * Install tasks.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Populate Building vocabulary.
 */
function its_core_update_8001() {
  // Obtain configuration from yaml files.
  $config_path = DRUPAL_ROOT . '/../config/sites/its.uiowa.edu/';
  $source = new FileStorage($config_path);

  // Obtain the storage manager for vocabularies.
  // Create a new vocabulary from the yaml configuration and save,
  // since this hook will run prior to config import.
  \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')
    ->create($source->read('taxonomy.vocabulary.building'))
    ->save();

  // Load our terms data from the CSV.
  /** @var \Drupal\Core\Extension\ExtensionPathResolver $path_resolver */
  $path_resolver = \Drupal::service('extension.path.resolver');
  $path = $path_resolver->getPath('module', 'its_core');
  $source = array_map('str_getcsv', file($path . '/terms/taxonomy_term_data.csv'));

  // Unset the first row, which is just the header
  // for reference but not needed here.
  unset($source[0]);

  foreach ($source as $source_term) {
    // Source terms as of 2023/12/8 only ever had a title,
    // and no description or other info, so we're skipping
    // the other rows. This can be updated should
    // that change prior to this hook running.
    $new_term = Term::create([
      'vid' => 'building',
      'name' => $source_term[2],
    ]);
    $new_term->enforceIsNew();
    $new_term->save();
  }

}

/**
 * Rename 'single-alert-bcc' configuration to 'single-alert-secondary'.
 */
function its_core_update_10001() {
  $config = \Drupal::configFactory()->getEditable('its_core.settings');
  $old_value = $config->get('single-alert-bcc');

  if ($old_value !== NULL) {
    $config->set('single-alert-secondary', $old_value);
    $config->clear('single-alert-bcc');
    $config->save(TRUE);
  }

  return t("The 'single-alert-bcc' configuration has been renamed to 'single-alert-secondary'.");
}

/**
 * Move folks to new role.
 */
function its_core_update_10002() {
  // Get users with the 'editor' role.
  $query = \Drupal::database()->select('user__roles', 'ur')
    ->fields('ur', ['entity_id'])
    ->condition('ur.roles_target_id', 'editor');

  // Use a subquery to get users who also have the 'publisher' role.
  $query->condition('ur.entity_id',
    \Drupal::database()->select('user__roles', 'ur_sub')
      ->fields('ur_sub', ['entity_id'])
      ->condition('ur_sub.roles_target_id', 'publisher'),
    'IN');

  // Fetch the user IDs.
  $uids = $query->execute()->fetchCol();

  if (!empty($uids)) {
    // Load the users and modify roles.
    $users = User::loadMultiple($uids);
    foreach ($users as $user) {
      $user->addRole('help_desk');
      $user->removeRole('publisher');
      $user->save();
    }
  }
}
