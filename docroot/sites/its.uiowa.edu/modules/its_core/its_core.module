<?php

/**
 * @file
 * Primary module hooks for ITS Core module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\its_core\Entity\ItsAlert;
use Drupal\its_core\Entity\Service;
use Drupal\sitenow_alerts\Entity\ClosableInterface;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function its_core_entity_bundle_info_alter(array &$bundles) {
  if (isset($bundles['node']['service'])) {
    $bundles['node']['service']['class'] = Service::class;
  }
  if (isset($bundles['node']['alert'])) {
    $bundles['node']['alert']['class'] = ItsAlert::class;
  }
}

/**
 * Implements hook_entity_presave().
 */
function its_core_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'alert':
      /*
       * Update the title based on several fields,
       * in one of the following formats.
       * [alert type] - [service], [building] - [additional details]
       * [alert type] - Multiple Services, [building] - [additional details]
       * [alert type] - [service], Multiple Buildings - [additional details]
       * [alert type] - Multiple Services, Buildings - [additional details]
       */
      $category = $entity->field_alert_category?->referencedEntities()[0] ?? NULL;
      $category = $category?->label();

      $services = $entity->field_alert_service_affected;
      $services = match ($services?->count()) {
        0, NULL => '',
        1 => $services->referencedEntities()[0]->label(),
        default => 'Multiple Services',
      };

      $buildings = $entity->field_alert_building;
      $buildings = match ($buildings?->count()) {
        0, NULL => '',
        1 => $buildings->referencedEntities()[0]->label(),
        default => 'Multiple Buildings',
      };

      if ($services === 'Multiple Services' && $buildings === 'Multiple Buildings') {
        $services_buildings = 'Multiple Services, Buildings';
      }
      else {
        $services_buildings = implode(', ', array_filter([$services, $buildings]));
      }

      $additional_details = $entity->field_alert_title_details?->value;

      $output = implode(' - ', array_filter([
        $category,
        $services_buildings,
        $additional_details,
      ]));
      $entity->setTitle($output);

      // If we're saving an outage or service degradation,
      // we also want to check and set our views cache invalidation date.
      if ($entity->isPublished()) {
        $cache_affected_targets = [];
        foreach (['service-degradation', 'outage', 'planned-maintenance', 'service-announcement'] as $target) {
          $cache_affected_targets[] = its_core_alert_type_tag_map($target);
        }
        if (in_array($entity->field_alert_category->target_id, $cache_affected_targets)) {
          if ($entity instanceof ClosableInterface) {
            // If the alert is already closed, we're not concerned
            // with invalidating caches.
            if (!$entity->isClosed()) {
              $state_key = 'its_core_alerts_next_clear';
              $next_clear = \Drupal::state()->get($state_key);
              // If we don't have a current next clear time,
              // or we need a sooner time, set it now.
              if (is_null($next_clear) || $entity->field_alert_date?->end_value < $next_clear) {
                \Drupal::state()->set($state_key, $entity->field_alert_date?->end_value);
              }
              // And invalidate the current cache to make sure
              // any updates are reflected.
              its_core_clear_custom_cache_tag('its-core-alerts');
            }
          }
        }
      }

      break;

  }
}

/**
 * Implements hook_preprocess_fieldset().
 */
function its_core_preprocess_fieldset(&$variables) {
  if (isset($variables['element']['#type']) &&
    $variables['element']['#type'] === 'radios') {
    $admin_context = \Drupal::service('router.admin_context');
    if ($admin_context->isAdminRoute()) {
      $current_route = \Drupal::routeMatch();
      $node_type_data = $current_route?->getParameter('node_type');
      $node_type = $node_type_data?->get('type');

      if (isset($node_type) && $node_type === 'alert') {
        $variables['description_display'] = 'before';
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function its_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {

    // Node form modifications.
    case 'node_service_edit_form':
    case 'node_service_form':
      _sitenow_node_form_defaults($form, $form_state);

      // Remove the empty option and default
      // to "No Charge" if no default value already exists.
      $form['field_service_fees']['widget']['#default_value'] = $form['field_service_fees']['widget']['#default_value'] ?? 'no_charge';
      unset($form['field_service_fees']['widget']['#options']['_none']);
      // Hide the additional fees info field unless
      // we've changed it from No Charge.
      $form['field_service_fees_info']['#states'] = [
        'visible' => [
          ':input[name="field_service_fees"]' => [
            'value' => 'other',
          ],
        ],
      ];

      // Split the audience checkboxes into two columns.
      $form['field_service_audience']['#attributes']['class'][] = 'multi--column';
      break;

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function its_core_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  $view = $form_state->get('view');
  if ($view->id() === 'services') {
    if ($form_id === 'views_exposed_form') {
      $form['#attributes']['class'][] = 'block--edge-to-edge bg--gray--pattern--community block-margin__top';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function its_core_preprocess_block(&$variables) {
  switch ($variables['elements']['#plugin_id']) {

    case 'field_block:node:article:field_article_related_service':
      $variables['attributes']['class'][] = 'article--meta';
      break;

    case 'field_block:node:alert:changed':
      // Update the display label for the "changed" field.
      if (isset($variables['content'][0]['#title'])) {
        $variables['content'][0]['#title'] = t('Last updated');
      }
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK() for layout__twocol__card_sidebar.
 */
function its_core_preprocess_layout__twocol__card_sidebar(&$variables) {
  // Directly specify a none-background
  // so it won't default to bg--white
  // in uids_base_preprocess_layout__twocol__card_sidebar().
  $variables['attributes']['class'][] = 'bg--none';

  // We will always have card content, since
  // we have fees or a default "No fees..." text,
  // so add our static card title.
  $variables['content']['card_title'] = [
    '#type' => 'markup',
    '#markup' => '<h2 class="headline headline--serif default"><span class="headline__heading">Overview</span></h2>',
  ];
}

/**
 * Implements hook_preprocess_field().
 */
function its_core_preprocess_field(&$variables, $hook) {
  switch ($variables['element']['#field_name']) {
    case 'field_alert_date':
      // If we don't have an "end" time or a specified start/text/time
      // in our start time, it means we have an "ongoing" event,
      // and we should alter the label.
      if (!isset($variables['items'][0]['content']['end'])
        && !isset($variables['items'][0]['content']['start']['#text']['time']['#markup'])
      ) {
        $variables['label'] = 'Start time';
      }
      break;

    case 'field_service_related_service':
      $variables['#attached']['library'][] = 'uids_base/tags';
      break;

    case 'field_service_fees':
      $node = $variables['element']['#object'];
      // Check that we have it marked as "other" for fees.
      if ($node->field_service_fees?->value === 'other' && !empty($node->field_service_fees_info?->value)) {
        $variables['items'][0]['content'] = [
          '#type' => 'processed_text',
          '#text' => $node->field_service_fees_info->value,
          '#format' => $node->field_service_fees_info->format,
          '#langcode' => 'en',
        ];
        // Wrap the field output in a <details> tag.
        $details_open = '<details>';
        $details_close = '</details>';

        // Get the field label and wrap it in a <summary> tag.
        $field_label = '<summary>' . $variables['label'] . '</summary>';
        $summary = [
          '#type' => 'markup',
          '#markup' => $field_label,
        ];

        // Wrap the field output in <details> tags and append the summary.
        $variables['items'][0]['content']['#prefix'] = $details_open . \Drupal::service('renderer')->render($summary);
        $variables['items'][0]['content']['#suffix'] = $details_close;
        // Hide the default label, because we have the details.
        $variables['label_display'] = 'visually_hidden';
      }
      // If it wasn't marked as "other" for fees,
      // replace the markup with the "no charge" verbiage.
      else {
        $variables['items'][0]['content'] = [
          '#type' => 'markup',
          '#markup' => '<p>There is no charge for use of this service.</p>',
        ];
      }

      break;

    case 'field_service_audience':
      $variables['label'] = 'Available to';
      break;

    case 'field_alert_service_affected':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_field_icon($variables, 'fa-circle-info fa-li');
        if (!empty($variables['element']['#items']) && !empty($variables['element']['#object']->field_alert_building->getValue())) {
          uiowa_core_set_attributes($variables, 'fa-ul element--inline field--separator');
        }
        elseif (!empty($variables['element']['#items']) && empty($variables['element']['#object']->field_alert_building->getValue())) {
          uiowa_core_set_attributes($variables, 'fa-ul element--inline');
        }
      }
      break;

    case 'field_alert_building':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_attributes($variables, 'element--inline');
        if (!empty($variables['element']['#items']) && empty($variables['element']['#object']->field_alert_service_affected->getValue())) {
          uiowa_core_set_field_icon($variables, 'fa-circle-info fa-li');
          uiowa_core_set_attributes($variables, 'fa-ul element--inline');
        }
      }
      break;

    case 'field_alert_category':
      $view_mode = $variables['element']['#view_mode'];
      if ($view_mode === 'teaser') {
        // Make categories badges.
        foreach ($variables['items'] as &$item) {
          $category_id = $item['content']['#entity']?->id();
          if (in_array($category_id, ['406', '416'])) {
            $content = $item['content']['#markup'];
            // @todo Update this to the preferred icon(s),
            //   or remove if we want the same icon for each.d
            switch ($category_id) {
              // Outage.
              case '406':
                $content = str_replace('badge--light', 'badge--orange', $content);
                $icon = '<span class="svg-inline--fa fas fa-exclamation-triangle"></span>';
                break;

              // Service Degradation.
              case '416':
                $content = str_replace('badge--light', 'badge--blue', $content);
                $icon = '<span class="svg-inline--fa fas fa-arrow-trend-down"></span>';
                break;

              default:
                $icon = '';
                break;
            }
            $content = substr_replace($content, "{$icon}", strpos($content, '>') + 1, 0);
            $item['content']['#markup'] = $content;
          }
        }
      }
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function its_core_preprocess_field__node__title(&$variables) {
  if ($variables['element']['#bundle'] === 'service') {
    // Remove existing page title classes.
    $variables['attributes']['class'] = [];
    // Add new page title classes.
    uiowa_core_set_attributes($variables, [
      'headline headline--serif',
      'headline--highlight',
      'headline--small',
    ]);
  }
}

/**
 * Implements hook_theme().
 */
function its_core_theme($existing, $type, $theme, $path) {
  return [
    'field__node__field_service_related_service__service__default' => [
      'template' => 'field--node--field-service-related-service--service--default',
      'base hook' => 'field',
    ],
    'field__node__field_service_quick_links__service__default' => [
      'template' => 'field--node--field-service-quick-links--service--default',
      'base hook' => 'field',
    ],
    'views_view_summary_unformatted__services' => [
      'template' => 'views-view-summary-unformatted--services',
      'base hook' => 'view',
    ],
  ];
}

/**
 * Implements template_preprocess_views_view_unformatted().
 */
function its_core_preprocess_views_view_unformatted(&$variables) {
  $view = $variables['view'];
  $view_id = $view->id();

  // Check if the current view has a specific ID or display ID.
  switch ($view_id) {
    case 'services':
      $variables['views_heading_classes'][] = 'headline headline--uppercase block-margin__bottom  block-margin__top--extra';
      break;

    case 'service_related_articles':
      foreach ($variables['rows'] as &$row_build) {
        if (!isset($row_build['content']['#override_styles'])) {
          $row_build['content']['#overrides_styles'] = [];
        }
        $row_build['content']['#override_styles']['card_media_position'] = '';
        $row_build['content']['#override_styles']['media_size'] = 'media--small';
        $row_build['content']['#override_styles']['border'] = '';
      }
      break;

    case 'alerts_list_block':
      if ($view->current_display === 'service_announcements') {
        foreach ($variables['rows'] as &$row_build) {
          $row_build['content']['#override_styles'] = [
            'border' => '',
          ];
        }
      }
      break;

  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function its_core_preprocess_breadcrumb(&$variables): void {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!isset($node) || $node->getType() !== 'service') {
    return;
  }
  // Grab our referenced Service Category taxonomy term
  // and add a crumb to the breadcrumb.
  if ($node->hasField('field_service_category')) {
    $category = $node->field_service_category?->entity;
    $category_name = $category?->name?->value;
    $category_path = \Drupal::service('path_alias.manager')
      ->getAliasByPath('/taxonomy/term/' . $category?->tid?->value);
    if (isset($category_name) && isset($category_path)) {
      $variables['breadcrumb'][] = [
        'text' => $category_name,
        'url' => $category_path,
      ];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function its_core_form_taxonomy_term_confirm_form_alter(&$form, FormStateInterface $form_state) {
  // Check/prevent tags from being deleted on single delete
  // if they are in our list of tags used to associate
  // alert types.
  // Only need to alter the delete operation form.
  if ($form_state->getFormObject()->getOperation() !== 'delete') {
    return;
  }
  $tag = $form_state
    ->getFormObject()
    ->getEntity();

  // Certain tags are required for alert category functionality.
  // Grab our associative TID map, and the array_values
  // will be the list of tag ids that can't be deleted.
  $required_tids = array_values(its_core_alert_type_tag_map());
  if (in_array($tag->id(), $required_tids)) {
    $form['actions']['submit']['#disabled'] = TRUE;
    $form['description']['#markup'] = its_core_prevent_tag_delete_message($tag->getName());
  }
}

/**
 * Custom warning message for alert category deletion detection.
 *
 * @param string $name
 *   The associated tag's name.
 *
 * @see its_core_form_taxonomy_tag_confirm_form_alter()
 */
function its_core_prevent_tag_delete_message($name) {
  return t('The tag <em>"@name"</em> is currently required for alert category selection. It cannot be deleted.', [
    '@name' => $name,
  ]);
}

/**
 * Mapping for alert types to their associated tags.
 *
 * @param string $alert_type
 *   The alert type as a machine name, or empty to fetch TIDs array.
 *
 * @return string|bool|array
 *   The associated TID or FALSE, or an associative array of TIDs.
 */
function its_core_alert_type_tag_map(string $alert_type = '') {
  $map = [
    'service-degradation' => '416',
    'outage' => '406',
    'planned-maintenance' => '411',
    'service-announcement' => '421',
  ];
  // If we aren't getting a specific TID,
  // then return the full map.
  if (empty($alert_type)) {
    return $map;
  }
  return $map[$alert_type] ?? FALSE;
}

/**
 * Implements hook_cron().
 */
function its_core_cron() {
  // Fetch our defined "next clear" which corresponds
  // to the next-most upcoming alert closure and
  // compare it to the current time.
  $state_key = 'its_core_alerts_next_clear';
  $next_clear = \Drupal::state()->get($state_key);
  // If we don't have a defined next clear,
  // then exit early.
  if (!$next_clear) {
    return;
  }

  $now = time();
  if ($next_clear !== -1 && $next_clear < $now) {
    // Invalidate the current tags.
    $tag = 'its-core-alerts';
    its_core_clear_custom_cache_tag($tag);
    // Get the next-most end time and set new expiration to it.
    \Drupal::state()->set($state_key, its_core_next_alert_close());
  }
}

/**
 * Fetches the next alert close timestamp.
 *
 * @return int
 *   The next closest alert close timestamp or -1 if non exists.
 */
function its_core_next_alert_close() {
  $next = \Drupal::database()->select('node__field_alert_date')
    ->fields('node__field_alert_date', ['field_alert_date_end_value'])
    ->condition('bundle', 'alert', '=')
    ->condition('field_alert_date_end_value', time(), '>')
    ->orderBy('field_alert_date_end_value', 'ASC')
    ->execute()
    ->fetch();
  if ($next) {
    return $next->field_alert_date_end_value;
  }
  else {
    return -1;
  }
}

/**
 * Helper function to invalidate and purge a given cache tag.
 *
 * @param string $tag
 *   The custom cache tag's name.
 */
function its_core_clear_custom_cache_tag(string $tag): void {
  \Drupal::service('cache_tags.invalidator')->invalidateTags([$tag]);
  // Check if we should be concerned with
  // purging as well, and if so, get it set up.
  if (\Drupal::moduleHandler()->moduleExists('acquia_purge')) {
    $purgeInvalidationFactory = \Drupal::service('purge.invalidation.factory');
    $purgeQueuers = \Drupal::service('purge.queuers');
    $purgeQueue = \Drupal::service('purge.queue');
    $queuer = $purgeQueuers->get('coretags');

    $invalidations = [$purgeInvalidationFactory->get('tag', $tag)];
    $purgeQueue->add($queuer, $invalidations);
  }
}
