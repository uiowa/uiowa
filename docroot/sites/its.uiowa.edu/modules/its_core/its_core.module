<?php

/**
 * @file
 * Primary module hooks for ITS Core module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\its_core\Entity\AlertUpdate;
use Drupal\its_core\Entity\ItsAlert;
use Drupal\its_core\Entity\Service;
use Drupal\node\NodeInterface;
use Drupal\sitenow_alerts\Entity\ClosableInterface;
use Drupal\smart_date\Entity\SmartDateFormat;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function its_core_entity_bundle_info_alter(array &$bundles) {
  if (isset($bundles['node']['service'])) {
    $bundles['node']['service']['class'] = Service::class;
  }
  if (isset($bundles['node']['alert'])) {
    $bundles['node']['alert']['class'] = ItsAlert::class;
  }
  if (isset($bundles['paragraph']['alert_update'])) {
    $bundles['paragraph']['alert_update']['class'] = AlertUpdate::class;
  }
}

/**
 * Implements hook_entity_presave().
 */
function its_core_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'alert':
      /*
       * Update the title based on several fields,
       * in one of the following formats.
       * [alert type] - [service], [building] - [additional details]
       * [alert type] - Multiple Services, [building] - [additional details]
       * [alert type] - [service], Multiple Buildings - [additional details]
       * [alert type] - Multiple Services, Buildings - [additional details]
       */
      $category = $entity->field_alert_category?->referencedEntities()[0] ?? NULL;
      $category = $category?->label();

      $services = $entity->field_alert_service_affected;
      $services = match ($services?->count()) {
        0, NULL => '',
        1 => $services->referencedEntities()[0]->label(),
        default => 'Multiple Services',
      };

      $buildings = $entity->field_alert_building;
      $buildings = match ($buildings?->count()) {
        0, NULL => '',
        1 => $buildings->referencedEntities()[0]->label(),
        default => 'Multiple Buildings',
      };

      if ($services === 'Multiple Services' && $buildings === 'Multiple Buildings') {
        $services_buildings = 'Multiple Services, Buildings';
      }
      else {
        $services_buildings = implode(', ', array_filter([$services, $buildings]));
      }

      $additional_details = $entity->field_alert_title_details?->value;

      $alert_title = implode(' - ', array_filter([
        $category,
        $services_buildings,
        $additional_details,
      ]));

      $entity->setTitle($alert_title);

      // Reorder the Updates to chronological.
      if ($entity->field_alert_updates?->count() > 1) {
        $entities = $entity->field_alert_updates->referencedEntities();
        usort($entities, function ($a, $b) {
          return $b->field_alert_update_date->value <=> $a->field_alert_update_date->value;
        });
        $entity->set('field_alert_updates', $entities);
      }

      // If we're saving an outage or service degradation,
      // we also want to check and set our views cache invalidation date.
      if ($entity->isPublished()) {
        $cache_affected_targets = array_column(its_core_alert_type_tag_map(), 'tid');

        if (in_array($entity->field_alert_category->target_id, $cache_affected_targets)) {
          if ($entity instanceof ClosableInterface) {
            // If the alert is already closed, we're not concerned
            // with invalidating caches.
            if (!$entity->isClosed()) {
              $state_key = 'its_core_alerts_next_clear';
              $next_clear = \Drupal::state()->get($state_key);
              // If we don't have a current next clear time,
              // or we need a sooner time, set it now.
              if (is_null($next_clear) || $entity->field_alert_date?->end_value < $next_clear) {
                \Drupal::state()->set($state_key, $entity->field_alert_date?->end_value);
              }
              // And invalidate the current cache to make sure
              // any updates are reflected.
              its_core_clear_custom_cache_tag('its-core-alerts');
            }
          }
        }

        // Mark node using temporary property for sending an alert email.
        $entity->send_email = $entity->get('field_alert_email')?->value;
        if ($entity->send_email) {
          // Append to the revision log if it exists, otherwise set one.
          // @todo see about line breaks in log message?
          $revision_log = $entity->get('revision_log')?->value;
          if (its_core_alert_email_addresses_exist()) {
            $message = 'Alert email triggered.';
          }
          else {
            $message = 'Alert email triggered but not sent. No recipient addresses have been set.';
            // No addresses are set, so we don't need to trigger the send.
            $entity->send_email = 0;
            $messenger = \Drupal::messenger();
            $messenger->addMessage("{$message} Please contact the site administrator.", $messenger::TYPE_WARNING);
          }
          // Set field back and record revision log info.
          $revision_log = "{$revision_log} {$message}";
          $entity->set('revision_log', $revision_log);
          $entity->set('field_alert_email', 0);
        }
      }

      break;

  }
}

/**
 * Helper function to check if an address is set for the alert email.
 *
 * @return bool
 *   Whether To or MS Teams address has been set.
 */
function its_core_alert_email_addresses_exist() {
  $settings = \Drupal::configFactory()->get('its_core.settings');
  return (!empty($settings->get('single-alert-to')) || !empty($settings->get('single-alert-secondary')));
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function its_core_node_insert(EntityInterface $entity) {
  $type = $entity->bundle();
  // Send an alert email if marked.
  if ($type === 'alert' && $entity->send_email) {
    $alert = its_core_alert_email_build($entity);
    its_core_send_alert_email($entity, $alert);
  }

}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function its_core_node_update(EntityInterface $entity) {
  $type = $entity->bundle();
  // Send an alert email if marked.
  if ($type === 'alert' && $entity->send_email) {
    $alert = its_core_alert_email_build($entity);
    its_core_send_alert_email($entity, $alert);
  }
}

/**
 * Construct alert render array for emails.
 */
function its_core_alert_email_build($entity) {
  $alert = [];
  $alert_title = $entity->label();

  // Construct date for output.
  $format = SmartDateFormat::load('compact');
  $settings = $format->getOptions();
  $start = $entity->get('field_alert_date')->value;
  $end = $entity->get('field_alert_date')->end_value;
  $date = \Drupal::service('smart_date.manager')->formatSmartDate($start, $end, $settings, NULL, 'string');

  $linked_alert_title = Link::fromTextAndUrl($alert_title,
    Url::fromRoute('entity.node.canonical', ['node' => $entity->id()]))->toString();
  $alert['title'] = [
    '#type' => 'html_tag',
    '#tag' => 'h2',
    '#value' => $date . ': ' . $linked_alert_title,
  ];

  // Include alert updates if they exist.
  $alert_updates = $entity->get('field_alert_updates')->referencedEntities();
  if ($alert_updates) {
    // Establish a wrapper render array.
    $alert['updates'] = [
      '#type' => 'container',
    ];
    // Small set of css tweaks for updates dates.
    $alert['updates']['styles'] = [
      '#type' => 'html_tag',
      '#tag' => 'style',
      '#value' => '.field--name-field-alert-update-date{font-style:italic;font-size:smaller;}',
    ];
    $alert['updates']['title'] = [
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => t('Updates:'),
    ];
    $updates = [];
    foreach ($alert_updates as $update) {
      $update_render = \Drupal::entityTypeManager()
        ->getViewBuilder('paragraph')
        ->view($update);
      $updates[] = $update_render;
    }

    $updates_render = \Drupal::service('renderer')->renderRoot($updates);
    $alert['updates']['content'] = [
      '#markup' => $updates_render,
    ];

    $alert['body_container'] = [
      '#type' => 'container',
    ];
    $alert['body_container']['title'] = [
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => t('Original notice:'),
    ];
  }

  $body = Markup::create(
    Html::transformRootRelativeUrlsToAbsolute(
      (string) $entity->get('body')?->value, \Drupal::request()
        ->getSchemeAndHttpHost()));
  if (!empty($body)) {
    $alert['body_container']['body'] = [
      '#type' => 'markup',
      '#markup' => $body,
    ];
  }

  // Output services if multiple.
  $services = $entity->get('field_alert_service_affected')?->referencedEntities();

  if (count($services) > 1) {
    $items = [];
    foreach ($services as $service) {
      $items[] = $service->label();
    }
    $alert['body_container']['services'] = [
      '#theme' => 'item_list',
      '#type' => 'ul',
      '#title' => 'Services:',
      '#items' => $items,
    ];
  }

  // Output buildings if multiple.
  $buildings = $entity->get('field_alert_building')?->referencedEntities();

  if (count($buildings) > 1) {
    $items = [];
    foreach ($buildings as $building) {
      $items[] = $building->label();
    }
    $alert['body_container']['buildings'] = [
      '#theme' => 'item_list',
      '#type' => 'ul',
      '#title' => 'Buildings:',
      '#items' => $items,
    ];
  }

  return $alert;
}

/**
 * Custom function to send an alert email.
 */
function its_core_send_alert_email($entity, $alert) {
  $alert_title = $entity->label();

  if ($entity->isClosed()) {
    $alert_title = '[Closed] ' . $alert_title;
  }

  $emailFactory = \Drupal::service('email_factory');

  // Include related links.
  $links = [
    Link::fromTextAndUrl('IT Service Alerts page',
      Url::fromUri('https://its.uiowa.edu/alerts')),
    Link::fromTextAndUrl('Calendar view of alerts',
      Url::fromUri('https://its.uiowa.edu/alerts/calendar')),
  ];

  $alert['related']['title'] = [
    '#type' => 'html_tag',
    '#tag' => 'h2',
    '#value' => t('Related links'),
  ];
  $alert['related']['list'] = [
    '#theme' => 'item_list',
    '#type' => 'ul',
    '#items' => $links,
  ];

  // Send email to the "To" recipient.
  $email = $emailFactory->newTypedEmail('its_core', 'its_alert_email', $alert)
    ->setSubject($alert_title);
  $email->send();

  // Send email to the "MS Teams" recipient.
  $email_secondary = $emailFactory->newTypedEmail('its_core', 'its_alert_email_secondary', $alert)
    ->setSubject($alert_title);
  $email_secondary->send();

  // Log whether the emails were sent or not.
  if ($email->getError() || $email_secondary->getError()) {
    \Drupal::logger('its_core')->error(t('Unable to send one or both alert emails from alert @id', [
      '@id' => $entity->id(),
    ]));
  }
  else {
    \Drupal::logger('its_core')->notice(t('Email sent for alert @id', [
      '@id' => $entity->id(),
    ]));
  }
}

/**
 * Implements hook_field_widget_complete_WIDGET_TYPE_form_alter().
 */
function its_core_field_widget_complete_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['widget']['#field_name'] === 'field_alert_updates') {
    // Don't allow the editor to rearrange the updates,
    // because they will be sorted chronologically
    // by the node presave.
    // Disable the draghandles by disallowing the reference changes,
    // and also remove the dragdrop mode from the dropdown actions.
    // Based on https://www.drupal.org/project/paragraphs/issues/3036020#comment-12989072.
    // @todo Remove when Paragraphs updates to have
    //   a no-dragging setting option.
    $element['widget']['#allow_reference_changes'] = FALSE;
    if (isset($element['widget']['header_actions']['dropdown_actions']['dragdrop_mode'])) {
      unset($element['widget']['header_actions']['dropdown_actions']['dragdrop_mode']);
    }
  }
}

/**
 * Implements hook_preprocess_fieldset().
 */
function its_core_preprocess_fieldset(&$variables) {
  if (isset($variables['element']['#type']) &&
    $variables['element']['#type'] === 'radios') {
    $admin_context = \Drupal::service('router.admin_context');
    if ($admin_context->isAdminRoute()) {
      $current_route = \Drupal::routeMatch();
      $node_type_data = $current_route?->getParameter('node_type');
      $node_type = $node_type_data?->get('type');

      if (isset($node_type) && $node_type === 'alert') {
        $variables['description_display'] = 'before';
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function its_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {

    case 'node_alert_edit_form':
    case 'node_alert_form':
      $form['field_alert_date']['widget'][0]['duration']['#title'] = t('End Date');
      $form['field_alert_updates']['widget']['add_more']['#suffix'] = t('to this alert');
      // Attach smart_date override js.
      $form['#attached']['library'][] = 'its_core/smartdate-override';
      // Prevent users that can't publish from sending an email.
      if (!\Drupal::currentUser()->hasPermission('use editorial transition publish')) {
        $form['field_alert_email']['#access'] = FALSE;
        // Supplement moderation selection with description text explaining workflow.
        $form['moderation_state']['widget'][0]['state']['#description'] = t('In order to publish, alert must be saved as "Submit" to notify the ITS Help Desk.');
      }
      // Only allow access to these fields for users
      // with the 'administer site configuration' permission.
      if (!\Drupal::currentUser()->hasPermission('administer site configuration')) {
        unset($form["path"]);
        unset($form["field_meta_tags"]);
      }
      break;

    // Node form modifications.
    case 'node_service_edit_form':
    case 'node_service_form':
      _sitenow_node_form_defaults($form, $form_state);

      // Remove the empty option and default
      // to "No Charge" if no default value already exists.
      $form['field_service_fees']['widget']['#default_value'] = $form['field_service_fees']['widget']['#default_value'] ?? 'no_charge';
      unset($form['field_service_fees']['widget']['#options']['_none']);
      // Hide the additional fees info field unless
      // we've changed it from No Charge.
      $form['field_service_fees_info']['#states'] = [
        'visible' => [
          ':input[name="field_service_fees"]' => [
            'value' => 'other',
          ],
        ],
      ];

      // Split the audience checkboxes into two columns.
      $form['field_service_audience']['#attributes']['class'][] = 'multi--column';
      break;

    // Node form modifications.
    case 'node_support_article_edit_form':
    case 'node_support_article_form':
      /** @var Drupal\uiowa_core\Access\UiowaCoreAccess $check */
      $check = \Drupal::service('uiowa_core.access_checker');

      /** @var Drupal\Core\Access\AccessResultInterface $access */
      $access = $check->access(\Drupal::currentUser()->getAccount());

      if ($access->isForbidden()) {
        unset($form["path"]);
      }

      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function its_core_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  $view = $form_state->get('view');
  if ($view->id() === 'services') {
    if ($form_id === 'views_exposed_form') {
      $form['#attributes']['class'][] = 'block--edge-to-edge bg--gray--pattern--community block-margin__top';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function its_core_preprocess_block(&$variables) {
  switch ($variables['elements']['#plugin_id']) {

    case 'field_block:node:article:field_article_related_service':
      $variables['attributes']['class'][] = 'article--meta';
      break;

    case 'field_block:node:alert:changed':
      // Update the display label for the "changed" field.
      if (isset($variables['content'][0]['#title'])) {
        $variables['content'][0]['#title'] = t('Last updated');
      }
      break;

    case 'views_block:alerts_list_block-alerts_calendar':
      $variables['#attached']['library'][] = 'uids_base/view-calendar';
      break;

    case 'views_block:services_support_articles-articles_block':
      $variables['#attached']['library'][] = 'uids_base/related';
      break;

    case 'field_block:node:support_article:field_support_article_short_desc':
      uiowa_core_set_attributes($variables, 'element--light-intro');
      break;

    case 'field_block:node:support_article:nid':
      $variables['#attached']['library'][] = 'uids_base/node-type-article';
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function its_core_preprocess_layout(&$variables) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
  $layout = $variables['layout'];

  $node = \Drupal::routeMatch()->getParameter('node') ?? \Drupal::routeMatch()->getParameter('node_preview');
  if ($node instanceof NodeInterface && $node->getType() === 'support_article') {
    switch ($layout->id()) {
      case 'layout_twocol':
        if (isset($variables['region_attributes']['second'], $variables['content']['#settings']['layout_builder_custom_unique_id']) && $variables['content']['#settings']['layout_builder_custom_unique_id'] === 'support-layout') {
          $variables['region_attributes']['second']->addClass('border--left element--padding__left article--meta');
        }
        break;

    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for layout__twocol__card_sidebar.
 */
function its_core_preprocess_layout__twocol__card_sidebar(&$variables) {
  // Directly specify a none-background
  // so it won't default to bg--white
  // in uids_base_preprocess_layout__twocol__card_sidebar().
  $node = \Drupal::routeMatch()->getParameter('node') ?? \Drupal::routeMatch()->getParameter('node_preview');
  if ($node instanceof NodeInterface && $node->getType() === 'service') {
    $variables['attributes']['class'][] = 'bg--none';
    // We will always have card content, since
    // we have fees or a default "No fees..." text,
    // so add our static card title.
    $variables['content']['card_title'] = [
      '#type' => 'markup',
      '#markup' => '<h2 class="headline headline--serif default block-margin__bottom"><span class="headline__heading">Overview</span></h2>',
    ];
  }
}

/**
 * Implements hook_preprocess_field().
 */
function its_core_preprocess_field(&$variables, $hook) {
  switch ($variables['element']['#field_name']) {
    case 'field_alert_date':
      // If we don't have an "end" time or a specified start/text/time
      // in our start time, it means we have an "ongoing" event,
      // and we should alter the label.
      if (!isset($variables['items'][0]['content']['end'])
        && !isset($variables['items'][0]['content']['start']['#text']['time']['#markup'])
      ) {
        $variables['label'] = 'Start time';
      }
      break;

    case 'field_service_related_service':
      $variables['#attached']['library'][] = 'uids_base/tags';
      break;

    case 'field_service_fees':
      $node = $variables['element']['#object'];
      // Check that we have it marked as "other" for fees.
      if ($node->field_service_fees?->value === 'other' && !empty($node->field_service_fees_info?->value)) {
        $variables['items'][0]['content'] = [
          '#type' => 'processed_text',
          '#text' => $node->field_service_fees_info->value,
          '#format' => $node->field_service_fees_info->format,
          '#langcode' => 'en',
        ];
        // Wrap the field output in a <details> tag.
        $details_open = '<details>';
        $details_close = '</details>';

        // Get the field label and wrap it in a <summary> tag.
        $field_label = '<summary>' . $variables['label'] . '</summary>';
        $summary = [
          '#type' => 'markup',
          '#markup' => $field_label,
        ];

        // Wrap the field output in <details> tags and append the summary.
        $variables['items'][0]['content']['#prefix'] = $details_open . \Drupal::service('renderer')->render($summary);
        $variables['items'][0]['content']['#suffix'] = $details_close;
        // Hide the default label, because we have the details.
        $variables['label_display'] = 'visually_hidden';
      }
      // If it wasn't marked as "other" for fees,
      // replace the markup with the "no charge" verbiage.
      else {
        $variables['items'][0]['content'] = [
          '#type' => 'markup',
          '#markup' => '<p>There is no charge for use of this service.</p>',
        ];
      }

      break;

    case 'field_service_audience':
      $variables['label'] = 'Available to';
      break;

    case 'field_alert_service_affected':
      if ($variables['element']['#view_mode'] == 'teaser') {
        if (!empty($variables['element']['#items']) && !empty($variables['element']['#object']->field_alert_building->getValue())) {
          uiowa_core_set_attributes($variables, 'fa-field-item element--inline field--separator');
          uiowa_core_set_field_icon($variables, 'fa-circle-info', '', 'Services and buildings affected');
        }
        elseif (!empty($variables['element']['#items']) && empty($variables['element']['#object']->field_alert_building->getValue())) {
          uiowa_core_set_attributes($variables, 'fa-field-item element--inline');
          uiowa_core_set_field_icon($variables, 'fa-circle-info', '', 'Services affected');
        }
      }
      break;

    case 'field_alert_building':
      if ($variables['element']['#view_mode'] == 'teaser') {
        uiowa_core_set_attributes($variables, 'element--inline');
        if (!empty($variables['element']['#items']) && empty($variables['element']['#object']->field_alert_service_affected->getValue())) {
          uiowa_core_set_field_icon($variables, 'fa-circle-info', '', 'Buildings affected');
          uiowa_core_set_attributes($variables, 'fa-field-item');
        }
      }
      break;

    case 'field_alert_update_date':
      uiowa_core_set_field_icon($variables, 'fa-clock');
      uiowa_core_set_attributes($variables, 'fa-field-item');
      break;

    case 'field_alert_updates':
      uiowa_core_set_attributes($variables, 'list-container__inner');
      break;

    case 'field_alert_category':
      // Make categories badges.
      foreach ($variables['items'] as &$item) {
        $category_id = $item['content']['#entity']?->id();
        if (in_array($category_id, ['406', '416', '411', '421'])) {
          $content = $item['content']['#markup'];
          switch ($category_id) {
            // Outage.
            case '406':
              $content = str_replace('badge--light', 'badge--orange', $content);
              $icon = '<span class="svg-inline--fa fas fa-exclamation-triangle"></span>';
              break;

            // Service Degradation.
            case '416':
              $content = str_replace('badge--light', 'badge--blue', $content);
              $icon = '<span class="svg-inline--fa fas fa-arrow-trend-down"></span>';
              break;

            // Planned Maintenance.
            case '411':
              $content = str_replace('badge--light', 'badge--green', $content);
              $icon = '';
              break;

            // Service Announcement.
            case '421':
              $content = str_replace('badge--light', 'badge--cool-gray', $content);
              $icon = '';
              break;

            default:
              $icon = '';
              break;
          }
          $content = substr_replace($content, "{$icon}", strpos($content, '>') + 1, 0);
          $item['content']['#markup'] = $content;
        }
      }
      break;

    case 'nid':
      if ($variables['element']['#bundle'] === 'support_article') {
        $variables['label'] = 'Article number';
      }
      break;

    case 'changed':
      if ($variables['element']['#bundle'] === 'support_article') {
        $variables['label'] = 'Last updated';
      }
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function its_core_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['paragraph'];

    $collection_types = [
      'support_article_faqs' => 'field_support_article_faqs',
    ];

    if (in_array($paragraph->bundle(), array_keys($collection_types))) {
      $items_field = $collection_types[$paragraph->bundle()];
      $variables['delta'] = 0;

      $parent = $paragraph->getParentEntity();
      if ($parent instanceof ContentEntityInterface) {
        $variables['parent_id'] = $parent->id();
        if ($parent->hasField($items_field)) {
          $id = $paragraph->id();
          /**
           * @var integer $delta
           * @var \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $item
           */
          foreach ($parent->get($items_field)->getValue() as $delta => $item) {
            if ($item['target_id'] === $id) {
              $variables['delta'] = $delta;
              break;
            }
          }
        }
      }

    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function its_core_node_load($entities) {
  foreach ($entities as $entity) {
    // Override the alert title if the alert is closed.
    if ($entity->bundle() === 'alert' && $entity->isClosed() && $entity->hasField('title')) {
      $title = '[Closed] ' . $entity->getTitle();
      $entity->set('title', $title);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function its_core_preprocess_field__node__title(&$variables) {
  if ($variables['element']['#bundle'] === 'service') {
    // Remove existing page title classes.
    $variables['attributes']['class'] = [];
    // Add new page title classes.
    uiowa_core_set_attributes($variables, [
      'headline headline--serif',
      'headline--highlight',
      'headline--small',
    ]);
  }
}

/**
 * Implements hook_theme().
 */
function its_core_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__support_article_faqs__default' => [
      'template' => 'paragraph--support-article-faqs--default',
      'base hook' => 'paragraph',
    ],
    'field__node__field_support_article_faqs' => [
      'template' => 'field--node--field-support-article-faqs',
      'base hook' => 'field',
    ],
    'field__node__field_service_related_service__service__default' => [
      'template' => 'field--node--field-service-related-service--service--default',
      'base hook' => 'field',
    ],
    'field__node__field_service_quick_links__service__default' => [
      'template' => 'field--node--field-service-quick-links--service--default',
      'base hook' => 'field',
    ],
    'views_view_summary_unformatted__services' => [
      'template' => 'views-view-summary-unformatted--services',
      'base hook' => 'view',
    ],
  ];
}

/**
 * Implements template_preprocess_views_view_unformatted().
 */
function its_core_preprocess_views_view_unformatted(&$variables) {
  $view = $variables['view'];
  $view_id = $view->id();

  // Check if the current view has a specific ID or display ID.
  switch ($view_id) {
    case 'services':
      $variables['views_heading_classes'][] = 'headline headline--uppercase block-margin__bottom  block-margin__top--extra';
      break;

    case 'service_related_articles':
      foreach ($variables['rows'] as &$row_build) {
        if (!isset($row_build['content']['#override_styles'])) {
          $row_build['content']['#overrides_styles'] = [];
        }
        $row_build['content']['#override_styles']['card_media_position'] = '';
        $row_build['content']['#override_styles']['media_size'] = 'media--small';
        $row_build['content']['#override_styles']['border'] = '';
      }
      break;

    case 'alerts_list_block':
      if ($view->current_display === 'alert_status') {
        // Attach the library using the #attached property.
        $variables['#attached']['library'][] = 'uids_base/view-bef';
      }
      break;

  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function its_core_preprocess_breadcrumb(&$variables): void {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!isset($node) || $node->getType() !== 'service') {
    return;
  }
  // Grab our referenced Service Category taxonomy term
  // and add a crumb to the breadcrumb.
  if ($node->hasField('field_service_category')) {
    $category = $node->field_service_category?->entity;
    $category_name = $category?->name?->value;
    $category_path = \Drupal::service('path_alias.manager')
      ->getAliasByPath('/taxonomy/term/' . $category?->tid?->value);
    if (isset($category_name) && isset($category_path)) {
      $variables['breadcrumb'][] = [
        'text' => $category_name,
        'url' => $category_path,
      ];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function its_core_form_taxonomy_term_confirm_form_alter(&$form, FormStateInterface $form_state) {
  // Check/prevent tags from being deleted on single delete
  // if they are in our list of tags used to associate
  // alert types.
  // Only need to alter the delete operation form.
  if ($form_state->getFormObject()->getOperation() !== 'delete') {
    return;
  }
  $tag = $form_state
    ->getFormObject()
    ->getEntity();

  // Certain tags are required for alert category functionality.
  // Grab our associative TID map, and the array_values
  // will be the list of tag ids that can't be deleted.
  $required_tids = array_column(its_core_alert_type_tag_map(), 'tid');
  if (in_array($tag->id(), $required_tids)) {
    $form['actions']['submit']['#disabled'] = TRUE;
    $form['description']['#markup'] = its_core_prevent_tag_delete_message($tag->getName());
  }
}

/**
 * Custom warning message for alert category deletion detection.
 *
 * @param string $name
 *   The associated tag's name.
 *
 * @see its_core_form_taxonomy_tag_confirm_form_alter()
 */
function its_core_prevent_tag_delete_message($name) {
  return t('The tag <em>"@name"</em> is currently required for alert category selection. It cannot be deleted.', [
    '@name' => $name,
  ]);
}

/**
 * Mapping for alert types to their associated tags and colors.
 *
 * @param string $alert_type
 *   The alert type as a machine name, or empty to fetch the full mapping.
 *
 * @return array|bool
 *   The associated array with TID and color, or FALSE, or the full associative array.
 */
function its_core_alert_type_tag_map(string $alert_type = '') {
  $map = [
    'service-degradation' => ['tid' => '416', 'color' => 'blue'],
    'outage' => ['tid' => '406', 'color' => 'orange'],
    'planned-maintenance' => ['tid' => '411', 'color' => 'green'],
    'service-announcement' => ['tid' => '421', 'color' => 'cool-gray'],
  ];
  // If we aren't getting a specific TID,
  // then return the full map.
  if (empty($alert_type)) {
    return $map;
  }
  return $map[$alert_type] ?? FALSE;
}

/**
 * Implements hook_cron().
 */
function its_core_cron() {
  // Fetch our defined "next clear" which corresponds
  // to the next-most upcoming alert closure and
  // compare it to the current time.
  $state_key = 'its_core_alerts_next_clear';
  $next_clear = \Drupal::state()->get($state_key);
  // If we don't have a defined next clear,
  // then exit early.
  if (!$next_clear) {
    return;
  }

  $now = time();
  if ($next_clear !== -1 && $next_clear < $now) {
    // Invalidate the current tags.
    $tag = 'its-core-alerts';
    its_core_clear_custom_cache_tag($tag);
    // Get the next-most end time and set new expiration to it.
    \Drupal::state()->set($state_key, its_core_next_alert_close());
  }
}

/**
 * Fetches the next alert close timestamp.
 *
 * @return int
 *   The next closest alert close timestamp or -1 if non exists.
 */
function its_core_next_alert_close() {
  $next = \Drupal::database()->select('node__field_alert_date')
    ->fields('node__field_alert_date', ['field_alert_date_end_value'])
    ->condition('bundle', 'alert', '=')
    ->condition('field_alert_date_end_value', time(), '>')
    ->orderBy('field_alert_date_end_value', 'ASC')
    ->execute()
    ->fetch();
  if ($next) {
    return $next->field_alert_date_end_value;
  }
  else {
    return -1;
  }
}

/**
 * Helper function to invalidate and purge a given cache tag.
 *
 * @param string $tag
 *   The custom cache tag's name.
 */
function its_core_clear_custom_cache_tag(string $tag): void {
  \Drupal::service('cache_tags.invalidator')->invalidateTags([$tag]);
  // Check if we should be concerned with
  // purging as well, and if so, get it set up.
  if (\Drupal::moduleHandler()->moduleExists('acquia_purge')) {
    $purgeInvalidationFactory = \Drupal::service('purge.invalidation.factory');
    $purgeQueuers = \Drupal::service('purge.queuers');
    $purgeQueue = \Drupal::service('purge.queue');
    $queuer = $purgeQueuers->get('coretags');

    $invalidations = [$purgeInvalidationFactory->get('tag', $tag)];
    $purgeQueue->add($queuer, $invalidations);
  }
}
