<?php

/**
 * @file
 * Primary module hooks for Now Core module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function now_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_article_form' || $form_id === 'node_article_edit_form') {
    $form['field_achievement_category']['#states'] = [
      'visible' => [
        ':input[name="field_article_type"]' => [
          'value' => 'achievement',
        ],
      ],
    ];

    $form['field_embargo_information']['#states'] = [
      'visible' => [
        ':input[name="field_article_type"]' => [
          'value' => 'news-feature',
        ],
      ],
    ];

    $form['field_original_publication_date']['#states'] = [
      'visible' => [
        ':input[name="field_article_type"]' => [
          'value' => 'in-the-news',
        ],
      ],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function now_core_node_presave($entity) {
  // Currently we're only interested in altering
  // functionality for the news-feature content type.
  // This should be updated if this gets expanded further.
  if ($entity->getType() != 'article' || $entity->field_article_type->value != 'news-feature') {
    return;
  }
  // If we don't have these, there's no functionality to alter.
  if (!isset($entity->moderation_state) || !isset($entity->field_embargo_information)) {
    return;
  }
  // We only need to change things if both there is
  // an embargo message present and we are trying to publish.
  if (!empty($entity->field_embargo_information->value)) {
    if ($entity->moderation_state->value != 'published') {
      return;
    }
    // If it's brand new, then we'll go ahead and set it to draft
    // rather than publish.
    if ($entity->isNew()) {
      $alt_state = 'draft';
    }
    // If it's not new, then let's set it back to it's previous state
    // which wasn't published.
    else {
      // @todo How to handle the case where the article was previously published?
      //   Defaulting to set it to 'draft' still leaves a live version
      //   published. Probably set it to 'archived' instead, then.
      //   That functionality would match,
      //   but feels iffy what should likely be new content.
      $alt_state = ($entity->original->moderation_state->value == 'published') ? 'draft' : $entity->original->moderation_state->value;
    }
    // @todo Add a user message along with changing this state.
    $entity->moderation_state = $alt_state;
  }
}
