<?php

/**
 * @file
 * Primary module hooks for SPPA Core module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_alter().
 */
function sppa_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_private_page_form':
    case 'node_private_page_edit_form':
      // Set form defaults if they exist.
      _sitenow_node_form_defaults($form, $form_state, 'sppa_core');
      \Drupal::messenger()->addWarning(t('All files used within the Private Page content type will not be private.'));
      break;

    case 'fragment_stat_edit_form':
    case 'fragment_stat_add_form':
      $form['#attached']['library'][] = 'sppa_core/admin';
      break;
  }
}

/**
 * Implements hook_theme for Scholarship teaser.
 */
function sppa_core_theme($existing, $type, $theme, $path) {
  return [
    'node__private_page__full' => [
      'template' => 'node--private-page--full',
      'base hook' => 'node',
    ],
    'block__field_block__node__private_page__title' => [
      'template' => 'block--field-block--node--private-page--title',
      'base hook' => 'block',
    ],
  ];
}

/**
 * Implements hook_preprocess_block().
 */
function sppa_core_preprocess_block(&$variables) {
  $classes = $variables["elements"]["#configuration"]["block_classes"] ?? FALSE;
  if ($classes) {
    $variables["attributes"]["class"] = array_merge($variables["attributes"]["class"], $classes);
  }
  switch ($variables["elements"]["#plugin_id"]) {
    // Visually hide page title if page option is set.
    case 'field_block:node:private_page:title':
    case 'private_page_title_block':
      $admin_context = \Drupal::service('router.admin_context');
      if (!$admin_context->isAdminRoute()) {
        $node = \Drupal::routeMatch()->getParameter('node');
        $node = ($node ?? \Drupal::routeMatch()->getParameter('node_preview'));
        if ($node instanceof NodeInterface) {
          if ($node->hasField('field_publish_options') && !$node->get('field_publish_options')->isEmpty()) {
            $publish_options = $node->get('field_publish_options')->getValue();
            if (array_search('title_hidden', array_column($publish_options, 'value')) !== FALSE) {
              // For uids_base.
              $variables["attributes"]['class'][] = 'element-invisible';
            }
          }
        }
      }
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sppa_core_preprocess_layout(&$variables) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
  $layout = $variables['layout'];

  // Process the header layout.
  if ($layout->id() === 'layout_header') {
    $node = \Drupal::routeMatch()->getParameter('node');
    $node = ($node ?? \Drupal::routeMatch()->getParameter('node_preview'));
    if ($node instanceof NodeInterface) {
      if ($node->getType() == 'private_page') {
        if (!isset($variables['banner_attributes'])) {
          $variables['banner_settings'] = [];
        }
      }
      switch ($node->getType()) {
        case 'private_page':

          if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {

            // Provide module name for featured image functionality.
            $variables['featured_image_module_name'] = 'sppa_core';

            // Set banner defaults.
            $variables['banner_settings']['transparent'] = TRUE;
            $variables['banner_settings']['horizontal_align'] = 'center';
            $variables['banner_settings']['vertical_align'] = 'center';
          }
          break;

      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sppa_core_form_node_private_page_layout_builder_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::messenger()->addWarning(t('All files used within the Private Page content type will not be private.'));
  $form['#attached']['library'][] = 'layout_builder_custom/layout_builder_custom.overrides';
}

/**
 * Implements hook_publish_options_alter().
 */
function sppa_core_publish_options_alter(&$options, $entity, $bundle) {
  switch ($bundle) {
    case 'private_page':
      $options['title_hidden'] = 'Visually hide title';
      $options['no_sidebars'] = 'Remove sidebar regions';
      break;

  }
}

/**
 * Implements hook_allowed_values_function().
 */
function sppa_locations_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [
    'AL' => 'Alabama',
    'AK' => 'Alaska',
    'AZ' => 'Arizona',
    'AR' => 'Arkansas',
    'CA' => 'California',
    'CO' => 'Colorado',
    'CT' => 'Connecticut',
    'DE' => 'Delaware',
    'DC' => 'District of Columbia',
    'FL' => 'Florida',
    'GA' => 'Georgia',
    'HI' => 'Hawaii',
    'ID' => 'Idaho',
    'IL' => 'Illinois',
    'IN' => 'Indiana',
    'IA' => 'Iowa',
    'KS' => 'Kansas',
    'KY' => 'Kentucky',
    'LA' => 'Louisiana',
    'ME' => 'Maine',
    'MD' => 'Maryland',
    'MA' => 'Massachusetts',
    'MI' => 'Michigan',
    'MN' => 'Minnesota',
    'MS' => 'Mississippi',
    'MO' => 'Missouri',
    'MT' => 'Montana',
    'NE' => 'Nebraska',
    'NV' => 'Nevada',
    'NH' => 'New Hampshire',
    'NJ' => 'New Jersey',
    'NM' => 'New Mexico',
    'NY' => 'New York',
    'NC' => 'North Carolina',
    'ND' => 'North Dakota',
    'OH' => 'Ohio',
    'OK' => 'Oklahoma',
    'OR' => 'Oregon',
    'PA' => 'Pennsylvania',
    'RI' => 'Rhode Island',
    'SC' => 'South Carolina',
    'SD' => 'South Dakota',
    'TN' => 'Tennessee',
    'TX' => 'Texas',
    'UT' => 'Utah',
    'VT' => 'Vermont',
    'VA' => 'Virginia',
    'WA' => 'Washington',
    'WV' => 'West Virginia',
    'WI' => 'Wisconsin',
    'WY' => 'Wyoming',
    'US' => 'United States',
    'INTL' => 'International',
  ];
  return $options;
}

/**
 * Implements hook_allowed_values_function().
 */
function sppa_opportunity_types_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [
    'jobs' => 'Jobs',
    'internships' => 'Internships',
    'fellowships' => 'Fellowships',
  ];
  return $options;
}

/**
 * Implements hook_allowed_values_function().
 */
function sppa_degrees_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [
    'URP' => 'URP',
    'MPA' => 'MPA',
  ];
  return $options;
}
