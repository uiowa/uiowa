<?php

/**
 * @file
 * Install, update and uninstall functions for the uiowa.edu Core module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\taxonomy\Entity\Term;
use Drupal\redirect\Entity\Redirect;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_install().
 */
function uiowa_edu_core_install() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Import a-z links from the current website.
 */
function uiowa_edu_core_update_8001(&$sandbox) {
  $path = drupal_get_path('module', 'uiowa_edu_core');
  $csv = array_map('str_getcsv', file($path . '/a-z/batch01.csv'));
  $header = FALSE;

  if ($header === TRUE) {
    unset($csv[0]);
  }

  foreach ($csv as $link) {
    $new_term = Term::create([
      'vid' => 'a_z_list',
      'name' => $link[0],
    ]);
    $new_term->set('field_a_z_list_link',  [
      'uri' => $link[2],
      'title' => $link[1],
    ]);
    $new_term->enforceIsNew();
    $new_term->save();
  }
}

/**
 * First batch of redirects.
 */
function uiowa_edu_core_update_8002() {

  $path = drupal_get_path('module', 'uiowa_edu_core');
  $csv = array_map('str_getcsv', file($path . '/redirects/redirects01.csv'));
  $header = FALSE;

  if ($header === TRUE) {
    unset($csv[0]);
  }

  foreach ($csv as $redirect) {
    $source_path = $redirect[0];
    $redirect_path = $redirect[1];
    $existing = \Drupal::service('redirect.repository')->findBySourcePath($source_path);
    if (empty($existing)) {
      Redirect::create([
        'redirect_source' => $source_path,
        'redirect_redirect' => $redirect_path,
        'language' => 'en',
        'status_code' => '301',
      ])->save();
    }
  }
}

/**
 * Import the newly enabled and config-ignored uiowa_alerts settings.
 */
function uiowa_edu_core_update_8003() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('uiowa_alerts.settings');

  if (empty($config->get())) {
    $config_path = DRUPAL_ROOT . '/modules/custom/uiowa_alerts/config/install/';
    $source = new FileStorage($config_path);

    $config_storage = \Drupal::service('config.storage');
    $config_storage->write('uiowa_alerts.settings', $source->read('uiowa_alerts.settings'));
  }
}

/**
 * Update several fields from plain text to formatted text.
 */
function uiowa_edu_core_update_8004() {

  // Statically defining our fields to be updated. More can be added here.
  $fields = [
    'field_uiowa_banner_excerpt' => [
      'table' => 'block_content__field_uiowa_banner_excerpt',
      'revision_table' => 'block_content_revision__field_uiowa_banner_excerpt',
      'format_col' => 'field_uiowa_banner_excerpt_format',
    ],
    'field_uiowa_card_excerpt' => [
      'table' => 'block_content__field_uiowa_card_excerpt',
      'revision_table' => 'block_content_revision__field_uiowa_card_excerpt',
      'format_col' => 'field_uiowa_card_excerpt_format',
    ],
  ];

  $database = \Drupal::database();

  foreach ($fields as $field_name => $field) {
    $table = $field['table'];
    $revision_table = $field['revision_table'];
    $entity_type = 'block_content';

    $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);
    if (is_null($field_storage)) {
      continue;
    }

    // Fetch data currently stored in the field and save for later.
    $rows = NULL;
    $revision_rows = NULL;
    if ($database->schema()->tableExists($table)) {
      $rows = $database
        ->select($table, 't')
        ->fields('t')
        ->execute()
        ->fetchAll();
      if ($database->schema()->tableExists($revision_table)) {
        $revision_rows = $database
          ->select($revision_table, 'r')
          ->fields('r')
          ->execute()
          ->fetchAll();
      }
    }

    $new_fields = array();
    $weights = array();
    foreach ($field_storage->getBundles() as $bundle => $label) {
      $old_field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
      $new_field = $old_field->toArray();
      $new_field['field_type'] = 'text_long';
      $new_field['settings'] = [];
      $new_fields[] = $new_field;
      // Get the view display weights so we can re-set them later.
      $entity_view = $entity_type . '.' . $bundle . '.' . 'default';
      $view_display = \Drupal::entityTypeManager()
        ->getStorage('entity_view_display')
        ->load($entity_view)
        ->getComponent($field_name);
      $weights['entity_view_display'][$entity_view] = $view_display['weight'];
      // Get the form display weights so we can re-set them later.
      $form_display = \Drupal::entityTypeManager()
        ->getStorage('entity_form_display')
        ->load($entity_type . '.' . $bundle . '.default')
        ->getComponent($field_name);
      $weights['entity_form_display'][$entity_type . '.' . $bundle . '.default'] = $form_display['weight'];
    }

    // Store the old field settings and update to text_long.
    $new_field_storage = $field_storage->toArray();
    $new_field_storage['type'] = 'text_long';
    $new_field_storage['settings'] = [];
    // Deleting at the field_storage level takes care of the bundles as well.
    $field_storage->delete();
  
    // Need to purge in order for new field to be created after deleting the old.
    field_purge_batch(100);

    // Save our new, updated field storage.
    $new_field_storage = FieldStorageConfig::create($new_field_storage);
    $new_field_storage->save();

    // Create our new fields to match the field storages.
    foreach($new_fields as $new_field) {
      $new_field_config = FieldConfig::create($new_field);
      $new_field_config->save();
    }

    // Replace into the new fields data we saved from the old fields.
    if (!is_null($rows)) {
      foreach ($rows as $row) {
        $row = (array) $row;
        $row[$field['format_col']] = 'filtered_html';
        $database
          ->insert($table)
          ->fields($row)
          ->execute();
      }
    }
    if (!is_null($revision_rows)) {
      foreach ($revision_rows as $row) {
        $row = (array) $row;
        $row[$field['format_col']] = 'filtered_html';
        $database
          ->insert($revision_table)
          ->fields($row)
          ->execute();
      }
    }

    // Update the view and form display weights, which enables the new fields.
    foreach ($weights as $display_mode => $view_modes) {
      foreach ($view_modes as $view_mode => $weight) {
        if ($weight) {
          $display = \Drupal::entityTypeManager()
            ->getStorage($display_mode)
            ->load($view_mode)
            ->setComponent($field_name, [
              'weight' => $weight,
            ])
            ->save();
        }
      }
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function uiowa_edu_core_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}
