<?php

/**
 * @file
 * Functions to support theming in the uids_base theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function uids_base_preprocess_html(&$variables) {
  // Load theme settings.
  $variables['layout_container'] = theme_get_setting('layout.container');
  // Body classes for sidebars.
  if (isset($variables['page']['sidebar_first']) && isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('layout-page-sidebars-both');
  }
  elseif (isset($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('layout-page-sidebars-first');
  }
  elseif (isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('layout-page-sidebars-second');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('layout-page-sidebars-none');
  }

  $sticky_class = 'header-not-sticky';
  // Only set to sticky if it is set and nav_style is 'toggle'.
  if (theme_get_setting('header.nav_style') === 'toggle' && theme_get_setting('header.sticky')) {
    $sticky_class = 'header-sticky';
  }

  $variables['attributes']['class'][] = $sticky_class;

  // @todo Remove uiowa_bar module in favor of uiowa_search.
  if (\Drupal::service('module_handler')->moduleExists('uiowa_bar')) {
    unset($variables['page_top']['uiowa_bar']);
  }

  // Get header type for setting sticky padding for tertiary header.
  $variables['header_type'] = theme_get_setting('header.type');

  // Set a variable for whether layout builder is enabled.
  $variables['layout_builder_enabled'] = FALSE;

  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof NodeInterface) {
    // @todo Is there a better way to have a soft dependency on a class?
    if (class_exists('\Drupal\layout_builder_custom\LayoutBuilderHelper')) {
      $variables['layout_builder_enabled'] = \Drupal::classResolver('\Drupal\layout_builder_custom\LayoutBuilderHelper')->layoutBuilderEnabled($node);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function uids_base_preprocess_page(&$variables) {
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['site_slogan'] = $config->get('slogan');

  // These values will be populated automatically if uiowa_core is enabled.
  $variables['site_has_parent'] = $config->get('has_parent');
  $variables['site_parent_name'] = $config->get('parent.name');
  $variables['site_parent_url'] = $config->get('parent.url');

  // Add variables for the image and path of the UIOWA block logo.
  $variables['uiowa_logo_path'] = '/' . drupal_get_path('theme', 'uids_base') . '/uids/assets/images/uiowa-secondary.svg#logo';
  $variables['uiowa_logo_path_png'] = '/' . drupal_get_path('theme', 'uids_base') . '/uids/assets/images/uiowa-primary.png';

  $variables['header_type'] = theme_get_setting('header.type');
  $variables['header_nav'] = theme_get_setting('header.nav_style');
  $variables['header_sticky'] = theme_get_setting('header.sticky');
  $variables['header_classes'] = [];

  // The site has a parent, so we are overriding the header type.
  if ($variables['site_has_parent']) {
    $variables['header_type'] = 'below';
  }

  $variables['uiowa_url'] = 'https://uiowa.edu';

  // This is the homepage.
  if (\Drupal::service('site.path') === 'sites/uiowa.edu') {
    $variables['header_classes'][] = 'iowa-bar--full';
    $variables['header_type'] = 'homepage';
    $variables['uiowa_url'] = \Drupal::request()->getSchemeAndHttpHost();
  }
  else {
    switch ($variables['header_type']) {
      case 'below':
      case 'header--tertiary':
        // @todo Remove this when config is updated for all sites.
        $variables['header_classes'][] = 'iowa-bar--narrow';
        $variables['header_type'] = 'below';
        break;

      case 'inline':
      case 'header--secondary':
        // @todo Remove this when config is updated for all sites.
        $variables['header_classes'][] = 'iowa-bar--full';
        $variables['header_type'] = 'inline';
        break;
    }
  }

  $variables['layout_container'] = theme_get_setting('layout.container');
  $variables['uiowa_search_form'] = FALSE;

  // Add a variable for the search form.
  // @todo Test with uiowa_search enabled.
  if (\Drupal::service('module_handler')->moduleExists('uiowa_search')) {
    $variables['uiowa_search_form'] = \Drupal::formBuilder()->getForm('Drupal\uiowa_search\Form\SearchForm');
  }
  elseif (\Drupal::service('module_handler')->moduleExists('uiowa_bar')) {
    $variables['uiowa_search_form'] = \Drupal::formBuilder()->getForm('Drupal\uiowa_bar\Form\SearchForm');
  }

  // The uiowa_auth module replaces local authentication with SAML SSO.
  if (\Drupal::service('module_handler')->moduleExists('uiowa_auth')) {
    if (!(\Drupal::currentUser()->isAuthenticated())) {
      $login_url = Url::fromRoute('samlauth.saml_controller_login');

      $variables['footer_login_link'] = [
        '#type' => 'link',
        '#title' => t('Admin Login'),
        '#url' => $login_url,
      ];
    }
  }

  $variables['has_node_image'] = FALSE;

  // Set a variable for whether layout builder is enabled.
  $variables['layout_builder_enabled'] = FALSE;
  if (!empty($variables['node'])) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $variables['node'];
    if ($node instanceof NodeInterface) {
      // @todo Is there a better way to have a soft dependency on a class?
      if (class_exists('\Drupal\layout_builder_custom\LayoutBuilderHelper')) {
        $variables['layout_builder_enabled'] = \Drupal::classResolver('\Drupal\layout_builder_custom\LayoutBuilderHelper')->layoutBuilderEnabled($node);
      }

      $type = $node->getType();
      switch ($type) {
        case 'page':
        case 'article':
          if ($node->hasField('field_image') && !$node->get('field_image')
            ->isEmpty() && $node->preview_view_mode !== 'teaser') {
            $variables['has_node_image'] = TRUE;
          }
          break;

      }
    }
  }
  $current_route = \Drupal::routeMatch();
  $route_name = $current_route->getRouteName();
  switch ($route_name) {
    case 'uiowa_bar.search_results':
      $variables['#attached']['library'][] = 'uids_base/search-results';
      break;

    case 'sitenow_events.single_controller.event':
      $variables['#attached']['library'][] = 'uids_base/sitenow-events-single';
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function uids_base_preprocess_node(&$variables) {
  if (isset($variables['node'])) {
    if (in_array($variables['node']->getType(), ['article', 'page'])) {
      $block_manager = \Drupal::service('plugin.manager.block');
      $config = [];
      $plugin_block = $block_manager->createInstance('system_breadcrumb_block', $config);
      $variables['breadcrumb'] = $plugin_block->build();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for field.html.twig.
 */
function uids_base_preprocess_field(&$variables) {
  $variables['page_featured_image'] = $variables['field_name'] == 'field_image';

  // Set the caption if this is 'field_image'.
  if ($variables['field_name'] === 'field_image') {
    $caption = NULL;
    // If the global caption is set on the media object,
    // use that.
    if (isset($variables['element'][0]) && isset($variables['element'][0]['#media'])) {
      /** @var \Drupal\media\Entity\Media $media */
      $media = $variables['element'][0]['#media'];
      if ($media && $media->hasField('field_media_caption')) {
        $caption = $media->get('field_media_caption');
      }
    }
    // If the caption is not set yet, attempt to set it from
    // the 'field_image_caption' field.
    /** @var \Drupal\node\NodeInterface $node */
    if (!$caption->count() && (NULL !== $node = $variables['element']['#object']) && $node->hasField('field_image_caption')) {
      $caption = $node->get('field_image_caption');
    }

    // If the caption has been set, render it.
    if ($caption->count()) {
      $caption = $caption->view();
    }
    else {
      $caption = NULL;
    }

    $variables['caption'] = $caption;
  }

  if (isset($variables['page_featured_image'])) {
    $block_manager = \Drupal::service('plugin.manager.block');
    $config = [];
    $plugin_block = $block_manager->createInstance('system_breadcrumb_block', $config);
    $variables['breadcrumb'] = $plugin_block->build();
  }
}

/**
 * Implements hook_preprocess_layout().
 */
function uids_base_preprocess_layout(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $node = (isset($node) ? $node : \Drupal::routeMatch()->getParameter('node_preview'));
  $title_hidden = FALSE;
  if ($node instanceof NodeInterface) {
    if ($node->hasField('field_publish_options') && !$node->get('field_publish_options')->isEmpty()) {
      $publish_options = $node->get('field_publish_options')->getValue();
      if (array_search('title_hidden', array_column($publish_options, 'value')) !== FALSE) {
        // For uiowa_bootstrap/classy default.
        $title_hidden = TRUE;
      }
      if (array_search('no_sidebars', array_column($publish_options, 'value')) !== FALSE) {
        // Remove sidebar regions.
        $variables['attributes']['class'][] = 'sidebar-invisible';
      }
    }

    // Create a featured image boolean variable for easier Twig use.
    $variables['has_node_image'] = $node->hasField('field_image') && !$node->get('field_image')->isEmpty();

    // Add sitenow library if sitenow_v2 config split is active.
    $filters = \Drupal::service('plugin.manager.config_filter')->getDefinitions();
    $sitenow_v2_split = 'config_split:sitenow_v2';
    // This site has the 'sitenow_v2' split enabled.
    if (isset($filters[$sitenow_v2_split]) && $filters[$sitenow_v2_split]['status']) {
      $variables['#attached']['library'][] = 'uids_base/sitenow';
    }
  }

  /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
  $layout = $variables['layout'];

  if ($layout->id() === 'layout_header') {
    $contains_title = FALSE;
    $contains_background = FALSE;
    foreach (Element::children($variables['content']) as $region) {
      foreach (Element::children($variables['content'][$region]) as $block_uuid) {
        if ($region === 'content'
          && isset($variables['content'][$region][$block_uuid])
          && isset($variables['content'][$region][$block_uuid]['#plugin_id'])
        ) {
          if ($variables['content'][$region][$block_uuid]['#plugin_id'] === 'field_block:node:page:title') {
            $contains_title = TRUE;
            break;
          }
        }
        elseif ($region == 'background') {
          if (!empty(Element::children($variables['content'][$region][$block_uuid]))) {
            $contains_background = TRUE;
            break;
          }
        }
      }
    }
    if ($contains_title) {
      $variables['attributes']['class'][] = 'layout--title';
      if ($contains_background) {
        $variables['attributes']['class'][] = 'layout--title--with-background';
      }

      if ($title_hidden) {
        $variables['attributes']['class'][] = 'layout--title--hidden';
      }
    }
  }
  $test = 'thing';
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function uids_base_preprocess_block(&$variables) {
  $variables['uids_base_container_settings'] = theme_get_setting('layout.container');

  // Add the region to the a block's available attributes.
  if (isset($variables['elements']['#id'])) {
    $region = Block::load($variables['elements']['#id'])->getRegion();

    if ($region === 'footer_second' && in_array($variables['base_plugin_id'], [
      'system_menu_block',
      'menu_block',
    ])) {
      $variables['attributes']['class'][] = 'footer__links';
      $variables['attributes']['class'][] = 'footer__links--nav';
    }
  }

  if (in_array($variables['base_plugin_id'], [
    'system_menu_block',
    'menu_block',
  ])) {
    switch ($variables['derivative_plugin_id']) {
      case 'external-quick-links':
        $variables['attributes']['class'][] = 'menu--group';
        break;

      case 'top-links':
        $variables['attributes']['class'][] = 'menu--top';
        $variables['attributes']['class'][] = 'nav';
        break;

      case 'search-links':
        $variables['attributes']['class'][] = 'menu--quick-links';
        break;

    }
  }

  // Add the system breadcrumb to the page title hero block.
  if ($variables['derivative_plugin_id'] === 'uiowa_page_title_hero') {
    $block_manager = \Drupal::service('plugin.manager.block');
    $config = [];
    $plugin_block = $block_manager->createInstance('system_breadcrumb_block', $config);

    $variables['breadcrumb'] = $plugin_block->build();
  }

}

/**
 * Implements hook_preprocess_HOOK() for block_content__uiowa_collection__tab.html.twig.
 */
function uids_base_preprocess_block_content__uiowa_collection__tab(&$variables) {
  $variables['tabs'] = [];
  $items = $variables['elements']['field_uiowa_collection_items']['#items'];
  foreach ($items as $delta => $item) {
    $id = $item->get('target_id')->getString();
    $paragraph = \Drupal::service('entity_type.manager')
      ->getStorage('paragraph')
      ->load($id);
    $label = $paragraph->get('field_collection_headline')->getString();
    $variables['tabs'][$delta] = [
      'id' => $id,
      'label' => $label,
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uids_base_preprocess_menu(&$variables) {
  switch ($variables["menu_name"]) {
    case 'top-links':
      $variables['limit'] = theme_get_setting('header.top_links_limit');
      break;

  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function uids_base_preprocess_paragraph__card(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    // @todo Remove this when it is no longer necessary.
    // If the sitenow card link js file has been added, remove it.
    if ($key = array_search('sitenow_card/card-link-js', $variables['#attached']['library'])) {
      unset($variables['#attached']['library'][$key]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uids_base_preprocess_paragraph(&$variables) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['paragraph'];

    $collection_types = [
      'uiowa_slide' => 'field_uiowa_slider_slides',
      'uiowa_collection_item' => 'field_uiowa_collection_items',
    ];

    if (in_array($paragraph->bundle(), array_keys($collection_types))) {
      $items_field = $collection_types[$paragraph->bundle()];
      $variables['delta'] = 0;

      $parent = $paragraph->getParentEntity();
      if ($parent instanceof ContentEntityInterface) {
        $variables['parent_id'] = $parent->id();
        if ($parent->hasField($items_field)) {
          $id = $paragraph->id();
          /**
           * @var integer $delta
           * @var \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $item
           */
          foreach ($parent->get($items_field)->getValue() as $delta => $item) {
            if ($item['target_id'] === $id) {
              $variables['delta'] = $delta;
              break;
            }
          }
        }

        if ($parent->hasField('field_collection_heading_size')) {
          $variables['h_size'] = $parent->get('field_collection_heading_size')->getString();
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uids_base_preprocess_views_view_table(&$variables) {
  $variables['attributes']['class'][] = 'table is-striped';
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function uids_base_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'] . '__' . $element['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function uids_base_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#name']) && $variables['element']['#name'] === 'search-terms') {
    $suggestions[] = $variables['theme_hook_original'] . '__uiowa_search__search_terms';
  }
}

/**
 * Implements hook_theme_suggestion_input_alter().
 */
function uids_base_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#name']) && $element['#name'] == 'btnG') {
    $suggestions[] = 'input__uiowa_search__' . $element['#type'];
  }
}

/**
 * Implements theme_preprocess_form().
 */
function uids_base_preprocess_form(&$variables) {
  // Add 'uids-content' and 'uids-search' classes to search-block-form.
  if (isset($variables['attributes']['id']) && $variables['attributes']['id'] == 'search-block-form') {
    $variables['attributes']['class'][] = 'uids-content uids-search ';
  }
}

/**
 * Implements theme_preprocess_input().
 */
function uids_base_preprocess_input(&$variables) {
  if (isset($variables['element']['#name']) && $variables['element']['#name'] === 'search-terms') {
    $variables['attributes']['class'] = [];
  }
}

/**
 * Implements hook_form_alter().
 */
function uids_base_form_alter(&$form, $form_state, $form_id) {
  $skip_forms = [
    'media_library_add_form_upload',
    'views_exposed_form',
  ];
  if (!in_array($form_id, $skip_forms)) {
    // Add 'uids-content' class to all forms except media library.
    $form['#attributes']['class'][] = 'uids-content';
  }

  if (strpos($form_id, 'node_page_layout_builder_form') !== FALSE) {
    $form['actions']['#attributes']['class'][] = 'uids-content';
    $form['layout_builder_message']['#attributes']['class'][] = 'uids-content';
  }
  if (strpos($form_id, 'uiowa_bar_search_form') !== FALSE) {
    $form['#attributes']['class'][] = 'uids-search';
  }
  if (strpos($form_id, 'uiowa_search_form') !== FALSE) {
    $form['#attributes']['class'][] = 'uids-search';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uids_base_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  // For all views with exposed filters.
  if ($form_id == 'views_exposed_form') {
    $form['#attributes']['class'][] = 'uids-content';
  }
  // For these views specifically.
  $view_ids = ['book_toc', 'book_search'];
  $view = $form_state->getStorage('view');
  if ($form_id == 'views_exposed_form' && in_array($view['view']->id(), $view_ids)) {
    $form['#attributes']['class'][] = 'uids-search';
  }
}
