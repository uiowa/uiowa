<?php

/**
 * @file
 * Functions to support theming in the uids_base theme.
 */

use Drupal\block\Entity\Block;
use Drupal\block_content\Entity\BlockContent;
use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Plugin\DataType\EntityAdapter;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\fragments\Entity\FragmentInterface;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\uiowa_core\HeadlineHelper;
use Drupal\views\Plugin\views\field\EntityField;

/**
 * Implements hook_form_alter().
 */
function uids_base_form_alter(&$form, $form_state, $form_id) {
  $skip_forms = [
    'media_library_add_form_upload',
    'views_exposed_form',
  ];
  if (!in_array($form_id, $skip_forms)) {
    // Add 'uids-content' class to all forms except media library.
    $form['#attributes']['class'][] = 'uids-content';
  }

  if (strpos($form_id, 'node_page_layout_builder_form') !== FALSE) {
    $form['actions']['#attributes']['class'][] = 'uids-content';
    $form['layout_builder_message']['#attributes']['class'][] = 'uids-content';
  }

  if (strpos($form_id, 'uiowa_search_form') !== FALSE) {
    $form['#attributes']['class'][] = 'uids-search';
  }

  if (strpos($form_id, 'webform_submission') !== FALSE) {
    $form['#attached']['library'][] = 'uids_base/webforms';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uids_base_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  // For all views with exposed filters.
  if ($form_id === 'views_exposed_form') {
    $form['#attributes']['class'][] = 'uids-content bg--gray';
  }
  // For these views specifically.
  $view_ids = ['book_toc', 'book_search'];
  $view = $form_state->getStorage('view');
  if ($form_id === 'views_exposed_form' && in_array($view['view']->id(), $view_ids)) {
    $form['#attributes']['class'][] = 'uids-search';
  }
}

/**
 * Implements hook_preprocess().
 */
function uids_base_preprocess(&$variables, $hook) {
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function uids_base_preprocess_html(&$variables) {
  $config = \Drupal::config('system.site');
  $variables['site_has_parent'] = $config->get('has_parent');
  // Body class for top links.
  // Load the uids_base_toplinks block entity.
  if (class_exists('\Drupal\block\Entity\Block')) {
    $block = Block::load('uids_base_toplinks');
    if ($block) {
      // Initialize a variable to count the number of enabled menu links.
      $enabled_links = 0;
      // Load the 'top-links' menu tree.
      $menu_links = \Drupal::menuTree()->load('top-links', new MenuTreeParameters());
      // Iterate through the menu links.
      foreach ($menu_links as $menu_link) {
        // If the link is disabled, skip to the next link.
        if (!$menu_link->link->isEnabled()) {
          continue;
        }
        // Increment the number of enabled links.
        $enabled_links++;
      }
      // Check if there are any enabled links in the menu.
      $has_enabled_links = ($enabled_links > 0);
      // Add the 'has_enabled_links' variable to the variables array,
      // to be used in templates.
      $variables['has_enabled_links'] = $has_enabled_links;
      // Add the 'has_top_links' variable to the variables array,
      // to be used in templates.
      // If there are enabled links, set the variable to 'has-top-links',
      // otherwise set it to 'no-top-links'.
      $variables['has_top_links'] = ($variables['site_has_parent'] || $has_enabled_links) ? 'has-top-links' : 'no-top-links';
    }
  }

  // Body classes for sidebars.
  if (isset($variables['page']['sidebar_first']) && isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('layout-page-sidebars-both');
  }
  elseif (isset($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('layout-page-sidebars-first');
  }
  elseif (isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('layout-page-sidebars-second');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('layout-page-sidebars-none');
  }

  $sticky_class = 'header-not-sticky';
  // Only set to sticky if it is set and nav_style is 'toggle'.
  if (theme_get_setting('header.nav_style') === 'toggle' && theme_get_setting('header.sticky')) {
    $sticky_class = 'header-sticky';
  }

  $variables['attributes']['class'][] = $sticky_class;

  $toppage = 'no-top-scroll';
  // Used for page by page basis display of scroll to top button.
  if (theme_get_setting('header.toppage')) {
    $toppage = 'top-scroll';
  }
  $variables['attributes']['class'][] = $toppage;

  // Get header type for setting sticky padding for tertiary header.
  $variables['header_type'] = theme_get_setting('header.type');

  // Set a variable for whether layout builder is enabled.
  $variables['layout_builder_enabled'] = FALSE;

  $style_selector = theme_get_setting('style.style_selector');
  if ($style_selector !== NULL && $style_selector !== 'brand') {
    $variables['#attached']['library'][] = 'uids_base/theme-overrides';
  }

  if (theme_get_setting('style.style_selector') === 'gray') {
    $variables['attributes']['class'][] = 'off-brand';
    $css = ':root {--brand-primary: #d7d7d7!important;}';
    $variables['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'style',
        '#value' => $css,
        '#attributes' => [
          'type' => 'text/css',
        ],
        '#weight' => 100,
      ],
      'custom_css',
    ];
  }

  // Only set 'text--serif' if 'fonts.font-family' setting is set to serif.
  if (theme_get_setting('fonts.font-family') === 'serif') {
    $variables['attributes']['class'][] = 'text--serif';
    $variables['#attached']['library'][] = 'uids_base/global-serif';
  }

  $route_match = \Drupal::routeMatch();

  // Loop through entity types that we have allow per item layout customization.
  foreach ([
    'fragment' => FragmentInterface::class,
    'node' => NodeInterface::class,
  ] as $entity_type => $interface_class) {
    // Check if an entity of that type is loaded at the current route.
    $route_entity = $route_match->getParameter($entity_type);
    // Check if the entity is an instance of the corresponding interface class.
    if ($route_entity instanceof $interface_class) {
      // Defensive coding check to make sure our helper class is available.
      if (class_exists('\Drupal\layout_builder_custom\LayoutBuilderHelper')) {
        // Set a variable indicating that the Layout Builder UI is loaded.
        $variables['layout_builder_enabled'] = \Drupal::classResolver('\Drupal\layout_builder_custom\LayoutBuilderHelper')->layoutBuilderEnabled($route_entity);
      }
    }
  }

  if ($route_match->getRouteObject()?->getOption('_layout_builder')) {
    // Add Layout Builder specific CSS settings.
    $variables['#attached']['library'][] = 'uids_base/layout-builder';
  }
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function uids_base_preprocess_page(&$variables) {
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['site_slogan'] = $config->get('slogan');

  // These values will be populated automatically if uiowa_core is enabled.
  $variables['site_has_parent'] = $config->get('has_parent');
  $variables['site_parent_name'] = $config->get('parent.name');
  $variables['site_parent_url'] = $config->get('parent.url');

  $variables['uiowa_logo'] = TRUE;
  $variables['is_off_brand'] = FALSE;

  $style_selector = theme_get_setting('style.style_selector');
  if (!empty($style_selector) && $style_selector !== 'brand') {
    $variables['uiowa_logo'] = FALSE;
    $variables['is_off_brand'] = TRUE;
  }

  if (!theme_get_setting('logo.use_default')) {
    $logo_path = theme_get_setting('logo.path');
    if (!empty($logo_path)) {
      $file_system = \Drupal::service('file_system');
      $logo_uri = $file_system->realpath($logo_path);
      $public_stream_wrapper = \Drupal::service('stream_wrapper.public');
      $logo_url = $public_stream_wrapper->getExternalUrl($logo_uri);
      $variables['logo_path'] = $logo_url;
    }
    else {
      $variables['logo_path'] = '';
    }
  }

  // Add variables for the image and path of the UIOWA block logo.
  /** @var \Drupal\Core\Extension\ExtensionPathResolver $path_resolver */
  $path_resolver = \Drupal::service('extension.path.resolver');
  $variables['uiowa_logo_path'] = '/' . $path_resolver->getPath('theme', 'uids_base') . '/uids/assets/images/uiowa-secondary.svg#logo';
  $variables['uiowa_logo_path_png'] = '/' . $path_resolver->getPath('theme', 'uids_base') . '/uids/assets/images/uiowa-primary.png';

  $variables['header_type'] = theme_get_setting('header.type');
  $variables['header_nav'] = theme_get_setting('header.nav_style');
  $variables['header_sticky'] = theme_get_setting('header.sticky');
  $variables['header_toppage'] = theme_get_setting('header.toppage');
  $variables['header_classes'] = [];
  $name_length = strlen($variables['site_name']);

  // If the site has a parent organization or the site name is more than 43
  // characters, we force the site to use the 'below' header option.
  if ($variables['site_has_parent'] || $name_length > 43) {
    $variables['header_type'] = 'below';
  }

  $variables['uiowa_url'] = 'https://uiowa.edu';

  // This is the homepage.
  if (\Drupal::getContainer()->getParameter('site.path') === 'sites/uiowa.edu') {
    $variables['header_classes'][] = 'iowa-bar--full';
    $variables['header_type'] = 'homepage';
    $variables['uiowa_url'] = \Drupal::request()->getSchemeAndHttpHost();
  }
  else {
    switch ($variables['header_type']) {
      case 'below':
      case 'header--tertiary':
        // @todo Remove this when config is updated for all sites.
        $variables['header_classes'][] = 'iowa-bar--narrow';
        $variables['header_type'] = 'below';
        break;

      case 'inline':
      case 'header--secondary':
        // @todo Remove this when config is updated for all sites.
        $variables['header_classes'][] = 'iowa-bar--full';
        $variables['header_type'] = 'inline';
        break;
    }
  }

  // Hide the search form by default.
  $variables['uiowa_search_form'] = FALSE;

  if (\Drupal::service('module_handler')->moduleExists('uiowa_search')) {
    if (\Drupal::config('uiowa_search.settings')->get('uiowa_search.display_search')) {
      $variables['uiowa_search_form'] = TRUE;
    }
  }

  // Link to the SSO route if configured to display the footer login link.
  if (theme_get_setting('footer.login_link') ?? TRUE) {
    $route = 'samlauth.saml_controller_login';
    $exists = count(\Drupal::service('router.route_provider')->getRoutesByNames([$route])) === 1;

    if ($exists && !(\Drupal::currentUser()->isAuthenticated())) {
      $destination = \Drupal::request()->getRequestUri();

      $login_url = Url::fromRoute($route, [], [
        'query' => [
          'destination' => $destination,
        ],
      ]);

      $variables['footer_login_link'] = [
        '#type' => 'link',
        '#title' => t('Admin Login'),
        '#url' => $login_url,
      ];
    }
  }

  // Set a variable for whether layout builder is enabled.
  $variables['layout_builder_enabled'] = FALSE;
  if (!empty($variables['node'])) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $variables['node'];
    if ($node instanceof NodeInterface) {
      if (class_exists('\Drupal\layout_builder_custom\LayoutBuilderHelper')) {
        $variables['layout_builder_enabled'] = \Drupal::classResolver('\Drupal\layout_builder_custom\LayoutBuilderHelper')->layoutBuilderEnabled($node);
      }
    }
  }
  $current_route = \Drupal::routeMatch();
  $fragment = $current_route->getParameter('fragment');
  if ($fragment instanceof FragmentInterface) {
    if (class_exists('\Drupal\layout_builder_custom\LayoutBuilderHelper')) {
      $variables['layout_builder_enabled'] = \Drupal::classResolver('\Drupal\layout_builder_custom\LayoutBuilderHelper')->layoutBuilderEnabled($fragment);
    }
  }

  $route_name = $current_route->getRouteName();

  switch ($route_name) {
    case 'uiowa_search.search_results':
      $variables['#attached']['library'][] = 'uids_base/search-results';
      break;

    case 'sitenow_events.single_controller.event':
      $variables['#attached']['library'][] = 'uids_base/sitenow-events-single';
      break;

  }
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function uids_base_preprocess_node(&$variables) {
  /**
   * @var \Drupal\node\Entity\Node $node
   */
  $node = $variables['node'];

  if ($variables['view_mode'] === 'teaser') {
    // Create heading_size variable for node teaser templates if a
    // corresponding render property was set.
    if (isset($variables['elements']['#heading_size'])) {
      $variables['heading_size'] = $variables['elements']['#heading_size'];
    }

    // Add appropriate card styles for v2/3 teaser view modes.
    // @todo Remove after v2 dies.
    //   See https://github.com/uiowa/uiowa/issues/4948
    $is_v2 = \Drupal::config('config_split.config_split.sitenow_v2')->get('status');

    if ($node->getType() === 'page') {
      // Style stacked for SiteNow v2, otherwise media right.
      if ($is_v2) {
        $variables['attributes']['class'][] = 'card--stacked';
        $variables['media_classes'] = [
          'media--widescreen',
          'card__media--large',
        ];
      }

    }
  }

  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    if (isset($variables['node'])) {
      if (in_array($variables['node']->getType(), ['article', 'page'])) {
        $block_manager = \Drupal::service('plugin.manager.block');
        $config = [];
        $plugin_block = $block_manager->createInstance('system_breadcrumb_block', $config);
        $variables['breadcrumb'] = $plugin_block->build();
      }
    }
    $node = \Drupal::routeMatch()->getParameter('node');
    $node = ($node ?? \Drupal::routeMatch()->getParameter('node_preview'));

    if ($node instanceof NodeInterface) {
      $node = $variables['node'];
      switch ($node->getType()) {
        case 'person':
          $variables['#attached']['library'][] = 'uids_base/person';
          break;

        case 'event':
          $variables['#attached']['library'][] = 'uids_base/sitenow-events-single';
          $variables['#attached']['library'][] = 'uids_base/person';
          $variables['#attached']['library'][] = 'uids_base/card';
          break;
      }
      if (class_exists('\Drupal\layout_builder_custom\LayoutBuilderHelper')) {
        $variables['layout_builder_enabled'] = \Drupal::classResolver('\Drupal\layout_builder_custom\LayoutBuilderHelper')->layoutBuilderEnabled($node);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for media.html.twig.
 */
function uids_base_preprocess_media(array &$variables) {
  /** @var \Drupal\media\Entity\Media $media */
  $media = $variables['media'];

  // Get the media entity's bundle (such as video, image, etc.)
  $media_type = $variables['media']->bundle();

  // $variables;
  if ($media_type === 'video') {
    $referring_item = $media->_referringItem;
    if ($referring_item) {
      /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $referring_field */
      $referring_field = $referring_item->getParent();
      if ($referring_field) {
        $parent = $referring_field->getParent();
        if ($parent instanceof EntityAdapter) {
          $parent_entity = $parent->getEntity();
          if ($parent_entity instanceof BlockContent) {
            // @todo 2020/12/08 Add check to see if video is paused in 'uiowa-video'
            //   cookie and skip adding autoplay if so.
            if ($parent_entity->hasField('field_uiowa_banner_autoplay')) {
              if ($parent_entity->get('field_uiowa_banner_autoplay')->value) {
                $variables['content']['field_media_video_file'][0]['#attributes']['autoplay'] = 'autoplay';
              }
            }

            // Add a unique id to use for setting a video cookie.
            if ($parent_entity_uuid = $parent_entity->uuid()) {
              $variables['content']['field_media_video_file'][0]['#attributes']['data-video-cookie-id'] = $parent_entity_uuid;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for field.html.twig.
 */
function uids_base_preprocess_field(&$variables) {
  $variables['view_mode'] = $variables['element']['#view_mode'];

  switch ($variables['field_name']) {
    case 'field_image':
      $variables['page_featured_image'] = TRUE;

      // Set the caption if this is 'field_image'.
      $caption = NULL;
      // If the global caption is set on the media object,
      // use that.
      if (isset($variables['element'][0]) && isset($variables['element'][0]['#media'])) {
        // If the caption is not set yet, attempt to set it from
        // the 'field_image_caption' field.
        if ((NULL !== $node = $variables['element']['#object']) && $node->hasField('field_image_caption')) {
          $caption = $node->get('field_image_caption');
        }
        // If the global caption is set on the media object,
        // and we didn't have a node-specific caption,
        // use the media one.
        /** @var \Drupal\media\Entity\Media $media */
        $media = $variables['element'][0]['#media'];
        if (!$caption && $media && $media->hasField('field_media_caption')) {
          $caption = $media->get('field_media_caption');
        }
      }
      // If the caption is not set yet, attempt to set it from
      // the 'field_image_caption' field.
      if ((!$caption || !$caption->count()) && (NULL !== $node = $variables['element']['#object']) && $node->hasField('field_image_caption')) {
        $caption = $node->get('field_image_caption');
      }

      // If the caption has been set, render it
      // and include the associated libraries.
      if ($caption && $caption->count()) {
        $caption = $caption->view();
      }
      else {
        $caption = NULL;
      }
      $variables['caption'] = $caption;
      break;

  }

  if (isset($variables['page_featured_image'])) {
    $block_manager = \Drupal::service('plugin.manager.block');
    $config = [];
    $plugin_block = $block_manager->createInstance('system_breadcrumb_block', $config);
    $variables['breadcrumb'] = $plugin_block->build();
  }

  // Add an extra class variable to uiowa_headline instances.
  if ($variables['element']['#field_type'] === 'uiowa_headline') {
    $bundle = $variables['element']['#bundle'];
    $variables['headline_class'] = str_replace('_', '-', $bundle) . '--headline';
  }
}

/**
 * Implements hook_preprocess_layout().
 */
function uids_base_preprocess_layout(&$variables) {
  $node = $variables['content']['#entity'] ?: NULL;
  $route_matcher = \Drupal::routeMatch();
  // If we don't have the node yet, attempt
  // to grab it from the route.
  // @todo Is this necessary? Possibly we can
  //   remove it.
  if (!$node) {
    $node = $route_matcher->getParameter('node');
    $node = ($node ?? $route_matcher->getParameter('node_preview'));
  }
  // If we have found a node instance, continue.
  if ($node instanceof NodeInterface) {
    /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
    $layout = $variables['layout'];

    switch ($layout->id()) {
      case 'layout_header':
        $contains_title = FALSE;
        $contains_background = FALSE;

        $title_hidden = FALSE;
        if ($node->hasField('field_publish_options') && !$node->get('field_publish_options')->isEmpty()) {
          $publish_options = $node->get('field_publish_options')->getValue();
          if (array_search('title_hidden', array_column($publish_options, 'value')) !== FALSE) {
            $title_hidden = TRUE;
          }
        }

        // Only run the following if 'featured_image_display'
        // is not already set.
        if (!isset($variables['featured_image_display'])) {
          $variables['featured_image_display'] = FALSE;

          if ($node->hasField('field_image')) {
            // Check if the route matches 'layout_builder.defaults.node.view'.
            // If it does, skip checking node properties.
            if ($route_matcher->getRouteName() === 'layout_builder.defaults.node.view') {
              $site_wide_setting = \Drupal::config("sitenow_{$node->getType()}s.settings")->get('featured_image_display_default');
              if ($site_wide_setting && $site_wide_setting !== 'do_not_display') {
                // Use the site-wide default.
                $variables['featured_image_display'] = $site_wide_setting;
              }
            }
            else {
              // Check if the featured image exists.
              if (!$node->get('field_image')->isEmpty()) {
                // Check value of 'field_featured_image_display'.
                if ($node->hasField('field_featured_image_display') && !$node->field_featured_image_display->isEmpty()) {
                  if ($node->field_featured_image_display->value !== 'do_not_display') {
                    // Use the node setting.
                    $variables['featured_image_display'] = $node->field_featured_image_display->value;
                  }
                }
                else {
                  $site_wide_setting = \Drupal::config("sitenow_{$node->getType()}s.settings")->get('featured_image_display_default');
                  if ($site_wide_setting && $site_wide_setting !== 'do_not_display') {
                    // Use the site-wide default.
                    $variables['featured_image_display'] = $site_wide_setting;
                  }
                }
              }

            }
          }
        }

        if (!$variables['featured_image_display']) {
          unset($variables['content']['background']);
          // If we don't have a featured image,
          // but have a featured image caption set,
          // find it and unset it.
          if ($node->hasField('field_image_caption') && !$node->field_image_caption?->isEmpty()) {
            // Loop through regions in the layout.
            foreach (Element::children($variables['content']) as $region) {
              // Loop through blocks in that region.
              foreach (Element::children($variables['content'][$region]) as $block_uuid) {
                if ($region === 'content'
                  && isset($variables['content'][$region][$block_uuid])
                  && isset($variables['content'][$region][$block_uuid]['#plugin_id'])
                ) {
                  // Check if this block plugin_id matches the pattern for a
                  // field_image_caption block.
                  $plugin_id = $variables['content'][$region][$block_uuid]['#plugin_id'];
                  $start_check = 'field_block:node:';
                  $end_check = ':field_image_caption';
                  if (str_starts_with($plugin_id, $start_check)
                    && str_ends_with($plugin_id, $end_check)
                  ) {
                    unset($variables['content'][$region][$block_uuid]);
                    break;
                  }
                }
              }
            }
          }
        }
        else {
          $variables['attributes']['class'][] = 'banner--' . $variables['featured_image_display'];
        }

        // Loop through regions in the layout.
        foreach (Element::children($variables['content']) as $region) {
          // Loop through blocks in that region.
          foreach (Element::children($variables['content'][$region]) as $block_uuid) {
            if ($region === 'content'
              && isset($variables['content'][$region][$block_uuid])
              && isset($variables['content'][$region][$block_uuid]['#plugin_id'])
            ) {
              // Check if this block plugin_id matches the pattern for a
              // page title block.
              $plugin_id = $variables['content'][$region][$block_uuid]['#plugin_id'];
              $start_check = 'field_block:node:';
              $end_check = ':title';
              if (substr($plugin_id, 0, strlen($start_check)) === $start_check
                && substr($plugin_id, -strlen($end_check)) === $end_check
              ) {
                $contains_title = TRUE;
                break;
              }
            }
            elseif ($region === 'background') {
              // If there is anything in this region, then we have a background.
              if (!empty(Element::children($variables['content'][$region][$block_uuid]))) {
                $contains_background = TRUE;
                break;
              }
            }
          }
        }

        if (!isset($variables['banner_settings'])) {
          $variables['banner_settings'] = [];
        }
        $defaults = [
          'transparent' => FALSE,
          'horizontal_align' => 'left',
          'vertical_align' => 'bottom',
        ];

        $variables['banner_settings'] = $variables['banner_settings'] + $defaults;

        // Set default for banner gradient.
        if ($variables['banner_settings']['transparent'] || $title_hidden) {
          $variables['attributes']['class'][] = 'banner--transparent';
        }
        else {
          $variables['attributes']['class'][] = 'banner--gradient-bottom';
          $variables['attributes']['class'][] = 'banner--gradient-dark';
        }

        // Set other banner default classes.
        $variables['attributes']['class'][] = 'banner--horizontal-' . $variables['banner_settings']['horizontal_align'];
        $variables['attributes']['class'][] = 'banner--vertical-' . $variables['banner_settings']['vertical_align'];

        if ($contains_title) {
          $variables['attributes']['class'][] = 'layout--title';
          if ($contains_background && $variables['featured_image_display']) {
            $variables['attributes']['class'][] = 'layout--title--with-background';
          }
          else {
            $variables['attributes']['class'][] = 'layout--onecol--no--background';
          }

          if ($title_hidden) {
            $variables['attributes']['class'][] = 'layout--title--hidden';
          }
        }
        break;

      // Page with sidebar.
      case 'layout_page':
        if ($node->hasField('field_publish_options') && !$node->get('field_publish_options')->isEmpty()) {
          $publish_options = $node->get('field_publish_options')->getValue();
          if (array_search('no_sidebars', array_column($publish_options, 'value')) !== FALSE) {
            // Remove sidebar regions.
            $variables['attributes']['class'][] = 'sidebar-invisible';
          }
        }
        break;

    }

    // Add sitenow library if sitenow_v2 config split is active.
    // @todo Remove after v2 dies.
    //   See https://github.com/uiowa/uiowa/issues/4948
    $is_v2 = \Drupal::config('config_split.config_split.sitenow_v2')->get('status');

    if ($is_v2) {
      $variables['#attached']['library'][] = 'uids_base/sitenow';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for layout__twocol__card_sidebar.
 */
function uids_base_preprocess_layout__twocol__card_sidebar(&$variables) {
  // Loop through the classes in the attributes array.
  foreach ($variables['attributes']['class'] as $key => $class) {
    // Check if the class starts with "media".
    if (str_starts_with($class, 'media')) {
      // Add the class to region_attributes.card_media.
      // and remove it from attributes.
      if (isset($variables['region_attributes']['card_media'])) {
        $variables['region_attributes']['card_media']?->addClass($class);
        unset($variables['attributes']['class'][$key]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function uids_base_preprocess_block(&$variables) {
  $variables['uids_base_container_settings'] = theme_get_setting('layout.container');

  if (in_array($variables['base_plugin_id'], [
    'system_menu_block',
    'menu_block',
  ])) {

    // Add the region to the block's available attributes.
    if (isset($variables['elements']['#id'])) {
      $region = Block::load($variables['elements']['#id'])->getRegion();
      if ($region === 'footer_second') {
        $variables['attributes']['class'][] = 'footer__links';
        $variables['attributes']['class'][] = 'footer__links--nav';
      }
    }

    switch ($variables['derivative_plugin_id']) {
      case 'external-quick-links':
        $variables['attributes']['class'][] = 'menu--group';
        break;

      case 'top-links':
        $variables['attributes']['class'][] = 'menu--top';
        $variables['attributes']['class'][] = 'nav';
        break;

      case 'search-links':
        $variables['attributes']['class'][] = 'menu--quick-links';
        break;

      case 'main':
        // Make the block title available to pass to accessible-menu.init.js.
        if (isset($variables['elements']['content']['#title'])) {
          $block_title = $variables['elements']['content']['#title']['#markup'];
          if ($variables['configuration']['label_type'] == 'block') {
            $block_title = t('Section');
          }
          $block_name = $variables['elements']['#configuration']['id'];
          $variables['#attached']['drupalSettings']['block_title'][$block_name] = $block_title;
        }
        break;

    }
  }

  // Add the system breadcrumb to the page title hero block.
  if ($variables['derivative_plugin_id'] === 'uiowa_page_title_hero') {
    $block_manager = \Drupal::service('plugin.manager.block');
    $config = [];
    $plugin_block = $block_manager->createInstance('system_breadcrumb_block', $config);

    $variables['page_title'] = NULL;
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface) {
      $variables['page_title'] = $node->getTitle();
    }
    else {
      $request = \Drupal::request();
      $route_match = \Drupal::routeMatch();
      $variables['page_title'] = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
    }

    $variables['breadcrumb'] = $plugin_block->build();
  }

  if ($variables['derivative_plugin_id'] === 'uiowa_banner') {
    $block = $variables['elements']['content']['#block_content'];

    // Remove headline classes from attributes.
    $variables['headline_classes'] = array_filter($variables['elements']['#attributes']['class'], function ($v) {
      return str_starts_with($v, 'headline');
    });

    // Remove button classes from attributes.
    $variables['button_classes'] = array_filter($variables['elements']['#attributes']['class'], function ($v) {
      return str_starts_with($v, 'bttn');
    });

    // Add banner--video class if bundle is a video.
    // @todo revisit this class when https://github.com/uiowa/uids/issues/721 is completed.
    if ($block->hasField('field_uiowa_banner_image')) {
      if (!$block->get('field_uiowa_banner_image')->isEmpty()) {
        $bundle_value = $block->get('field_uiowa_banner_image')->first()->get('entity')->getValue();
        if ($bundle_value) {
          $bundle_type = $block->get('field_uiowa_banner_image')->first()->get('entity')->getValue()->bundle();
          if ($bundle_type === 'video') {
            $variables['attributes']['class'][] = 'banner--video';
          }
        }
      }
    }

    $variables['links'] = [];

    if ($block->hasField('field_uiowa_banner_link')) {
      foreach ($block->get('field_uiowa_banner_link')->getIterator() as $link) {
        $variables['links'][] = [
          'link_url' => $link->getUrl()->toString(),
          'link_text' => $link->get('title')->getString(),
        ];
      }
    }
  }

  // Check if the hover effect should be applied on the stat block.
  if ($variables['derivative_plugin_id'] === 'uiowa_statistic' && isset($variables['elements']['#attributes']['class'])) {
    $variables['has_hover_effect'] = !in_array('stat--static', $variables['elements']['#attributes']['class']);
  }

  // Check for blockquote image placement.
  if ($variables['derivative_plugin_id'] === 'uiowa_quote' && isset($variables['elements']['#attributes']['class'])) {
    $variables['has_image_below'] = !in_array('blockquote--img-above', $variables['elements']['#attributes']['class']);
    $variables['has_image_above'] = !in_array('blockquote--img-below', $variables['elements']['#attributes']['class']);
  }

}

/**
 * Implements hook_preprocess_HOOK() for the uids_base_local_tasks block.
 */
function uids_base_preprocess_block__uids_base_local_tasks(&$variables) {
  // Add the library to the block.
  $variables['#attached']['library'][] = 'uids_base/local-tasks';
}

/**
 * Implements hook_preprocess_HOOK() for block_content__uiowa_collection__tab.html.twig.
 */
function uids_base_preprocess_block_content__uiowa_collection__tab(&$variables) {
  $variables['tabs'] = [];
  $items = $variables['elements']['field_uiowa_collection_items']['#items'];
  foreach ($items as $delta => $item) {
    $id = $item->get('target_id')->getString();
    $paragraph = \Drupal::service('entity_type.manager')
      ->getStorage('paragraph')
      ->load($id);
    if ($paragraph instanceof ParagraphInterface) {
      $label = $paragraph->get('field_collection_headline')->getString();
      $variables['tabs'][$delta] = [
        'id' => $id,
        'label' => $label,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for block_content__uiowa_collection__accordion.html.twig.
 */
function uids_base_preprocess_block_content__uiowa_collection__accordion(&$variables) {
  $block = $variables['elements']['#block_content'];
  // If the value hasn't been set, or is set to multi-select,
  // pass "true" for use in constructing the accordion.
  // "False" designates a single-select accordion.
  $variables['multiselect'] = (!isset($block->field_accordion_type->value) ||
    $block->field_accordion_type->value === 'multi_select') ? 'true' : 'false';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uids_base_preprocess_menu(&$variables) {
  switch ($variables['menu_name']) {
    case 'top-links':
      $variables['limit'] = theme_get_setting('header.top_links_limit');
      break;

  }
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function uids_base_preprocess_menu_local_task(&$variables) {
  $url = $variables['link']['#url'];

  if ($url instanceof Url) {
    $route_name = $url->getRouteName();

    $supported_entity_types = [
      'node',
      'fragment',
      'taxonomy_term',
    ];

    $route_icon_map = [];

    foreach ($supported_entity_types as $entity_type) {
      $route_icon_map['entity.' . $entity_type . '.canonical'] = 'view';
      $route_icon_map['entity.' . $entity_type . '.edit_form'] = 'edit';
      $route_icon_map['entity.' . $entity_type . '.delete_form'] = 'delete';
      $route_icon_map['entity.' . $entity_type . '.version_history'] = 'history';
      $route_icon_map['entity.' . $entity_type . '.entity_usage'] = 'usage';
      $route_icon_map['entity.' . $entity_type . '.devel_load'] = 'devel';
      $route_icon_map['entity.' . $entity_type . '.replicate'] = 'replicate';
      $route_icon_map['layout_builder.overrides.' . $entity_type . '.view'] = 'layout';
    }

    // Set the icon if the route matches an entry in the map.
    if (isset($route_icon_map[$route_name])) {
      $variables['link']['#options']['attributes']['class'][] = 'local-task-icon';
      $variables['link']['#options']['attributes']['class'][] = 'local-task-icon--' . $route_icon_map[$route_name];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uids_base_preprocess_paragraph(&$variables) {

  $paragraph = $variables['paragraph'];
  // Get the value of the collection headline field.
  if ($paragraph->getType() == 'uiowa_slide') {
    $uiowa_slide_headline = $paragraph->get('field_collection_headline')->getValue()[0]['value'];
    // Strip tags.
    $variables['slide_headline'] = strip_tags($uiowa_slide_headline);
  }

  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['paragraph'];

    $collection_types = [
      'uiowa_slide' => 'field_uiowa_slider_slides',
      'uiowa_collection_item' => 'field_uiowa_collection_items',
      'uiowa_timeline_item' => 'field_uiowa_timeline_items',
    ];

    if (in_array($paragraph->bundle(), array_keys($collection_types))) {
      $items_field = $collection_types[$paragraph->bundle()];
      $variables['delta'] = 0;

      $parent = $paragraph->getParentEntity();
      if ($parent instanceof ContentEntityInterface) {
        $variables['parent_id'] = $parent->id();
        if ($parent->hasField($items_field)) {
          $id = $paragraph->id();
          /**
           * @var integer $delta
           * @var \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $item
           */
          foreach ($parent->get($items_field)->getValue() as $delta => $item) {
            if ($item['target_id'] === $id) {
              $variables['delta'] = $delta;
              break;
            }
          }
        }
        // This works for collections, sliders, and timeline not other blocks.
        if ($parent->hasField('field_uiowa_headline')) {
          $headline_fields = $parent->get('field_uiowa_headline')->getValue();
          foreach ($headline_fields as $headline_field) {
            // There isn't a headline, so use the child heading size field.
            if (empty($headline_field['headline'])) {
              $variables['h_size'] = $headline_field['child_heading_size'];
            }
            else {
              $variables['h_size'] = HeadlineHelper::getHeadingSizeUp($headline_field['heading_size']);
            }
          }
        }
      }

      // If our bundle is the collection item and we have a
      // 'field_automatically_open' value set...
      if ($paragraph->bundle() === 'uiowa_collection_item' &&
        $opened = $paragraph->field_automatically_open->value) {
        // Pass a true or false based upon the value to the template.
        // Template: docroot/themes/custom/uids_base/uids_base.theme .
        $variables['field_automatically_open'] = ($opened) ? 'true' : 'false';
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uids_base_preprocess_views_view(&$variables) {
  $variables['more']['#options']['attributes']['class'] = [
    'bttn',
    'bttn--primary',
    'bttn--caps',
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uids_base_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];

  // Limit this to the 'person_custom' view using
  // the 'students' display.
  if ($view->id() === 'person_custom' && $view->current_display === 'students') {
    $field = $variables['field'];
    // Check that we're looking at the 'Advisor' field.
    if ($field instanceof EntityField && $field->field === 'field_pt_student_advisor') {
      // Check that we can access the person node.
      if (isset($variables['row'])
        && !is_null($node = $variables['row']->_entity)
        && $node instanceof NodeInterface
      ) {
        // Check that we can access the Advisor entity reference.
        if (!is_null($advisor_field = $node->field_pt_student_advisor) && $advisor = $advisor_field->entity) {
          // Is the advisor hidden?
          /** @var \Drupal\node\NodeInterface $advisor */
          $hide_person = $advisor->get('field_person_hide')->value;

          if ($hide_person) {
            // Display advisor name as plain text.
            $field->options['settings']['link'] = FALSE;
            $variables['output'] = $variables['field']
              ->advancedRender($variables['row']);
          }
        }
      }
    }
  }
}

/**
 * Implements theme_preprocess_form().
 */
function uids_base_preprocess_form(&$variables) {
  // Add 'uids-content' and 'uids-search' classes to search-block-form.
  if (isset($variables['attributes']['id']) && $variables['attributes']['id'] === 'search-block-form') {
    $variables['attributes']['class'][] = 'uids-content uids-search';
  }
}

/**
 * Implements theme_preprocess_input().
 */
function uids_base_preprocess_input(&$variables) {
  if (isset($variables['element']['#name']) && $variables['element']['#name'] === 'search-terms') {
    $variables['attributes']['class'] = [];
  }

  // Set the placeholder attribute for date inputs. The required format is
  // always YYYY-MM-DD. This helps people input the date as a string for
  // browsers that do not support the HTML date element.
  if (isset($variables['element']['#type']) && $variables['element']['#type'] === 'date') {
    $variables['attributes']['placeholder'] = 'YYYY-MM-DD';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uids_base_preprocess_superfish(array &$variables) {
  // An access-aware boolean of whether the menu is empty or not.
  $variables['menu_is_empty'] = FALSE;

  $items = array_filter($variables['menu_items']['#tree'], function ($item) {
    /** @var \Drupal\Core\Menu\MenuLinkTreeElement $item */
    return $item->access->isAllowed();
  });

  if (empty($items)) {
    $variables['menu_is_empty'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_superfish_menu_items().
 */
function uids_base_preprocess_superfish_menu_items(array &$variables) {
  if (isset($variables['menu_items'])) {
    foreach ($variables['menu_items'] as $i => $menu_item) {
      if (isset($menu_item['link_menuparent'])) {
        if ($menu_item['link']['#url']->isRouted() && $menu_item['link']['#url']->getRouteName() === '<nolink>') {
          $variables['menu_items'][$i]['link_menuparent']['#options']['attributes']['tabindex'] = '0';
        }

        if ($variables['element']['#settings']['menu_type'] === 'vertical') {
          $variables['menu_items'][$i]['link_menuparent']['#options']['attributes']['role'] = 'button';
          $variables['menu_items'][$i]['link_menuparent']['#options']['attributes']['aria-haspopup'] = 'true';
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function uids_base_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'] . '__' . $element['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function uids_base_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#name']) && $variables['element']['#name'] === 'search-terms') {
    $suggestions[] = $variables['theme_hook_original'] . '__uiowa_search__search_terms';
  }
}

/**
 * Implements hook_theme_suggestion_input_alter().
 */
function uids_base_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#name']) && $element['#name'] === 'btnG') {
    $suggestions[] = 'input__uiowa_search__' . $element['#type'];
  }
}

/**
 * Implements hook_theme_suggestion_page_title_alter().
 */
function uids_base_theme_suggestions_page_title_alter(array &$suggestions, array $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  // Add page title suggestion for nodes.
  if (!empty($node) && is_object($node)) {
    $suggestions[] = 'page_title__node';
  }
}

/**
 * Implements hook_photoswipe_js_options_alter().
 */
function uids_base_photoswipe_js_options_alter(array &$settings) {
  // Disable's photoswipe's share links (twitter, fb, pintrest).
  $settings['shareEl'] = FALSE;
}
