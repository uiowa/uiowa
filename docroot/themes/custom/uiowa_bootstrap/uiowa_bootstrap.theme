<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Template\Attribute;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_page().
 */
function uiowa_bootstrap_preprocess_page(&$variables) {
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['site_slogan'] = $config->get('slogan');

  // Attach theme settings libraries.
  $uib_libraries = theme_get_setting('uib_libraries') ?? FALSE;
  if ($uib_libraries) {
    foreach ($uib_libraries as $library) {
      if ($library) {
        $variables['#attached']['library'][] = 'uiowa_bootstrap/' . $library;
      }
    }
  }

  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute()) {
    if (!empty($variables['node'])) {
      /** @var \Drupal\node\NodeInterface $node */
      $node = $variables['node'];
      if ($node instanceof NodeInterface) {
        $type = $node->getType();
        switch ($type) {
          case 'page':
          case 'article':
            if ($node->hasField('field_image') && !$node->get('field_image')
              ->isEmpty() && $node->preview_view_mode !== 'teaser') {
              $image = $node->get('field_image')->view('sitenow_16_9');
              $variables['node_image'] = $image;
              $variables['header_attributes']->addClass('has-bg-img');
            }
            break;

        }
      }
    }
  }
}

/**
 * Implements hook_css_alter().
 */
function uiowa_bootstrap_css_alter(&$css, $assets) {
  $classy = drupal_get_path('theme', 'classy');
  // Remove classy css.
  unset($css[$classy . '/css/components/messages.css']);
  unset($css[$classy . '/css/components/menu.css']);
}

/**
 * Implements hook_preprocess_superfish().
 */
function uiowa_bootstrap_preprocess_superfish(&$variables) {
  // Clearfix superfish ul.
  $variables['menu_classes'] .= ' clearfix';
}

/**
 * Implements hook_preprocess_form_element().
 */
function uiowa_bootstrap_preprocess_form_element(&$variables) {
  // Set element attributes for the input.
  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
  }
}

/**
 * Implements hook_preprocess_input().
 */
function uiowa_bootstrap_preprocess_input(&$variables) {
  if (isset($variables['attributes']['class'])) {
    if (is_object($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class']->value())) {
        $variables['attributes']['class']->addClass('is-invalid');
      }
    }
    elseif (is_array($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class'])) {
        $variables['attributes']['class'][] = 'is-invalid';
      }
    }
  }
  if ($variables['element']['#type'] == 'submit') {
    $btn_classes = [
      'btn-primary',
      'btn-secondary',
      'btn-success',
      'btn-warning',
      'btn-danger',
      'btn-link',
      'btn-light',
      'btn-dark',
    ];
    if (is_object($variables['attributes']['class'])) {
      if (empty(array_intersect($btn_classes, $variables['attributes']['class']->value()))) {
        $variables['attributes']['class']->addClass('btn-primary');
      }
      if (!in_array('btn', $variables['attributes']['class']->value())) {
        $variables['attributes']['class']->addClass('btn');
      }
    }
    else {
      if (empty(array_intersect($btn_classes, $variables['attributes']['class']))) {
        $variables['attributes']['class'][] = 'btn-primary';
      }
      if (!in_array('btn', $variables['attributes']['class'])) {
        $variables['attributes']['class'][] = 'btn';
      }
      $variables['attributes'] = new Attribute($variables['attributes']);
    }
  }
}
