diff --git a/core/modules/views/src/Plugin/views/display/Block.php b/core/modules/views/src/Plugin/views/display/Block.php
index 00bdf1a10b843513843b988f09a623811860802f..b01bbb8f812286d636cd9158def3b1665bbb0c84 100644
--- a/core/modules/views/src/Plugin/views/display/Block.php
+++ b/core/modules/views/src/Plugin/views/display/Block.php
@@ -3,12 +3,20 @@
 namespace Drupal\views\Plugin\views\display;
 
 use Drupal\Core\Url;
+use Drupal\Component\Plugin\ContextAwarePluginInterface;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
+use Drupal\Component\Utility\Crypt;
+use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\KeyValueStore\KeyValueFactoryInterface;
+use Drupal\Core\Plugin\Context\ContextHandlerInterface;
+use Drupal\Core\Plugin\Context\ContextRepositoryInterface;
+use Drupal\Core\Site\Settings;
 use Drupal\views\Plugin\Block\ViewsBlock;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 
 /**
  * The plugin that handles a block.
@@ -52,6 +60,34 @@ class Block extends DisplayPluginBase {
    */
   protected $blockManager;
 
+  /**
+   * The key/value manager service.
+   *
+   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   */
+  protected $keyValue;
+
+  /**
+   * The context repository.
+   *
+   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   */
+  protected $contextRepository;
+
+  /**
+   * The plugin context handler.
+   *
+   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   */
+  protected $contextHandler;
+
+  /**
+   * A hashed key of the key/value entry that holds block instance settings.
+   *
+   * @var string
+   */
+  protected $blockConfigKey;
+
   /**
    * Constructs a new Block instance.
    *
@@ -65,12 +101,33 @@ class Block extends DisplayPluginBase {
    *   The entity type manager.
    * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
    *   The block manager.
+   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value
+   *   The key/value manager service.
+   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   *   The context repository.
+   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   *   The ContextHandler for applying contexts to conditions properly.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, BlockManagerInterface $block_manager) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, BlockManagerInterface $block_manager, KeyValueFactoryInterface $key_value = NULL, ContextRepositoryInterface $context_repository = NULL, ContextHandlerInterface $context_handler = NULL) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
 
     $this->entityTypeManager = $entity_type_manager;
     $this->blockManager = $block_manager;
+    if (!isset($key_value)) {
+      @trigger_error('Calling ' . __METHOD__ . '() without the $key_value argument is deprecated in drupal:10.2.0 and will be required in drupal:11.0.0. See https://www.drupal.org/node/3395016', E_USER_DEPRECATED);
+      $key_value = \Drupal::service('keyvalue');
+    }
+    $this->keyValue = $key_value;
+    if (!isset($context_repository)) {
+      @trigger_error('Calling ' . __METHOD__ . '() without the $context_repository argument is deprecated in drupal:10.2.0 and will be required in drupal:11.0.0. See https://www.drupal.org/node/3395016', E_USER_DEPRECATED);
+      $context_repository = \Drupal::service('context.repository');
+    }
+    $this->contextRepository = $context_repository;
+    if (!isset($context_handler)) {
+      @trigger_error('Calling ' . __METHOD__ . '() without the $context_handler argument is deprecated in drupal:10.2.0 and will be required in drupal:11.0.0. See https://www.drupal.org/node/3395016', E_USER_DEPRECATED);
+      $context_handler = \Drupal::service('context.handler');
+    }
+    $this->contextHandler = $context_handler;
   }
 
   /**
@@ -82,7 +139,10 @@ public static function create(ContainerInterface $container, array $configuratio
       $plugin_id,
       $plugin_definition,
       $container->get('entity_type.manager'),
-      $container->get('plugin.manager.block')
+      $container->get('plugin.manager.block'),
+      $container->get('keyvalue'),
+      $container->get('context.repository'),
+      $container->get('context.handler')
     );
   }
 
@@ -359,16 +419,192 @@ public function blockSubmit(ViewsBlock $block, $form, FormStateInterface $form_s
   /**
    * Allows to change the display settings right before executing the block.
    *
+   * When this block is rebuilt as part of an AJAX call, the AJAX handler does
+   * not have block instance settings and context information available.
+   * Because of that, the first time this block is rendered the block instance
+   * overrides are put in the key/value store. The first time the block is
+   * rendered is normally during a non-AJax request but it could be an Ajax
+   * request. This is possible only when all following calls pass along the
+   * 'block_config_key' query param and it  matches the key generated here.
+   *
+   * @see \Drupal\views\Plugin\views\display\Block::preview()
+   * @see \Drupal\views\Plugin\views\display\Block::getConfigurationFromHashedKey()
+   *
    * @param \Drupal\views\Plugin\Block\ViewsBlock $block
    *   The block plugin for views displays.
    */
   public function preBlockBuild(ViewsBlock $block) {
     $config = $block->getConfiguration();
+
+    $request = $this->view->getRequest();
+    if (!empty($request->query)) {
+      $key = $request->query->get('block_config_key');
+    }
+    if (empty($key)) {
+      // Calculate a brand new key.
+      $this->blockConfigKey = $this->calculateConfigurationHash($config);
+      $key_value_storage = $this->keyValue->get('views_block_overrides');
+      $view_id = $this->view->id();
+      if (!$key_value_storage->has($view_id)) {
+        $key_value_storage->set($view_id, [$this->blockConfigKey => $config]);
+      }
+      else {
+        $existing_config = $key_value_storage->get($view_id);
+        if (!isset($existing_config[$this->blockConfigKey])) {
+          $existing_config[$this->blockConfigKey] = $config;
+          $key_value_storage->set($view_id, $existing_config);
+        }
+      }
+    }
+    elseif ($this->getConfigurationFromHashedKey($key)) {
+      // If we can retrieve valid configuration from the received key, persist
+      // it between requests.
+      $this->blockConfigKey = $key;
+    }
+    else {
+      // If the received key does not validate, mark the build as failed, which
+      // will abort the rendering process.
+      // See \Drupal\views\ViewExecutable::render().
+      $this->view->build_info['fail'] = TRUE;
+      return;
+    }
+
     if ($config['items_per_page'] !== 'none') {
       $this->view->setItemsPerPage($config['items_per_page']);
     }
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function preparePreview() {
+    // In AJAX requests, we have to figure out the block config ourselves and
+    // prepare the view using that.
+    if ($block_instance = $this->getBlockFromAjaxRequest()) {
+      $this->preBlockBuild($block_instance);
+    }
+  }
+
+  /**
+   * Returns a configured views block plugin instance on an AJAX request.
+   *
+   * @return \Drupal\views\Plugin\Block\ViewsBlock|null
+   *   The views block or NULL if this is not an AJAX request or the block
+   *   can't be instantiated.
+   *
+   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   */
+  protected function getBlockFromAjaxRequest(): ViewsBlock|null {
+    if (!$this->view->getRequest()->isXmlHttpRequest()) {
+      return NULL;
+    }
+
+    // We expect to receive here the "block_config_key" parameter, which will
+    // allow us to retrieve the block config from the key/value store.
+    $query_args = $this->view->getRequest()->query->all();
+    // In order to have exposed filters submissions preserve the query args as
+    // well, they are injected in the 'view_query' param. We merge them all
+    // together here.
+    if (!empty($query_args['view_query'])) {
+      $parsed_view_query = UrlHelper::parse('?' . $query_args['view_query']);
+      $query_args += $parsed_view_query['query'];
+    }
+    if (empty($query_args['block_config_key'])) {
+      return NULL;
+    }
+
+    // Retrieve the block configuration values from the key/value store, ensure
+    // that is been generated for the same view.
+    $configuration = $this->getConfigurationFromHashedKey($query_args['block_config_key']);
+    if ($configuration === FALSE) {
+      throw new AccessDeniedHttpException('Invalid block config key.');
+    }
+
+    // Create a block instance with those settings.
+    /** @var \Drupal\views\Plugin\Block\ViewsBlock $block_instance */
+    try {
+      $block_instance = $this->blockManager->createInstance($configuration['id'], $configuration);
+      $plugin_definition = $block_instance->getPluginDefinition();
+      if ($plugin_definition['id'] === 'broken') {
+        return NULL;
+      }
+      if ($block_instance instanceof ContextAwarePluginInterface) {
+        $context_mapping = $block_instance->getContextMapping();
+        $context_mapping = array_filter($context_mapping, function ($x) {
+          return $x !== 'layout_builder.entity';
+        });
+        $contexts = $this->contextRepository->getRuntimeContexts($context_mapping);
+        $this->contextHandler->applyContextMapping($block_instance, $contexts);
+        return $block_instance;
+      }
+    }
+    catch (\Exception $e) {
+      return NULL;
+    }
+    return NULL;
+  }
+
+  /**
+   * Retrieve the stored configuration from a given hashed key.
+   *
+   * @param string $key
+   *   The hashed key.
+   *
+   * @return array|false
+   *   The configuration array if the received key is valid and matches with
+   *   the view/display being executed, FALSE otherwise.
+   */
+  protected function getConfigurationFromHashedKey($key) {
+    $configuration = $this->keyValue->get('views_block_overrides')->get($this->view->id());
+    if ($configuration && !empty($configuration[$key]['id'])) {
+      $calculated_hash = $this->calculateConfigurationHash($configuration[$key]);
+      if ($calculated_hash === $key) {
+        return $configuration[$key];
+      }
+    }
+    return FALSE;
+  }
+
+  /**
+   * Generates a hash for the given configuration and current view/display.
+   *
+   * @param array $configuration
+   *   The block configuration.
+   *
+   * @return string
+   *   The generated hash.
+   */
+  protected function calculateConfigurationHash(array $configuration) {
+    return $this->view->current_display . ':' . Crypt::hmacBase64(serialize($configuration), Settings::getHashSalt());
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function elementPreRender(array $element) {
+    $element = parent::elementPreRender($element);
+    /** @var \Drupal\views\ViewExecutable $view */
+    $view = $element['#view'];
+
+    // Add the overrides key as a query param, so subsequent AJAX calls for
+    // other pages have this info available.
+    if (!empty($element['#pager']) && !empty($this->blockConfigKey)) {
+      $element['#pager']['#parameters']['block_config_key'] = $this->blockConfigKey;
+    }
+
+    // Do the same for exposed filters. However, once here the submission
+    // happens in a POST request, we inject our overrides key in the view JS
+    // settings, that will be appended to the real query string later in the
+    // AJAX behavior. See views_views_pre_render() and Drupal.views.ajaxView
+    // for more information.
+    if ($view->ajaxEnabled() && !empty($view->exposed_widgets) && empty($view->is_attachment) && empty($view->live_preview)) {
+      $view_query = "block_config_key=$this->blockConfigKey";
+      $view->element['#attached']['drupalSettings']['views']['ajaxViews']['views_dom_id:' . $view->dom_id]['view_query'] = $view_query;
+    }
+
+    return $element;
+  }
+
   /**
    * {@inheritdoc}
    */
diff --git a/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php b/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php
index ef24bb6eee649d0994c9e751152bffcb7ac4369e..c01a275c14b74bc0405d2fd33ab69b2604d27ebe 100644
--- a/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php
+++ b/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php
@@ -2457,6 +2457,12 @@ public static function buildBasicRenderable($view_id, $display_id, array $args =
 
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function preparePreview() {
+  }
+
   /**
    * {@inheritdoc}
    */
diff --git a/core/modules/views/src/Plugin/views/display/DisplayPluginInterface.php b/core/modules/views/src/Plugin/views/display/DisplayPluginInterface.php
index bb75dde12b1fd824130a3ed7db3592a15a27aeee..1a3d8257eafcf8af3f780a526f5f4c69bcedb297 100644
--- a/core/modules/views/src/Plugin/views/display/DisplayPluginInterface.php
+++ b/core/modules/views/src/Plugin/views/display/DisplayPluginInterface.php
@@ -494,6 +494,11 @@ public static function buildBasicRenderable($view_id, $display_id, array $args =
    */
   public function buildRenderable(array $args = [], $cache = TRUE);
 
+  /**
+   * Prepares the display for preview prior to preExecute().
+   */
+  public function preparePreview();
+
   /**
    * Renders the display for the purposes of a live preview.
    *
diff --git a/core/modules/views/src/ViewExecutable.php b/core/modules/views/src/ViewExecutable.php
index 0543d5569559770c158eb2513b02c7f4a84e11f3..c756687746fd52513d9b8a7d811aa5b4388216ca 100644
--- a/core/modules/views/src/ViewExecutable.php
+++ b/core/modules/views/src/ViewExecutable.php
@@ -1672,6 +1672,11 @@ public function preview($display_id = NULL, $args = []) {
     }
 
     $this->preview = TRUE;
+
+    // Allow the display handler to run functionality that is necessary
+    // prior to preExecute().
+    $this->display_handler->preparePreview();
+
     $this->preExecute($args);
     // Preview the view.
     $output = $this->display_handler->preview();
diff --git a/core/modules/views/tests/modules/views_test_config/test_views/views.view.content_block_overrides_ajax_test.yml b/core/modules/views/tests/modules/views_test_config/test_views/views.view.content_block_overrides_ajax_test.yml
new file mode 100644
index 0000000000000000000000000000000000000000..bbe4e675e16ccd704d03cc24deb11c0e96613f93
--- /dev/null
+++ b/core/modules/views/tests/modules/views_test_config/test_views/views.view.content_block_overrides_ajax_test.yml
@@ -0,0 +1,222 @@
+langcode: en
+status: true
+dependencies:
+  module:
+    - node
+    - user
+id: content_block_overrides_ajax_test
+label: 'Content block overrides AJAX test'
+module: views
+description: ''
+tag: ''
+base_table: node_field_data
+base_field: nid
+display:
+  default:
+    display_plugin: default
+    id: default
+    display_title: Master
+    position: 0
+    display_options:
+      access:
+        type: perm
+        options:
+          perm: 'access content'
+      cache:
+        type: tag
+        options: {  }
+      query:
+        type: views_query
+        options:
+          disable_sql_rewrite: false
+          distinct: false
+          replica: false
+          query_comment: ''
+          query_tags: {  }
+      exposed_form:
+        type: basic
+        options:
+          submit_button: Apply
+          reset_button: false
+          reset_button_label: Reset
+          exposed_sorts_label: 'Sort by'
+          expose_sort_order: true
+          sort_asc_label: Asc
+          sort_desc_label: Desc
+      pager:
+        type: full
+        options:
+          items_per_page: 10
+          offset: 0
+          id: 0
+          total_pages: null
+          expose:
+            items_per_page: false
+            items_per_page_label: 'Items per page'
+            items_per_page_options: '5, 10, 25, 50'
+            items_per_page_options_all: false
+            items_per_page_options_all_label: '- All -'
+            offset: false
+            offset_label: Offset
+          tags:
+            previous: '‹ Previous'
+            next: 'Next ›'
+            first: '« First'
+            last: 'Last »'
+          quantity: 9
+      style:
+        type: table
+      row:
+        type: fields
+      fields:
+        title:
+          id: title
+          table: node_field_data
+          field: title
+          entity_type: node
+          entity_field: title
+          alter:
+            alter_text: false
+            make_link: false
+            absolute: false
+            trim: false
+            word_boundary: false
+            ellipsis: false
+            strip_tags: false
+            html: false
+          hide_empty: false
+          empty_zero: false
+          settings:
+            link_to_entity: true
+          plugin_id: field
+          relationship: none
+          group_type: group
+          admin_label: ''
+          label: Title
+          exclude: false
+          element_type: ''
+          element_class: ''
+          element_label_type: ''
+          element_label_class: ''
+          element_label_colon: true
+          element_wrapper_type: ''
+          element_wrapper_class: ''
+          element_default_classes: true
+          empty: ''
+          hide_alter_empty: true
+          click_sort_column: value
+          type: string
+          group_column: value
+          group_columns: {  }
+          group_rows: true
+          delta_limit: 0
+          delta_offset: 0
+          delta_reversed: false
+          delta_first_last: false
+          multi_type: separator
+          separator: ', '
+          field_api_classes: false
+      filters:
+        status:
+          value: '1'
+          table: node_field_data
+          field: status
+          plugin_id: boolean
+          entity_type: node
+          entity_field: status
+          id: status
+          expose:
+            operator: ''
+          group: 1
+        title:
+          id: title
+          table: node_field_data
+          field: title
+          relationship: none
+          group_type: group
+          admin_label: ''
+          operator: contains
+          value: ''
+          group: 1
+          exposed: true
+          expose:
+            operator_id: title_op
+            label: Title
+            description: ''
+            use_operator: false
+            operator: title_op
+            identifier: title
+            required: false
+            remember: false
+            multiple: false
+            remember_roles:
+              authenticated: authenticated
+              anonymous: '0'
+              administrator: '0'
+            placeholder: ''
+          is_grouped: false
+          group_info:
+            label: ''
+            description: ''
+            identifier: ''
+            optional: true
+            widget: select
+            multiple: false
+            remember: false
+            default_group: All
+            default_group_multiple: {  }
+            group_items: {  }
+          entity_type: node
+          entity_field: title
+          plugin_id: string
+      sorts:
+        created:
+          id: created
+          table: node_field_data
+          field: created
+          relationship: none
+          group_type: group
+          admin_label: ''
+          order: ASC
+          exposed: false
+          expose:
+            label: ''
+          granularity: second
+          entity_type: node
+          entity_field: created
+          plugin_id: date
+      title: 'Content block overrides AJAX test'
+      header: {  }
+      footer: {  }
+      empty: {  }
+      relationships: {  }
+      arguments: {  }
+      display_extenders: {  }
+      use_ajax: true
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - url
+        - url.query_args
+        - 'user.node_grants:view'
+        - user.permissions
+      tags: {  }
+  block_1:
+    display_plugin: block
+    id: block_1
+    display_title: Block
+    position: 1
+    display_options:
+      display_extenders: {  }
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - url
+        - url.query_args
+        - 'user.node_grants:view'
+        - user.permissions
+      tags: {  }
diff --git a/core/modules/views/tests/src/Unit/Plugin/views/display/BlockTest.php b/core/modules/views/tests/src/Unit/Plugin/views/display/BlockTest.php
index bc191018246d2926adec99065ade4ec3476bc821..804dbd626e6386d2c6bad378af10a05497057860 100644
--- a/core/modules/views/tests/src/Unit/Plugin/views/display/BlockTest.php
+++ b/core/modules/views/tests/src/Unit/Plugin/views/display/BlockTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests\views\Unit\Plugin\views\display;
 
 use Drupal\Tests\UnitTestCase;
+use Symfony\Component\HttpFoundation\Request;
 
 /**
  * @coversDefaultClass \Drupal\views\Plugin\views\display\Block
@@ -37,19 +38,74 @@ class BlockTest extends UnitTestCase {
   protected function setUp(): void {
     parent::setUp();
 
+    $methods = [
+      'id',
+      'executeDisplay',
+      'setDisplay',
+      'setItemsPerPage',
+      'getRequest',
+    ];
     $this->executable = $this->getMockBuilder('Drupal\views\ViewExecutable')
       ->disableOriginalConstructor()
-      ->onlyMethods(['executeDisplay', 'setDisplay', 'setItemsPerPage'])
+      ->onlyMethods($methods)
       ->getMock();
     $this->executable->expects($this->any())
       ->method('setDisplay')
       ->with('block_1')
       ->willReturn(TRUE);
+    $this->executable->expects($this->any())
+      ->method('id')
+      ->will($this->returnValue('foo'));
+    $this->executable->expects($this->any())
+      ->method('getRequest')
+      ->will($this->returnValue(new Request()));
 
-    $this->blockDisplay = $this->executable->display_handler = $this->getMockBuilder('Drupal\views\Plugin\views\display\Block')
+    $key_value = $this->getMockBuilder('Drupal\Core\KeyValueStore\DatabaseStorage')
       ->disableOriginalConstructor()
-      ->onlyMethods([])
+      ->onlyMethods(['has', 'set', 'getMultiple'])
+      ->getMock();
+    $key_value->expects($this->any())
+      ->method('has')
+      ->will($this->returnValue(TRUE));
+    $key_value->expects($this->any())
+      ->method('set')
+      ->will($this->returnValue(NULL));
+    $key_value->expects($this->any())
+      ->method('getMultiple')
+      ->will($this->returnValue(NULL));
+
+    $key_value_factory = $this->getMockBuilder('Drupal\Core\KeyValueStore\KeyValueDatabaseFactory')
+      ->disableOriginalConstructor()
+      ->onlyMethods(['get'])
+      ->getMock();
+    $key_value_factory->expects($this->any())
+      ->method('get')
+      ->will($this->returnValue($key_value));
+    $args = [
+      [],
+      'views_block',
+      [],
+      $this->getMockBuilder('Drupal\Core\Entity\EntityTypeManagerInterface')
+        ->disableOriginalConstructor()
+        ->getMock(),
+      $this->getMockBuilder('Drupal\Core\Block\BlockManagerInterface')
+        ->disableOriginalConstructor()
+        ->getMock(),
+      $key_value_factory,
+      $this->getMockBuilder('Drupal\Core\Plugin\Context\ContextRepositoryInterface')
+        ->disableOriginalConstructor()
+        ->getMock(),
+      $this->getMockBuilder('Drupal\Core\Plugin\Context\ContextHandlerInterface')
+        ->disableOriginalConstructor()
+        ->getMock(),
+    ];
+    $this->blockDisplay = $this->executable->display_handler = $this->getMockBuilder('Drupal\views\Plugin\views\display\Block')
+      ->setConstructorArgs($args)
+      ->onlyMethods(['calculateConfigurationHash'])
       ->getMock();
+    $this->blockDisplay->expects($this->any())
+      ->method('calculateConfigurationHash')
+      ->will($this->returnValue('foobar'));
 
     $this->blockDisplay->view = $this->executable;
 
diff --git a/core/modules/views/views.module b/core/modules/views/views.module
index 74c321c9ee65a2c7d6ce7b3c7d3044acc5cd55a4..5f612eb5959b89017a98911b2e65ece27d715519 100644
--- a/core/modules/views/views.module
+++ b/core/modules/views/views.module
@@ -813,3 +813,47 @@ function views_view_presave(ViewEntityInterface $view) {
   $config_updater = \Drupal::classResolver(ViewsConfigUpdater::class);
   $config_updater->updateAll($view);
 }
+
+/**
+ * Implements hook_ENTITY_TYPE_update().
+ */
+function views_view_update(EntityInterface $entity) {
+  // Clear the views block config cache.
+  $views_block_config_store = \Drupal::keyValue('views_block_overrides');
+  if ($views_block_config_store->has($entity->id())) {
+    $views_block_config_store->delete($entity->id());
+  }
+}
+
+/**
+ * Implements hook_ENTITY_TYPE_update().
+ */
+function views_view_delete(EntityInterface $entity) {
+  views_view_update($entity);
+}
+
+/**
+ * Implements hook_ENTITY_TYPE_update().
+ */
+function views_block_update(EntityInterface $entity) {
+  // Clear the views block config cache.
+  $plugin_id = $entity->getPluginId();
+  if (str_starts_with($plugin_id, 'views_block:')) {
+    // Extract view id from plugin id.
+    $view_id = explode('-', substr($plugin_id, 12))[0] ?? NULL;
+    if (!empty($view_id)) {
+      // Clear the views block config cache.
+      $views_block_config_store = \Drupal::keyValue('views_block_overrides');
+      if ($views_block_config_store->has($view_id)) {
+        $views_block_config_store->delete($view_id);
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_ENTITY_TYPE_delete().
+ */
+function views_block_delete(EntityInterface $entity) {
+  views_block_update($entity);
+}
